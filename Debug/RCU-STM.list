
RCU-STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f8  0800948c  0800948c  0001948c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b84  08009b84  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009b84  08009b84  00019b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b8c  08009b8c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009b8c  08009b8c  00019b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08009b94  08009b94  00019b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009b9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001414  20000074  08009c10  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001488  08009c10  00021488  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003a0fb  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006f6c  00000000  00000000  0005a19f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ff0  00000000  00000000  00061110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001da8  00000000  00000000  00063100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ce68  00000000  00000000  00064ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b0a3  00000000  00000000  00091d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4a6e  00000000  00000000  000bcdb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b1821  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008d04  00000000  00000000  001b1874  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009474 	.word	0x08009474

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08009474 	.word	0x08009474

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <_ZNK7Command14GetDataPointerEv>:

	void Reset();	// Reset the command, equivalent of a destructor that must be called, counts allocations and deallocations, asserts an error if the allocation count is too high

	// Getters
	uint16_t GetDataSize() const;
	uint8_t* GetDataPointer() const { return data; }
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	685b      	ldr	r3, [r3, #4]
 80005b0:	4618      	mov	r0, r3
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr

080005bc <_ZNK7Command10GetCommandEv>:
	GLOBAL_COMMANDS GetCommand() const { return command; }
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	4618      	mov	r0, r3
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <_ZNK7Command14GetTaskCommandEv>:
	uint16_t GetTaskCommand() const { return taskCommand; }
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	885b      	ldrh	r3, [r3, #2]
 80005e0:	4618      	mov	r0, r3
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr

080005ec <_ZN8UARTTask4InstEv>:

/* Class ------------------------------------------------------------------*/
class UARTTask : public Task
{
public:
	static UARTTask& Inst() {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
		static UARTTask inst;
 80005f0:	4b10      	ldr	r3, [pc, #64]	; (8000634 <_ZN8UARTTask4InstEv+0x48>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	f3bf 8f5b 	dmb	ish
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	2b00      	cmp	r3, #0
 8000600:	bf0c      	ite	eq
 8000602:	2301      	moveq	r3, #1
 8000604:	2300      	movne	r3, #0
 8000606:	b2db      	uxtb	r3, r3
 8000608:	2b00      	cmp	r3, #0
 800060a:	d010      	beq.n	800062e <_ZN8UARTTask4InstEv+0x42>
 800060c:	4809      	ldr	r0, [pc, #36]	; (8000634 <_ZN8UARTTask4InstEv+0x48>)
 800060e:	f008 f95d 	bl	80088cc <__cxa_guard_acquire>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	bf14      	ite	ne
 8000618:	2301      	movne	r3, #1
 800061a:	2300      	moveq	r3, #0
 800061c:	b2db      	uxtb	r3, r3
 800061e:	2b00      	cmp	r3, #0
 8000620:	d005      	beq.n	800062e <_ZN8UARTTask4InstEv+0x42>
 8000622:	4805      	ldr	r0, [pc, #20]	; (8000638 <_ZN8UARTTask4InstEv+0x4c>)
 8000624:	f000 f819 	bl	800065a <_ZN8UARTTaskC1Ev>
 8000628:	4802      	ldr	r0, [pc, #8]	; (8000634 <_ZN8UARTTask4InstEv+0x48>)
 800062a:	f008 f95b 	bl	80088e4 <__cxa_guard_release>
		return inst;
 800062e:	4b02      	ldr	r3, [pc, #8]	; (8000638 <_ZN8UARTTask4InstEv+0x4c>)
	}
 8000630:	4618      	mov	r0, r3
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000098 	.word	0x20000098
 8000638:	20000090 	.word	0x20000090

0800063c <_ZN8UARTTask7RunTaskEPv>:

	void InitTask();

protected:
	static void RunTask(void* pvParams) { UARTTask::Inst().Run(pvParams); } // Static Task Interface, passes control to the instance Run();
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	f7ff ffd2 	bl	80005ec <_ZN8UARTTask4InstEv>
 8000648:	4603      	mov	r3, r0
 800064a:	6879      	ldr	r1, [r7, #4]
 800064c:	4618      	mov	r0, r3
 800064e:	f000 f845 	bl	80006dc <_ZN8UARTTask3RunEPv>
 8000652:	bf00      	nop
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}

0800065a <_ZN8UARTTaskC1Ev>:

	void ConfigureUART();
	void HandleCommand(Command& cm);

private:
	UARTTask() : Task(UART_TASK_QUEUE_DEPTH_OBJS) {}	// Private constructor
 800065a:	b580      	push	{r7, lr}
 800065c:	b082      	sub	sp, #8
 800065e:	af00      	add	r7, sp, #0
 8000660:	6078      	str	r0, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	210a      	movs	r1, #10
 8000666:	4618      	mov	r0, r3
 8000668:	f000 fab6 	bl	8000bd8 <_ZN4TaskC1Et>
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	4618      	mov	r0, r3
 8000670:	3708      	adds	r7, #8
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
	...

08000678 <_ZN8UARTTask8InitTaskEv>:

/**
 * @brief Initializes UART task with the RTOS scheduler
*/
void UARTTask::InitTask()
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b086      	sub	sp, #24
 800067c:	af02      	add	r7, sp, #8
 800067e:	6078      	str	r0, [r7, #4]
	// Make sure the task is not already initialized
	SOAR_ASSERT(rtTaskHandle == nullptr, "Cannot initialize UART task twice");
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d005      	beq.n	8000694 <_ZN8UARTTask8InitTaskEv+0x1c>
 8000688:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <_ZN8UARTTask8InitTaskEv+0x50>)
 800068a:	221a      	movs	r2, #26
 800068c:	490f      	ldr	r1, [pc, #60]	; (80006cc <_ZN8UARTTask8InitTaskEv+0x54>)
 800068e:	2000      	movs	r0, #0
 8000690:	f000 fdc8 	bl	8001224 <_Z17soar_assert_debugbPKctS0_z>
	
	// Start the task
	BaseType_t rtValue =
		xTaskCreate((TaskFunction_t)UARTTask::RunTask,
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	9301      	str	r3, [sp, #4]
 8000698:	2302      	movs	r3, #2
 800069a:	9300      	str	r3, [sp, #0]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006a2:	490b      	ldr	r1, [pc, #44]	; (80006d0 <_ZN8UARTTask8InitTaskEv+0x58>)
 80006a4:	480b      	ldr	r0, [pc, #44]	; (80006d4 <_ZN8UARTTask8InitTaskEv+0x5c>)
 80006a6:	f006 fcf8 	bl	800709a <xTaskCreate>
 80006aa:	60f8      	str	r0, [r7, #12]
			(void*)this,
			(UBaseType_t)UART_TASK_RTOS_PRIORITY,
			(TaskHandle_t*)&rtTaskHandle);

	//Ensure creation succeded
	SOAR_ASSERT(rtValue == pdPASS, "UARTTask::InitTask() - xTaskCreate() failed");
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	d005      	beq.n	80006be <_ZN8UARTTask8InitTaskEv+0x46>
 80006b2:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <_ZN8UARTTask8InitTaskEv+0x60>)
 80006b4:	2226      	movs	r2, #38	; 0x26
 80006b6:	4905      	ldr	r1, [pc, #20]	; (80006cc <_ZN8UARTTask8InitTaskEv+0x54>)
 80006b8:	2000      	movs	r0, #0
 80006ba:	f000 fdb3 	bl	8001224 <_Z17soar_assert_debugbPKctS0_z>

	// Configure DMA
	 
}
 80006be:	bf00      	nop
 80006c0:	3710      	adds	r7, #16
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	0800948c 	.word	0x0800948c
 80006cc:	080094b0 	.word	0x080094b0
 80006d0:	080094dc 	.word	0x080094dc
 80006d4:	0800063d 	.word	0x0800063d
 80006d8:	080094e8 	.word	0x080094e8

080006dc <_ZN8UARTTask3RunEPv>:
/**
 * @brief Instance Run loop for the UART Task, runs on scheduler start as long as the task is initialized.
 * @param pvParams RTOS Passed void parameters, contains a pointer to the object instance, should not be used
*/
void UARTTask::Run(void * pvParams)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	6039      	str	r1, [r7, #0]
	//UART Task loop
	while(1) {
		Command cm;
 80006e6:	f107 030c 	add.w	r3, r7, #12
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 f887 	bl	80007fe <_ZN7CommandC1Ev>

		//Wait forever for a command
		qEvtQueue->ReceiveWait(cm);
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	685b      	ldr	r3, [r3, #4]
 80006f4:	f107 020c 	add.w	r2, r7, #12
 80006f8:	4611      	mov	r1, r2
 80006fa:	4618      	mov	r0, r3
 80006fc:	f000 fa50 	bl	8000ba0 <_ZN5Queue11ReceiveWaitER7Command>
		
		//Process the command
		HandleCommand(cm);
 8000700:	f107 030c 	add.w	r3, r7, #12
 8000704:	4619      	mov	r1, r3
 8000706:	6878      	ldr	r0, [r7, #4]
 8000708:	f000 f802 	bl	8000710 <_ZN8UARTTask13HandleCommandER7Command>
	}
 800070c:	e7eb      	b.n	80006e6 <_ZN8UARTTask3RunEPv+0xa>
	...

08000710 <_ZN8UARTTask13HandleCommandER7Command>:
 * @brief HandleCommand handles any command passed to the UART task primary event queue. Responsible for
 * 		  handling all commands, even if unsupported. (Unexpected commands must still be reset) 
 * @param cm Reference to the command object to handle
*/
void UARTTask::HandleCommand(Command& cm)
{
 8000710:	b590      	push	{r4, r7, lr}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	6039      	str	r1, [r7, #0]
	//Switch for the GLOBAL_COMMAND
	switch (cm.GetCommand()) {
 800071a:	6838      	ldr	r0, [r7, #0]
 800071c:	f7ff ff4e 	bl	80005bc <_ZNK7Command10GetCommandEv>
 8000720:	4603      	mov	r3, r0
 8000722:	2b01      	cmp	r3, #1
 8000724:	d02a      	beq.n	800077c <_ZN8UARTTask13HandleCommandER7Command+0x6c>
 8000726:	2b02      	cmp	r3, #2
 8000728:	d11f      	bne.n	800076a <_ZN8UARTTask13HandleCommandER7Command+0x5a>
	case DATA_COMMAND: {
		//Switch for task specific command within DATA_COMMAND
		switch (cm.GetTaskCommand()) {
 800072a:	6838      	ldr	r0, [r7, #0]
 800072c:	f7ff ff52 	bl	80005d4 <_ZNK7Command14GetTaskCommandEv>
 8000730:	4603      	mov	r3, r0
 8000732:	2b01      	cmp	r3, #1
 8000734:	d10f      	bne.n	8000756 <_ZN8UARTTask13HandleCommandER7Command+0x46>
		case UART_TASK_COMMAND_SEND_DEBUG:
			HAL_UART_Transmit(SystemHandles::UART_Debug, cm.GetDataPointer(), cm.GetDataSize(), DEBUG_SEND_MAX_TIME_MS);
 8000736:	6838      	ldr	r0, [r7, #0]
 8000738:	f7ff ff34 	bl	80005a4 <_ZNK7Command14GetDataPointerEv>
 800073c:	4604      	mov	r4, r0
 800073e:	6838      	ldr	r0, [r7, #0]
 8000740:	f000 f912 	bl	8000968 <_ZNK7Command11GetDataSizeEv>
 8000744:	4603      	mov	r3, r0
 8000746:	461a      	mov	r2, r3
 8000748:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800074c:	4621      	mov	r1, r4
 800074e:	480f      	ldr	r0, [pc, #60]	; (800078c <_ZN8UARTTask13HandleCommandER7Command+0x7c>)
 8000750:	f004 fdf6 	bl	8005340 <HAL_UART_Transmit>
			break;
 8000754:	e008      	b.n	8000768 <_ZN8UARTTask13HandleCommandER7Command+0x58>
		default:
			SOAR_PRINT("UARTTask - Received Unsupported DATA_COMMAND {%d}\n", cm.GetTaskCommand());
 8000756:	6838      	ldr	r0, [r7, #0]
 8000758:	f7ff ff3c 	bl	80005d4 <_ZNK7Command14GetTaskCommandEv>
 800075c:	4603      	mov	r3, r0
 800075e:	4619      	mov	r1, r3
 8000760:	480b      	ldr	r0, [pc, #44]	; (8000790 <_ZN8UARTTask13HandleCommandER7Command+0x80>)
 8000762:	f000 fcfd 	bl	8001160 <_Z5printPKcz>
			break;
 8000766:	bf00      	nop
		}
	}
	case TASK_SPECIFIC_COMMAND: {
		break;
 8000768:	e008      	b.n	800077c <_ZN8UARTTask13HandleCommandER7Command+0x6c>
	}
	default:
		SOAR_PRINT("UARTTask - Received Unsupported Command {%d}\n", cm.GetCommand());
 800076a:	6838      	ldr	r0, [r7, #0]
 800076c:	f7ff ff26 	bl	80005bc <_ZNK7Command10GetCommandEv>
 8000770:	4603      	mov	r3, r0
 8000772:	4619      	mov	r1, r3
 8000774:	4807      	ldr	r0, [pc, #28]	; (8000794 <_ZN8UARTTask13HandleCommandER7Command+0x84>)
 8000776:	f000 fcf3 	bl	8001160 <_Z5printPKcz>
		break;
 800077a:	e000      	b.n	800077e <_ZN8UARTTask13HandleCommandER7Command+0x6e>
		break;
 800077c:	bf00      	nop
	}

	//No matter what we happens, we must reset allocated data
	cm.Reset();
 800077e:	6838      	ldr	r0, [r7, #0]
 8000780:	f000 f8d6 	bl	8000930 <_ZN7Command5ResetEv>
}
 8000784:	bf00      	nop
 8000786:	370c      	adds	r7, #12
 8000788:	46bd      	mov	sp, r7
 800078a:	bd90      	pop	{r4, r7, pc}
 800078c:	200005ec 	.word	0x200005ec
 8000790:	08009514 	.word	0x08009514
 8000794:	08009548 	.word	0x08009548

08000798 <_ZStanSt12memory_orderSt23__memory_order_modifier>:
    return memory_order(int(__m) | int(__mod));
  }

  constexpr memory_order
  operator&(memory_order __m, __memory_order_modifier __mod)
  {
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	6039      	str	r1, [r7, #0]
    return memory_order(int(__m) & int(__mod));
 80007a2:	683a      	ldr	r2, [r7, #0]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	4013      	ands	r3, r2
  }
 80007a8:	4618      	mov	r0, r3
 80007aa:	370c      	adds	r7, #12
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr

080007b4 <_Z11soar_mallocm>:
/**
 * @brief Malloc inline function, wraps malloc for multi-platform support, asserts successful allocation
 * @param size Size of data to malloc in bytes
 * @return Returns the pointer to the allocated data
*/
inline uint8_t* soar_malloc(uint32_t size) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
#ifdef COMPUTER_ENVIRONMENT
	uint8_t* ret = (uint8_t*)malloc(size);
#else
	uint8_t* ret = (uint8_t*)pvPortMalloc(size);
 80007bc:	6878      	ldr	r0, [r7, #4]
 80007be:	f007 fe83 	bl	80084c8 <pvPortMalloc>
 80007c2:	60f8      	str	r0, [r7, #12]
#endif
	
	SOAR_ASSERT(ret, "soar_malloc failed");
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d105      	bne.n	80007d6 <_Z11soar_mallocm+0x22>
 80007ca:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <_Z11soar_mallocm+0x2c>)
 80007cc:	226b      	movs	r2, #107	; 0x6b
 80007ce:	4905      	ldr	r1, [pc, #20]	; (80007e4 <_Z11soar_mallocm+0x30>)
 80007d0:	2000      	movs	r0, #0
 80007d2:	f000 fd27 	bl	8001224 <_Z17soar_assert_debugbPKctS0_z>
	return ret;
 80007d6:	68fb      	ldr	r3, [r7, #12]
}
 80007d8:	4618      	mov	r0, r3
 80007da:	3710      	adds	r7, #16
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	08009578 	.word	0x08009578
 80007e4:	0800958c 	.word	0x0800958c

080007e8 <_Z9soar_freePv>:

/**
 * @brief Free inline function, wraps free for multi-platform support
 * @param ptr Pointer to the data to free
 */
inline void soar_free(void* ptr) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
#ifdef COMPUTER_ENVIRONMENT
	free(ptr);
#else
	vPortFree(ptr);
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f007 ff35 	bl	8008660 <vPortFree>
#endif
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <_ZN7CommandC1Ev>:
/* Function Implementation ------------------------------------------------------------------*/

/**
 * @brief Default constructor for Command
*/
Command::Command(void)
 80007fe:	b480      	push	{r7}
 8000800:	b083      	sub	sp, #12
 8000802:	af00      	add	r7, sp, #0
 8000804:	6078      	str	r0, [r7, #4]
{
    command = COMMAND_NONE;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	2200      	movs	r2, #0
 800080a:	701a      	strb	r2, [r3, #0]
    taskCommand = 0;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2200      	movs	r2, #0
 8000810:	805a      	strh	r2, [r3, #2]
    data = nullptr;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	2200      	movs	r2, #0
 8000816:	605a      	str	r2, [r3, #4]
    dataSize = 0;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2200      	movs	r2, #0
 800081c:	811a      	strh	r2, [r3, #8]
    bShouldFreeData = false;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2200      	movs	r2, #0
 8000822:	729a      	strb	r2, [r3, #10]
}
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	4618      	mov	r0, r3
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr

08000832 <_ZN7CommandC1E15GLOBAL_COMMANDSt>:
/**
 * @brief Constructor with GLOBAL_COMMANDS and taskCommand params
 * @param command GLOBAL_COMMANDS param to initiate command with
 * @param taskCommand taskCommand param to initiate command with
*/
Command::Command(GLOBAL_COMMANDS command, uint16_t taskCommand)
 8000832:	b480      	push	{r7}
 8000834:	b083      	sub	sp, #12
 8000836:	af00      	add	r7, sp, #0
 8000838:	6078      	str	r0, [r7, #4]
 800083a:	460b      	mov	r3, r1
 800083c:	70fb      	strb	r3, [r7, #3]
 800083e:	4613      	mov	r3, r2
 8000840:	803b      	strh	r3, [r7, #0]
{
    this->command = command;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	78fa      	ldrb	r2, [r7, #3]
 8000846:	701a      	strb	r2, [r3, #0]
    this->taskCommand = taskCommand;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	883a      	ldrh	r2, [r7, #0]
 800084c:	805a      	strh	r2, [r3, #2]
    data = nullptr;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	2200      	movs	r2, #0
 8000852:	605a      	str	r2, [r3, #4]
    dataSize = 0;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2200      	movs	r2, #0
 8000858:	811a      	strh	r2, [r3, #8]
    bShouldFreeData = false;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2200      	movs	r2, #0
 800085e:	729a      	strb	r2, [r3, #10]
}
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	4618      	mov	r0, r3
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
	...

08000870 <_ZN7Command12AllocateDataEt>:
 * @brief Dynamically allocates memory for the command with the given data size
 * @param dataSize Size of array to allocate
 * @return TRUE on success, FALSE on failure (mem already allocated)
*/
bool Command::AllocateData(uint16_t dataSize)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	460b      	mov	r3, r1
 800087a:	807b      	strh	r3, [r7, #2]
    // If we don't have anything allocated, allocate and return success
    if (this->data == nullptr && !bShouldFreeData) {
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	685b      	ldr	r3, [r3, #4]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d125      	bne.n	80008d0 <_ZN7Command12AllocateDataEt+0x60>
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	7a9b      	ldrb	r3, [r3, #10]
 8000888:	f083 0301 	eor.w	r3, r3, #1
 800088c:	b2db      	uxtb	r3, r3
 800088e:	2b00      	cmp	r3, #0
 8000890:	d01e      	beq.n	80008d0 <_ZN7Command12AllocateDataEt+0x60>
        this->data = soar_malloc(dataSize);
 8000892:	887b      	ldrh	r3, [r7, #2]
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff ff8d 	bl	80007b4 <_Z11soar_mallocm>
 800089a:	4602      	mov	r2, r0
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	605a      	str	r2, [r3, #4]
        this->bShouldFreeData = true;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	2201      	movs	r2, #1
 80008a4:	729a      	strb	r2, [r3, #10]
        this->dataSize = dataSize;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	887a      	ldrh	r2, [r7, #2]
 80008aa:	811a      	strh	r2, [r3, #8]
        statAllocationCounter += 1;
 80008ac:	2101      	movs	r1, #1
 80008ae:	480b      	ldr	r0, [pc, #44]	; (80008dc <_ZN7Command12AllocateDataEt+0x6c>)
 80008b0:	f000 f86c 	bl	800098c <_ZNSt13__atomic_baseItEpLEt>

        //TODO: May want to print out whenever we have an imbalance in statAllocationCounter by more than ~5 or so.
        SOAR_ASSERT(statAllocationCounter < MAX_NUMBER_OF_COMMAND_ALLOCATIONS);
 80008b4:	4809      	ldr	r0, [pc, #36]	; (80008dc <_ZN7Command12AllocateDataEt+0x6c>)
 80008b6:	f000 f883 	bl	80009c0 <_ZNKSt13__atomic_baseItEcvtEv>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b63      	cmp	r3, #99	; 0x63
 80008be:	d905      	bls.n	80008cc <_ZN7Command12AllocateDataEt+0x5c>
 80008c0:	2300      	movs	r3, #0
 80008c2:	2262      	movs	r2, #98	; 0x62
 80008c4:	4906      	ldr	r1, [pc, #24]	; (80008e0 <_ZN7Command12AllocateDataEt+0x70>)
 80008c6:	2000      	movs	r0, #0
 80008c8:	f000 fcac 	bl	8001224 <_Z17soar_assert_debugbPKctS0_z>
        return true;
 80008cc:	2301      	movs	r3, #1
 80008ce:	e000      	b.n	80008d2 <_ZN7Command12AllocateDataEt+0x62>
    }
    return false;
 80008d0:	2300      	movs	r3, #0
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	2000009c 	.word	0x2000009c
 80008e0:	080095c8 	.word	0x080095c8

080008e4 <_ZN7Command17CopyDataToCommandEPht>:

/**
 * @brief Copies data from the source array into memory owned by Command and sets the internal data pointer to the new array
 */
bool Command::CopyDataToCommand(uint8_t* dataSrc, uint16_t size)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	60b9      	str	r1, [r7, #8]
 80008ee:	4613      	mov	r3, r2
 80008f0:	80fb      	strh	r3, [r7, #6]
	// If we successfully allocate, copy the data and return success
    if(this->AllocateData(size)
 80008f2:	88fb      	ldrh	r3, [r7, #6]
 80008f4:	4619      	mov	r1, r3
 80008f6:	68f8      	ldr	r0, [r7, #12]
 80008f8:	f7ff ffba 	bl	8000870 <_ZN7Command12AllocateDataEt>
 80008fc:	4603      	mov	r3, r0
		&& this->data != nullptr) {
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d005      	beq.n	800090e <_ZN7Command17CopyDataToCommandEPht+0x2a>
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <_ZN7Command17CopyDataToCommandEPht+0x2a>
 800090a:	2301      	movs	r3, #1
 800090c:	e000      	b.n	8000910 <_ZN7Command17CopyDataToCommandEPht+0x2c>
 800090e:	2300      	movs	r3, #0
    if(this->AllocateData(size)
 8000910:	2b00      	cmp	r3, #0
 8000912:	d008      	beq.n	8000926 <_ZN7Command17CopyDataToCommandEPht+0x42>
		memcpy(this->data, dataSrc, size);
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	88fa      	ldrh	r2, [r7, #6]
 800091a:	68b9      	ldr	r1, [r7, #8]
 800091c:	4618      	mov	r0, r3
 800091e:	f008 f839 	bl	8008994 <memcpy>
		return true;
 8000922:	2301      	movs	r3, #1
 8000924:	e000      	b.n	8000928 <_ZN7Command17CopyDataToCommandEPht+0x44>
	}

	return false;
 8000926:	2300      	movs	r3, #0
}
 8000928:	4618      	mov	r0, r3
 800092a:	3710      	adds	r7, #16
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}

08000930 <_ZN7Command5ResetEv>:

/**
 * @brief Resets command, equivalent of a destructor that must be called, counts allocations and deallocations, asserts an error if the allocation count is too high
*/
void Command::Reset()
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
    if(bShouldFreeData && data != nullptr) {
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	7a9b      	ldrb	r3, [r3, #10]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d00c      	beq.n	800095a <_ZN7Command5ResetEv+0x2a>
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d008      	beq.n	800095a <_ZN7Command5ResetEv+0x2a>
        soar_free(data);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff ff4b 	bl	80007e8 <_Z9soar_freePv>
        statAllocationCounter -= 1;
 8000952:	2101      	movs	r1, #1
 8000954:	4803      	ldr	r0, [pc, #12]	; (8000964 <_ZN7Command5ResetEv+0x34>)
 8000956:	f000 f84d 	bl	80009f4 <_ZNSt13__atomic_baseItEmIEt>
    }
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	2000009c 	.word	0x2000009c

08000968 <_ZNK7Command11GetDataSizeEv>:
/**
 * @brief Getter for Data size
 * @return data size if data is allocated, otherwise returns 0 
*/
uint16_t Command::GetDataSize() const
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
    if (data == nullptr)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d101      	bne.n	800097c <_ZNK7Command11GetDataSizeEv+0x14>
        return 0;
 8000978:	2300      	movs	r3, #0
 800097a:	e001      	b.n	8000980 <_ZNK7Command11GetDataSizeEv+0x18>
    return dataSize;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	891b      	ldrh	r3, [r3, #8]
}
 8000980:	4618      	mov	r0, r3
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <_ZNSt13__atomic_baseItEpLEt>:
      __int_type
      operator--() volatile noexcept
      { return __atomic_sub_fetch(&_M_i, 1, int(memory_order_seq_cst)); }

      __int_type
      operator+=(__int_type __i) noexcept
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	460b      	mov	r3, r1
 8000996:	807b      	strh	r3, [r7, #2]
      { return __atomic_add_fetch(&_M_i, __i, int(memory_order_seq_cst)); }
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	887a      	ldrh	r2, [r7, #2]
 800099c:	f3bf 8f5b 	dmb	ish
 80009a0:	e8d3 1f5f 	ldrexh	r1, [r3]
 80009a4:	4411      	add	r1, r2
 80009a6:	e8c3 1f50 	strexh	r0, r1, [r3]
 80009aa:	2800      	cmp	r0, #0
 80009ac:	d1f8      	bne.n	80009a0 <_ZNSt13__atomic_baseItEpLEt+0x14>
 80009ae:	f3bf 8f5b 	dmb	ish
 80009b2:	b28b      	uxth	r3, r1
 80009b4:	4618      	mov	r0, r3
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <_ZNKSt13__atomic_baseItEcvtEv>:
      operator __int_type() const noexcept
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	617b      	str	r3, [r7, #20]
 80009cc:	2305      	movs	r3, #5
 80009ce:	613b      	str	r3, [r7, #16]
      }

      _GLIBCXX_ALWAYS_INLINE __int_type
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	memory_order __b = __m & __memory_order_mask;
 80009d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80009d4:	6938      	ldr	r0, [r7, #16]
 80009d6:	f7ff fedf 	bl	8000798 <_ZStanSt12memory_orderSt23__memory_order_modifier>
 80009da:	60f8      	str	r0, [r7, #12]
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	f3bf 8f5b 	dmb	ish
 80009e2:	881b      	ldrh	r3, [r3, #0]
 80009e4:	f3bf 8f5b 	dmb	ish
 80009e8:	b29b      	uxth	r3, r3
 80009ea:	bf00      	nop
      { return load(); }
 80009ec:	4618      	mov	r0, r3
 80009ee:	3718      	adds	r7, #24
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <_ZNSt13__atomic_baseItEmIEt>:
      operator-=(__int_type __i) noexcept
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	460b      	mov	r3, r1
 80009fe:	807b      	strh	r3, [r7, #2]
      { return __atomic_sub_fetch(&_M_i, __i, int(memory_order_seq_cst)); }
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	887a      	ldrh	r2, [r7, #2]
 8000a04:	f3bf 8f5b 	dmb	ish
 8000a08:	e8d3 1f5f 	ldrexh	r1, [r3]
 8000a0c:	eba1 0102 	sub.w	r1, r1, r2
 8000a10:	e8c3 1f50 	strexh	r0, r1, [r3]
 8000a14:	2800      	cmp	r0, #0
 8000a16:	d1f7      	bne.n	8000a08 <_ZNSt13__atomic_baseItEmIEt+0x14>
 8000a18:	f3bf 8f5b 	dmb	ish
 8000a1c:	b28b      	uxth	r3, r1
 8000a1e:	4618      	mov	r0, r3
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
	...

08000a2c <_ZN5MutexC1Ev>:
#include "Utils.hpp"

/**
 * @brief Constructor for the Mutex class.
 */
Mutex::Mutex()
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
{
	rtSemaphoreHandle = xSemaphoreCreateMutex();
 8000a34:	2001      	movs	r0, #1
 8000a36:	f005 fdbe 	bl	80065b6 <xQueueCreateMutex>
 8000a3a:	4602      	mov	r2, r0
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	601a      	str	r2, [r3, #0]

	SOAR_ASSERT(rtSemaphoreHandle != NULL, "Semaphore creation failed.");
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d105      	bne.n	8000a54 <_ZN5MutexC1Ev+0x28>
 8000a48:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <_ZN5MutexC1Ev+0x34>)
 8000a4a:	2213      	movs	r2, #19
 8000a4c:	4905      	ldr	r1, [pc, #20]	; (8000a64 <_ZN5MutexC1Ev+0x38>)
 8000a4e:	2000      	movs	r0, #0
 8000a50:	f000 fbe8 	bl	8001224 <_Z17soar_assert_debugbPKctS0_z>
}
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4618      	mov	r0, r3
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	080095e8 	.word	0x080095e8
 8000a64:	08009604 	.word	0x08009604

08000a68 <_ZN5MutexD1Ev>:


/**
 * @brief Destructor for the Mutex class.
 */
Mutex::~Mutex()
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
{
	vSemaphoreDelete(rtSemaphoreHandle);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4618      	mov	r0, r3
 8000a76:	f006 f93d 	bl	8006cf4 <vQueueDelete>
}
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <_ZN5Mutex4LockEm>:
 * @brief This function is used to lock the Mutex.
 * @param timeout_ms The time to wait for the Mutex before it fails. If timeout_ms is not provided, the function will wait indefinitely.
 * @return True on success, false on failure.
*/
bool Mutex::Lock(uint32_t timeout_ms)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	6039      	str	r1, [r7, #0]
	return xSemaphoreTake(rtSemaphoreHandle, MS_TO_TICKS(timeout_ms)) == pdTRUE;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a98:	fb01 f303 	mul.w	r3, r1, r3
 8000a9c:	4908      	ldr	r1, [pc, #32]	; (8000ac0 <_ZN5Mutex4LockEm+0x3c>)
 8000a9e:	fba1 1303 	umull	r1, r3, r1, r3
 8000aa2:	099b      	lsrs	r3, r3, #6
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4610      	mov	r0, r2
 8000aa8:	f006 f818 	bl	8006adc <xQueueSemaphoreTake>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	bf0c      	ite	eq
 8000ab2:	2301      	moveq	r3, #1
 8000ab4:	2300      	movne	r3, #0
 8000ab6:	b2db      	uxtb	r3, r3
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	10624dd3 	.word	0x10624dd3

08000ac4 <_ZN5Mutex6UnlockEv>:
/**
 * @brief This function will attempt to unlock the mutex
 * @return True on success (mutex unlocked) false in failure (mutex was not unlocked)
*/
bool Mutex::Unlock()
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
	return xSemaphoreGive(rtSemaphoreHandle) == pdTRUE;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6818      	ldr	r0, [r3, #0]
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	f005 fd87 	bl	80065e8 <xQueueGenericSend>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	bf0c      	ite	eq
 8000ae0:	2301      	moveq	r3, #1
 8000ae2:	2300      	movne	r3, #0
 8000ae4:	b2db      	uxtb	r3, r3
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <_ZN5QueueC1Et>:

/**
 * @brief Constructor with depth for the Queue class
 * @param depth Queue depth
*/
Queue::Queue(uint16_t depth)
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b082      	sub	sp, #8
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
 8000af6:	460b      	mov	r3, r1
 8000af8:	807b      	strh	r3, [r7, #2]
{
	//Initialize RTOS Queue handle with given depth
	rtQueueHandle = xQueueCreate(depth, sizeof(Command));
 8000afa:	887b      	ldrh	r3, [r7, #2]
 8000afc:	2200      	movs	r2, #0
 8000afe:	210c      	movs	r1, #12
 8000b00:	4618      	mov	r0, r3
 8000b02:	f005 fce5 	bl	80064d0 <xQueueGenericCreate>
 8000b06:	4602      	mov	r2, r0
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	601a      	str	r2, [r3, #0]
	queueDepth = 0;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2200      	movs	r2, #0
 8000b10:	809a      	strh	r2, [r3, #4]
}
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4618      	mov	r0, r3
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <_ZN5Queue11SendFromISRER7Command>:
 * @brief Sends a command object to the queue, safe to call from ISR
 * @param command Command object reference to send
 * @return true on success, false on failure (queue full)
*/
bool Queue::SendFromISR(Command& command)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	6039      	str	r1, [r7, #0]
	//Note: There NULL param here could be used to wake a task right after after exiting the ISR
	if (xQueueSendFromISR(rtQueueHandle, &command, NULL) == pdPASS)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6818      	ldr	r0, [r3, #0]
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	6839      	ldr	r1, [r7, #0]
 8000b30:	f005 fe58 	bl	80067e4 <xQueueGenericSendFromISR>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	bf0c      	ite	eq
 8000b3a:	2301      	moveq	r3, #1
 8000b3c:	2300      	movne	r3, #0
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <_ZN5Queue11SendFromISRER7Command+0x2c>
		return true;
 8000b44:	2301      	movs	r3, #1
 8000b46:	e003      	b.n	8000b50 <_ZN5Queue11SendFromISRER7Command+0x34>

	command.Reset();
 8000b48:	6838      	ldr	r0, [r7, #0]
 8000b4a:	f7ff fef1 	bl	8000930 <_ZN7Command5ResetEv>

	return false;
 8000b4e:	2300      	movs	r3, #0
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <_ZN5Queue4SendER7Command>:
 * @brief Sends a command object to the queue (sends to back of queue in FIFO order)
 * @param command Command object reference to send
 * @return true on success, false on failure (queue full)
*/
bool Queue::Send(Command& command)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	6039      	str	r1, [r7, #0]
	if (xQueueSend(rtQueueHandle, &command, DEFAULT_QUEUE_SEND_WAIT_TICKS) == pdPASS)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6818      	ldr	r0, [r3, #0]
 8000b66:	2300      	movs	r3, #0
 8000b68:	220f      	movs	r2, #15
 8000b6a:	6839      	ldr	r1, [r7, #0]
 8000b6c:	f005 fd3c 	bl	80065e8 <xQueueGenericSend>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	bf0c      	ite	eq
 8000b76:	2301      	moveq	r3, #1
 8000b78:	2300      	movne	r3, #0
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <_ZN5Queue4SendER7Command+0x2c>
		return true;
 8000b80:	2301      	movs	r3, #1
 8000b82:	e006      	b.n	8000b92 <_ZN5Queue4SendER7Command+0x3a>

	//TODO: It may be possible to have this automatically set the command to not free data externally as we've "passed" control of the data over, which might let us use a destructor to free the data

	SOAR_PRINT("Could not send data to queue!");
 8000b84:	4805      	ldr	r0, [pc, #20]	; (8000b9c <_ZN5Queue4SendER7Command+0x44>)
 8000b86:	f000 faeb 	bl	8001160 <_Z5printPKcz>
	command.Reset();
 8000b8a:	6838      	ldr	r0, [r7, #0]
 8000b8c:	f7ff fed0 	bl	8000930 <_ZN7Command5ResetEv>

	return false;
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	0800964c 	.word	0x0800964c

08000ba0 <_ZN5Queue11ReceiveWaitER7Command>:
 * @brief Polls queue with specific timeout, blocks forever
 * @param cm Command object to copy received data into
 * @return TRUE if we received a command, FALSE otherwise (should rarely return false)
*/
bool Queue::ReceiveWait(Command& cm)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	6039      	str	r1, [r7, #0]
	if (xQueueReceive(rtQueueHandle, &cm, HAL_MAX_DELAY) == pdTRUE) {
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb2:	6839      	ldr	r1, [r7, #0]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f005 feb1 	bl	800691c <xQueueReceive>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	bf0c      	ite	eq
 8000bc0:	2301      	moveq	r3, #1
 8000bc2:	2300      	movne	r3, #0
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <_ZN5Queue11ReceiveWaitER7Command+0x2e>
		return true;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e000      	b.n	8000bd0 <_ZN5Queue11ReceiveWaitER7Command+0x30>
	}
	return false;
 8000bce:	2300      	movs	r3, #0
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <_ZN4TaskC1Et>:

/**
 * @brief Constructor with queue depth
 * @param depth Optionally 0, uses the given depth for the event queue
*/
Task::Task(uint16_t depth)
 8000bd8:	b590      	push	{r4, r7, lr}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	460b      	mov	r3, r1
 8000be2:	807b      	strh	r3, [r7, #2]
{
    if (depth == 0)
 8000be4:	887b      	ldrh	r3, [r7, #2]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d103      	bne.n	8000bf2 <_ZN4TaskC1Et+0x1a>
        qEvtQueue = nullptr;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2200      	movs	r2, #0
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	e00b      	b.n	8000c0a <_ZN4TaskC1Et+0x32>
    else
        qEvtQueue = new Queue(depth);
 8000bf2:	2008      	movs	r0, #8
 8000bf4:	f007 fe79 	bl	80088ea <_Znwj>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	461c      	mov	r4, r3
 8000bfc:	887b      	ldrh	r3, [r7, #2]
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4620      	mov	r0, r4
 8000c02:	f7ff ff74 	bl	8000aee <_ZN5QueueC1Et>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	605c      	str	r4, [r3, #4]
    rtTaskHandle = nullptr;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
}
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	4618      	mov	r0, r3
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd90      	pop	{r4, r7, pc}
	...

08000c1c <_ZN10FlightTask4InstEv>:
#include "Task.hpp"
#include "SystemDefines.hpp"
class FlightTask : public Task
{
public:
    static FlightTask& Inst() {
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
        static FlightTask inst;
 8000c20:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <_ZN10FlightTask4InstEv+0x48>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	f3bf 8f5b 	dmb	ish
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	bf0c      	ite	eq
 8000c32:	2301      	moveq	r3, #1
 8000c34:	2300      	movne	r3, #0
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d010      	beq.n	8000c5e <_ZN10FlightTask4InstEv+0x42>
 8000c3c:	4809      	ldr	r0, [pc, #36]	; (8000c64 <_ZN10FlightTask4InstEv+0x48>)
 8000c3e:	f007 fe45 	bl	80088cc <__cxa_guard_acquire>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	bf14      	ite	ne
 8000c48:	2301      	movne	r3, #1
 8000c4a:	2300      	moveq	r3, #0
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d005      	beq.n	8000c5e <_ZN10FlightTask4InstEv+0x42>
 8000c52:	4805      	ldr	r0, [pc, #20]	; (8000c68 <_ZN10FlightTask4InstEv+0x4c>)
 8000c54:	f000 f832 	bl	8000cbc <_ZN10FlightTaskC1Ev>
 8000c58:	4802      	ldr	r0, [pc, #8]	; (8000c64 <_ZN10FlightTask4InstEv+0x48>)
 8000c5a:	f007 fe43 	bl	80088e4 <__cxa_guard_release>
        return inst;
 8000c5e:	4b02      	ldr	r3, [pc, #8]	; (8000c68 <_ZN10FlightTask4InstEv+0x4c>)
    }
 8000c60:	4618      	mov	r0, r3
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	200000a8 	.word	0x200000a8
 8000c68:	200000a0 	.word	0x200000a0

08000c6c <_ZN10FlightTask7RunTaskEPv>:

    void InitTask();

protected:
    static void RunTask(void* pvParams) { FlightTask::Inst().Run(pvParams); } // Static Task Interface, passes control to the instance Run();
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	f7ff ffd2 	bl	8000c1c <_ZN10FlightTask4InstEv>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	6879      	ldr	r1, [r7, #4]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f000 f85d 	bl	8000d3c <_ZN10FlightTask3RunEPv>
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
	...

08000c8c <_ZN4GPIO4LED12OnEv>:

namespace GPIO
{
	namespace LED1
	{
		inline void On() { HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET); }
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	2201      	movs	r2, #1
 8000c92:	2140      	movs	r1, #64	; 0x40
 8000c94:	4802      	ldr	r0, [pc, #8]	; (8000ca0 <_ZN4GPIO4LED12OnEv+0x14>)
 8000c96:	f002 fccd 	bl	8003634 <HAL_GPIO_WritePin>
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	48000400 	.word	0x48000400

08000ca4 <_ZN4GPIO4LED13OffEv>:
		inline void Off() { HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET); }
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2140      	movs	r1, #64	; 0x40
 8000cac:	4802      	ldr	r0, [pc, #8]	; (8000cb8 <_ZN4GPIO4LED13OffEv+0x14>)
 8000cae:	f002 fcc1 	bl	8003634 <HAL_GPIO_WritePin>
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	48000400 	.word	0x48000400

08000cbc <_ZN10FlightTaskC1Ev>:
#include "SystemDefines.hpp"

/**
 * @brief Constructor for FlightTask
 */
FlightTask::FlightTask() : Task(FLIGHT_TASK_QUEUE_DEPTH_OBJS)
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	210a      	movs	r1, #10
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff ff85 	bl	8000bd8 <_ZN4TaskC1Et>
{
}
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <_ZN10FlightTask8InitTaskEv>:

/**
 * @brief Initialize the FlightTask
 */
void FlightTask::InitTask()
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af02      	add	r7, sp, #8
 8000cde:	6078      	str	r0, [r7, #4]
    // Make sure the task is not already initialized
    SOAR_ASSERT(rtTaskHandle == nullptr, "Cannot initialize flight task twice");
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d005      	beq.n	8000cf4 <_ZN10FlightTask8InitTaskEv+0x1c>
 8000ce8:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <_ZN10FlightTask8InitTaskEv+0x50>)
 8000cea:	2218      	movs	r2, #24
 8000cec:	490f      	ldr	r1, [pc, #60]	; (8000d2c <_ZN10FlightTask8InitTaskEv+0x54>)
 8000cee:	2000      	movs	r0, #0
 8000cf0:	f000 fa98 	bl	8001224 <_Z17soar_assert_debugbPKctS0_z>
    
    BaseType_t rtValue =
        xTaskCreate((TaskFunction_t)FlightTask::RunTask,
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	9301      	str	r3, [sp, #4]
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	9300      	str	r3, [sp, #0]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d02:	490b      	ldr	r1, [pc, #44]	; (8000d30 <_ZN10FlightTask8InitTaskEv+0x58>)
 8000d04:	480b      	ldr	r0, [pc, #44]	; (8000d34 <_ZN10FlightTask8InitTaskEv+0x5c>)
 8000d06:	f006 f9c8 	bl	800709a <xTaskCreate>
 8000d0a:	60f8      	str	r0, [r7, #12]
            (uint16_t)FLIGHT_TASK_STACK_DEPTH_WORDS,
            (void*)this,
            (UBaseType_t)FLIGHT_TASK_RTOS_PRIORITY,
            (TaskHandle_t*)&rtTaskHandle);

    SOAR_ASSERT(rtValue == pdPASS, "FlightTask::InitTask() - xTaskCreate() failed");
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d005      	beq.n	8000d1e <_ZN10FlightTask8InitTaskEv+0x46>
 8000d12:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <_ZN10FlightTask8InitTaskEv+0x60>)
 8000d14:	2222      	movs	r2, #34	; 0x22
 8000d16:	4905      	ldr	r1, [pc, #20]	; (8000d2c <_ZN10FlightTask8InitTaskEv+0x54>)
 8000d18:	2000      	movs	r0, #0
 8000d1a:	f000 fa83 	bl	8001224 <_Z17soar_assert_debugbPKctS0_z>
}
 8000d1e:	bf00      	nop
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	0800966c 	.word	0x0800966c
 8000d2c:	08009690 	.word	0x08009690
 8000d30:	080096bc 	.word	0x080096bc
 8000d34:	08000c6d 	.word	0x08000c6d
 8000d38:	080096c8 	.word	0x080096c8

08000d3c <_ZN10FlightTask3RunEPv>:
/**
 * @brief Instance Run loop for the Flight Task, runs on scheduler start as long as the task is initialized.
 * @param pvParams RTOS Passed void parameters, contains a pointer to the object instance, should not be used
 */
void FlightTask::Run(void * pvParams)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	6039      	str	r1, [r7, #0]
    uint32_t tempSecondCounter = 0; // TODO: Temporary counter, would normally be in HeartBeat task or HID Task, unless FlightTask is the HeartBeat task
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
    GPIO::LED1::Off();
 8000d4a:	f7ff ffab 	bl	8000ca4 <_ZN4GPIO4LED13OffEv>
        // Could consider a universal queue that directs and handles commands to specific tasks, and a task that handles the queue events and then calls the
        // Mappings between X command and P subscribers (tasks that are expecting it).

        // Since FlightTask is so critical to managing the system, it may make sense to make this a Async task that handles commands as they come in, and have these display commands be routed over to the DisplayTask
        // or maybe HID (Human Interface Device) task that handles both updating buzzer frequencies and LED states.
        GPIO::LED1::On();
 8000d4e:	f7ff ff9d 	bl	8000c8c <_ZN4GPIO4LED12OnEv>
        osDelay(500);
 8000d52:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d56:	f005 fa8b 	bl	8006270 <osDelay>
        GPIO::LED1::Off();
 8000d5a:	f7ff ffa3 	bl	8000ca4 <_ZN4GPIO4LED13OffEv>
        osDelay(500);
 8000d5e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d62:	f005 fa85 	bl	8006270 <osDelay>

        //Every cycle, print something out (for testing)
        SOAR_PRINT("FlightTask::Run() - [%d] Seconds\n", tempSecondCounter++);
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	1c5a      	adds	r2, r3, #1
 8000d6a:	60fa      	str	r2, [r7, #12]
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4802      	ldr	r0, [pc, #8]	; (8000d78 <_ZN10FlightTask3RunEPv+0x3c>)
 8000d70:	f000 f9f6 	bl	8001160 <_Z5printPKcz>
        GPIO::LED1::On();
 8000d74:	e7eb      	b.n	8000d4e <_ZN10FlightTask3RunEPv+0x12>
 8000d76:	bf00      	nop
 8000d78:	080096f8 	.word	0x080096f8

08000d7c <_ZN9DebugTask4InstEv>:

/* Class ------------------------------------------------------------------*/
class DebugTask : public Task
{
public:
	static DebugTask& Inst() {
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
		static DebugTask inst;
 8000d80:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <_ZN9DebugTask4InstEv+0x48>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	f3bf 8f5b 	dmb	ish
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	bf0c      	ite	eq
 8000d92:	2301      	moveq	r3, #1
 8000d94:	2300      	movne	r3, #0
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d010      	beq.n	8000dbe <_ZN9DebugTask4InstEv+0x42>
 8000d9c:	4809      	ldr	r0, [pc, #36]	; (8000dc4 <_ZN9DebugTask4InstEv+0x48>)
 8000d9e:	f007 fd95 	bl	80088cc <__cxa_guard_acquire>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	bf14      	ite	ne
 8000da8:	2301      	movne	r3, #1
 8000daa:	2300      	moveq	r3, #0
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d005      	beq.n	8000dbe <_ZN9DebugTask4InstEv+0x42>
 8000db2:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <_ZN9DebugTask4InstEv+0x4c>)
 8000db4:	f000 f830 	bl	8000e18 <_ZN9DebugTaskC1Ev>
 8000db8:	4802      	ldr	r0, [pc, #8]	; (8000dc4 <_ZN9DebugTask4InstEv+0x48>)
 8000dba:	f007 fd93 	bl	80088e4 <__cxa_guard_release>
		return inst;
 8000dbe:	4b02      	ldr	r3, [pc, #8]	; (8000dc8 <_ZN9DebugTask4InstEv+0x4c>)
	}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	200000c8 	.word	0x200000c8
 8000dc8:	200000ac 	.word	0x200000ac

08000dcc <_ZN9DebugTask7RunTaskEPv>:

	//Functions exposed to HAL callbacks
	void InterruptRxData();

protected:
	static void RunTask(void* pvParams) { DebugTask::Inst().Run(pvParams); } // Static Task Interface, passes control to the instance Run();
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	f7ff ffd2 	bl	8000d7c <_ZN9DebugTask4InstEv>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	6879      	ldr	r1, [r7, #4]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f000 f869 	bl	8000eb4 <_ZN9DebugTask3RunEPv>
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
	...

08000dec <HAL_UART_RxCpltCallback>:
 * @brief HAL Callback for DMA/Interrupt Complete
 *
 * TODO: This should eventually be in DMAController/main_avionics/UARTTask depending on how many tasks use DMA vs Interrupt vs Polling
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == SystemHandles::UART_Debug->Instance)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <HAL_UART_RxCpltCallback+0x28>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d105      	bne.n	8000e0c <HAL_UART_RxCpltCallback+0x20>
		DebugTask::Inst().InterruptRxData();
 8000e00:	f7ff ffbc 	bl	8000d7c <_ZN9DebugTask4InstEv>
 8000e04:	4603      	mov	r3, r0
 8000e06:	4618      	mov	r0, r3
 8000e08:	f000 f90c 	bl	8001024 <_ZN9DebugTask15InterruptRxDataEv>
}
 8000e0c:	bf00      	nop
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	200005ec 	.word	0x200005ec

08000e18 <_ZN9DebugTaskC1Ev>:

/* Functions -----------------------------------------------------------------*/
/**
 * @brief Constructor, sets all member variables
 */
DebugTask::DebugTask() : Task(TASK_DEBUG_QUEUE_DEPTH_OBJS)
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	210a      	movs	r1, #10
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff fed7 	bl	8000bd8 <_ZN4TaskC1Et>
{
	memset(debugBuffer, 0, sizeof(debugBuffer));
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	3308      	adds	r3, #8
 8000e2e:	2211      	movs	r2, #17
 8000e30:	2100      	movs	r1, #0
 8000e32:	4618      	mov	r0, r3
 8000e34:	f007 fdbc 	bl	80089b0 <memset>
	debugMsgIdx = 0;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	765a      	strb	r2, [r3, #25]
	isDebugMsgReady = false;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2200      	movs	r2, #0
 8000e42:	769a      	strb	r2, [r3, #26]
}
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4618      	mov	r0, r3
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <_ZN9DebugTask8InitTaskEv>:

/**
 * @brief Init task for RTOS
 */
void DebugTask::InitTask()
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af02      	add	r7, sp, #8
 8000e56:	6078      	str	r0, [r7, #4]
	// Make sure the task is not already initialized
	SOAR_ASSERT(rtTaskHandle == nullptr, "Cannot initialize Debug task twice");
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d005      	beq.n	8000e6c <_ZN9DebugTask8InitTaskEv+0x1c>
 8000e60:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <_ZN9DebugTask8InitTaskEv+0x50>)
 8000e62:	223a      	movs	r2, #58	; 0x3a
 8000e64:	490f      	ldr	r1, [pc, #60]	; (8000ea4 <_ZN9DebugTask8InitTaskEv+0x54>)
 8000e66:	2000      	movs	r0, #0
 8000e68:	f000 f9dc 	bl	8001224 <_Z17soar_assert_debugbPKctS0_z>

	// Start the task
	BaseType_t rtValue =
		xTaskCreate((TaskFunction_t)DebugTask::RunTask,
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	9301      	str	r3, [sp, #4]
 8000e70:	2302      	movs	r3, #2
 8000e72:	9300      	str	r3, [sp, #0]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e7a:	490b      	ldr	r1, [pc, #44]	; (8000ea8 <_ZN9DebugTask8InitTaskEv+0x58>)
 8000e7c:	480b      	ldr	r0, [pc, #44]	; (8000eac <_ZN9DebugTask8InitTaskEv+0x5c>)
 8000e7e:	f006 f90c 	bl	800709a <xTaskCreate>
 8000e82:	60f8      	str	r0, [r7, #12]
			(void*)this,
			(UBaseType_t)TASK_DEBUG_PRIORITY,
			(TaskHandle_t*)&rtTaskHandle);

	//Ensure creation succeded
	SOAR_ASSERT(rtValue == pdPASS, "DebugTask::InitTask - xTaskCreate() failed");
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d005      	beq.n	8000e96 <_ZN9DebugTask8InitTaskEv+0x46>
 8000e8a:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <_ZN9DebugTask8InitTaskEv+0x60>)
 8000e8c:	2246      	movs	r2, #70	; 0x46
 8000e8e:	4905      	ldr	r1, [pc, #20]	; (8000ea4 <_ZN9DebugTask8InitTaskEv+0x54>)
 8000e90:	2000      	movs	r0, #0
 8000e92:	f000 f9c7 	bl	8001224 <_Z17soar_assert_debugbPKctS0_z>
}
 8000e96:	bf00      	nop
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	0800971c 	.word	0x0800971c
 8000ea4:	08009740 	.word	0x08009740
 8000ea8:	08009768 	.word	0x08009768
 8000eac:	08000dcd 	.word	0x08000dcd
 8000eb0:	08009774 	.word	0x08009774

08000eb4 <_ZN9DebugTask3RunEPv>:
// TODO: Only run thread when appropriate GPIO pin pulled HIGH (or by define)
/**
 *	@brief Runcode for the DebugTask
 */
void DebugTask::Run(void * pvParams)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
	// Arm the interrupt
	ReceiveData();
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f000 f89e 	bl	8001000 <_ZN9DebugTask11ReceiveDataEv>

	while (1) {
		Command cm;
 8000ec4:	f107 030c 	add.w	r3, r7, #12
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff fc98 	bl	80007fe <_ZN7CommandC1Ev>

		//Wait forever for a command
		qEvtQueue->ReceiveWait(cm);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f107 020c 	add.w	r2, r7, #12
 8000ed6:	4611      	mov	r1, r2
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff fe61 	bl	8000ba0 <_ZN5Queue11ReceiveWaitER7Command>

		//Process the command
		if(cm.GetCommand() == DATA_COMMAND && cm.GetTaskCommand() == EVENT_DEBUG_RX_COMPLETE) {
 8000ede:	f107 030c 	add.w	r3, r7, #12
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff fb6a 	bl	80005bc <_ZNK7Command10GetCommandEv>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d109      	bne.n	8000f02 <_ZN9DebugTask3RunEPv+0x4e>
 8000eee:	f107 030c 	add.w	r3, r7, #12
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff fb6e 	bl	80005d4 <_ZNK7Command14GetTaskCommandEv>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d101      	bne.n	8000f02 <_ZN9DebugTask3RunEPv+0x4e>
 8000efe:	2301      	movs	r3, #1
 8000f00:	e000      	b.n	8000f04 <_ZN9DebugTask3RunEPv+0x50>
 8000f02:	2300      	movs	r3, #0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d005      	beq.n	8000f14 <_ZN9DebugTask3RunEPv+0x60>
			HandleDebugMessage((const char*)debugBuffer);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3308      	adds	r3, #8
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f000 f806 	bl	8000f20 <_ZN9DebugTask18HandleDebugMessageEPKc>
		}

		cm.Reset();
 8000f14:	f107 030c 	add.w	r3, r7, #12
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff fd09 	bl	8000930 <_ZN7Command5ResetEv>
	}
 8000f1e:	e7d1      	b.n	8000ec4 <_ZN9DebugTask3RunEPv+0x10>

08000f20 <_ZN9DebugTask18HandleDebugMessageEPKc>:
/**
 * @brief Handles debug messages, assumes msg is null terminated
 * @param msg Message to read, must be null termianted
 */
void DebugTask::HandleDebugMessage(const char* msg)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]
	//-- SYSTEM / CHAR COMMANDS -- (Must be last)
	if (strcmp(msg, "sysreset") == 0) {
 8000f2a:	4929      	ldr	r1, [pc, #164]	; (8000fd0 <_ZN9DebugTask18HandleDebugMessageEPKc+0xb0>)
 8000f2c:	6838      	ldr	r0, [r7, #0]
 8000f2e:	f7ff f94f 	bl	80001d0 <strcmp>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d106      	bne.n	8000f46 <_ZN9DebugTask18HandleDebugMessageEPKc+0x26>
		// Reset the system
		SOAR_ASSERT(false, "System reset requested");
 8000f38:	4b26      	ldr	r3, [pc, #152]	; (8000fd4 <_ZN9DebugTask18HandleDebugMessageEPKc+0xb4>)
 8000f3a:	226a      	movs	r2, #106	; 0x6a
 8000f3c:	4926      	ldr	r1, [pc, #152]	; (8000fd8 <_ZN9DebugTask18HandleDebugMessageEPKc+0xb8>)
 8000f3e:	2000      	movs	r0, #0
 8000f40:	f000 f970 	bl	8001224 <_Z17soar_assert_debugbPKctS0_z>
 8000f44:	e039      	b.n	8000fba <_ZN9DebugTask18HandleDebugMessageEPKc+0x9a>
	}
	else if (strcmp(msg, "sysinfo") == 0) {
 8000f46:	4925      	ldr	r1, [pc, #148]	; (8000fdc <_ZN9DebugTask18HandleDebugMessageEPKc+0xbc>)
 8000f48:	6838      	ldr	r0, [r7, #0]
 8000f4a:	f7ff f941 	bl	80001d0 <strcmp>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d120      	bne.n	8000f96 <_ZN9DebugTask18HandleDebugMessageEPKc+0x76>
		// Print message
		SOAR_PRINT("\n\t-- Avionics Core System Info --\n");
 8000f54:	4822      	ldr	r0, [pc, #136]	; (8000fe0 <_ZN9DebugTask18HandleDebugMessageEPKc+0xc0>)
 8000f56:	f000 f903 	bl	8001160 <_Z5printPKcz>
		SOAR_PRINT("Current System Heap Use: %d Bytes\n", xPortGetFreeHeapSize());
 8000f5a:	f007 fbe3 	bl	8008724 <xPortGetFreeHeapSize>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	4619      	mov	r1, r3
 8000f62:	4820      	ldr	r0, [pc, #128]	; (8000fe4 <_ZN9DebugTask18HandleDebugMessageEPKc+0xc4>)
 8000f64:	f000 f8fc 	bl	8001160 <_Z5printPKcz>
		SOAR_PRINT("Lowest Ever Heap Size\t: %d Bytes\n", xPortGetMinimumEverFreeHeapSize());
 8000f68:	f007 fbe8 	bl	800873c <xPortGetMinimumEverFreeHeapSize>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	4619      	mov	r1, r3
 8000f70:	481d      	ldr	r0, [pc, #116]	; (8000fe8 <_ZN9DebugTask18HandleDebugMessageEPKc+0xc8>)
 8000f72:	f000 f8f5 	bl	8001160 <_Z5printPKcz>
		SOAR_PRINT("Debug Task Runtime  \t: %d ms\n\n", TICKS_TO_MS(xTaskGetTickCount()));
 8000f76:	f006 fb25 	bl	80075c4 <xTaskGetTickCount>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f80:	fb02 f303 	mul.w	r3, r2, r3
 8000f84:	4a19      	ldr	r2, [pc, #100]	; (8000fec <_ZN9DebugTask18HandleDebugMessageEPKc+0xcc>)
 8000f86:	fba2 2303 	umull	r2, r3, r2, r3
 8000f8a:	099b      	lsrs	r3, r3, #6
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4818      	ldr	r0, [pc, #96]	; (8000ff0 <_ZN9DebugTask18HandleDebugMessageEPKc+0xd0>)
 8000f90:	f000 f8e6 	bl	8001160 <_Z5printPKcz>
 8000f94:	e011      	b.n	8000fba <_ZN9DebugTask18HandleDebugMessageEPKc+0x9a>
	}
	else if (strcmp(msg, "blinkled") == 0) {
 8000f96:	4917      	ldr	r1, [pc, #92]	; (8000ff4 <_ZN9DebugTask18HandleDebugMessageEPKc+0xd4>)
 8000f98:	6838      	ldr	r0, [r7, #0]
 8000f9a:	f7ff f919 	bl	80001d0 <strcmp>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d105      	bne.n	8000fb0 <_ZN9DebugTask18HandleDebugMessageEPKc+0x90>
		// Print message
		SOAR_PRINT("Debug 'LED blink' command requested\n");
 8000fa4:	4814      	ldr	r0, [pc, #80]	; (8000ff8 <_ZN9DebugTask18HandleDebugMessageEPKc+0xd8>)
 8000fa6:	f000 f8db 	bl	8001160 <_Z5printPKcz>
		GPIO::LED1::On();
 8000faa:	f7ff fe6f 	bl	8000c8c <_ZN4GPIO4LED12OnEv>
 8000fae:	e004      	b.n	8000fba <_ZN9DebugTask18HandleDebugMessageEPKc+0x9a>
	}
	else {
		// Single character command, or unknown command
		switch (msg[0]) {
		default:
			SOAR_PRINT("Debug, unknown command: %s\n", msg);
 8000fb0:	6839      	ldr	r1, [r7, #0]
 8000fb2:	4812      	ldr	r0, [pc, #72]	; (8000ffc <_ZN9DebugTask18HandleDebugMessageEPKc+0xdc>)
 8000fb4:	f000 f8d4 	bl	8001160 <_Z5printPKcz>
			break;
 8000fb8:	bf00      	nop
		}
	}

	//We've read the data, clear the buffer
	debugMsgIdx = 0;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	765a      	strb	r2, [r3, #25]
	isDebugMsgReady = false;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	769a      	strb	r2, [r3, #26]
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	080097a0 	.word	0x080097a0
 8000fd4:	080097ac 	.word	0x080097ac
 8000fd8:	08009740 	.word	0x08009740
 8000fdc:	080097c4 	.word	0x080097c4
 8000fe0:	080097cc 	.word	0x080097cc
 8000fe4:	080097f0 	.word	0x080097f0
 8000fe8:	08009814 	.word	0x08009814
 8000fec:	10624dd3 	.word	0x10624dd3
 8000ff0:	08009838 	.word	0x08009838
 8000ff4:	08009858 	.word	0x08009858
 8000ff8:	08009864 	.word	0x08009864
 8000ffc:	0800988c 	.word	0x0800988c

08001000 <_ZN9DebugTask11ReceiveDataEv>:

/**
 * @brief Receive data, currently receives by arming interrupt
 */
bool DebugTask::ReceiveData()
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(SystemHandles::UART_Debug, &debugRxChar, 1);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	331b      	adds	r3, #27
 800100c:	2201      	movs	r2, #1
 800100e:	4619      	mov	r1, r3
 8001010:	4803      	ldr	r0, [pc, #12]	; (8001020 <_ZN9DebugTask11ReceiveDataEv+0x20>)
 8001012:	f004 fa29 	bl	8005468 <HAL_UART_Receive_IT>
	return true;
 8001016:	2301      	movs	r3, #1
}
 8001018:	4618      	mov	r0, r3
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	200005ec 	.word	0x200005ec

08001024 <_ZN9DebugTask15InterruptRxDataEv>:
/**
 * @brief Receive data to the buffer
 * @return Whether the debugBuffer is ready or not
 */
void DebugTask::InterruptRxData()
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	// If we already have an unprocessed debug message, ignore this byte
	if (!isDebugMsgReady) {
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	7e9b      	ldrb	r3, [r3, #26]
 8001030:	f083 0301 	eor.w	r3, r3, #1
 8001034:	b2db      	uxtb	r3, r3
 8001036:	2b00      	cmp	r3, #0
 8001038:	d03f      	beq.n	80010ba <_ZN9DebugTask15InterruptRxDataEv+0x96>
		// Check byte for end of message - note if using termite you must turn on append CR
		if (debugRxChar == '\r' || debugMsgIdx == DEBUG_RX_BUFFER_SZ_BYTES) {
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	7edb      	ldrb	r3, [r3, #27]
 800103e:	2b0d      	cmp	r3, #13
 8001040:	d003      	beq.n	800104a <_ZN9DebugTask15InterruptRxDataEv+0x26>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	7e5b      	ldrb	r3, [r3, #25]
 8001046:	2b10      	cmp	r3, #16
 8001048:	d128      	bne.n	800109c <_ZN9DebugTask15InterruptRxDataEv+0x78>
			// Null terminate and process
			debugBuffer[debugMsgIdx++] = '\0';
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	7e5b      	ldrb	r3, [r3, #25]
 800104e:	1c5a      	adds	r2, r3, #1
 8001050:	b2d1      	uxtb	r1, r2
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	7651      	strb	r1, [r2, #25]
 8001056:	461a      	mov	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	4413      	add	r3, r2
 800105c:	2200      	movs	r2, #0
 800105e:	721a      	strb	r2, [r3, #8]
			isDebugMsgReady = true;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2201      	movs	r2, #1
 8001064:	769a      	strb	r2, [r3, #26]

			// Notify the debug task
			Command cm(DATA_COMMAND, EVENT_DEBUG_RX_COMPLETE);
 8001066:	f107 0308 	add.w	r3, r7, #8
 800106a:	2201      	movs	r2, #1
 800106c:	2102      	movs	r1, #2
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff fbdf 	bl	8000832 <_ZN7CommandC1E15GLOBAL_COMMANDSt>
			bool res = qEvtQueue->SendFromISR(cm);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f107 0208 	add.w	r2, r7, #8
 800107c:	4611      	mov	r1, r2
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff fd4c 	bl	8000b1c <_ZN5Queue11SendFromISRER7Command>
 8001084:	4603      	mov	r3, r0
 8001086:	75fb      	strb	r3, [r7, #23]

			// If we failed to send the event, we should reset the buffer, that way DebugTask doesn't stall
			if (res == false) {
 8001088:	7dfb      	ldrb	r3, [r7, #23]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d114      	bne.n	80010b8 <_ZN9DebugTask15InterruptRxDataEv+0x94>
				debugMsgIdx = 0;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2200      	movs	r2, #0
 8001092:	765a      	strb	r2, [r3, #25]
				isDebugMsgReady = false;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	769a      	strb	r2, [r3, #26]
			}
 800109a:	e00d      	b.n	80010b8 <_ZN9DebugTask15InterruptRxDataEv+0x94>
		}
		else {
			debugBuffer[debugMsgIdx++] = debugRxChar;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	7ed9      	ldrb	r1, [r3, #27]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	7e5b      	ldrb	r3, [r3, #25]
 80010a4:	1c5a      	adds	r2, r3, #1
 80010a6:	b2d0      	uxtb	r0, r2
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	7650      	strb	r0, [r2, #25]
 80010ac:	461a      	mov	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4413      	add	r3, r2
 80010b2:	460a      	mov	r2, r1
 80010b4:	721a      	strb	r2, [r3, #8]
 80010b6:	e000      	b.n	80010ba <_ZN9DebugTask15InterruptRxDataEv+0x96>
			}
 80010b8:	bf00      	nop
		}
	}

	//Re-arm the interrupt
	ReceiveData();
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff ffa0 	bl	8001000 <_ZN9DebugTask11ReceiveDataEv>
}
 80010c0:	bf00      	nop
 80010c2:	3718      	adds	r7, #24
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <_ZNK4Task13GetEventQueueEv>:
    Task(void);
    Task(uint16_t depth);

    void InitTask();

    Queue* GetEventQueue() const { return qEvtQueue; }
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	4618      	mov	r0, r3
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <_Z8run_mainv>:
 
/* Interface Functions ------------------------------------------------------------*/
/**
 * @brief Main function interface, called inside main.cpp before os initialization takes place.
*/
void run_main() {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
	// Init Tasks
	FlightTask::Inst().InitTask();
 80010e4:	f7ff fd9a 	bl	8000c1c <_ZN10FlightTask4InstEv>
 80010e8:	4603      	mov	r3, r0
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fdf4 	bl	8000cd8 <_ZN10FlightTask8InitTaskEv>
	UARTTask::Inst().InitTask();
 80010f0:	f7ff fa7c 	bl	80005ec <_ZN8UARTTask4InstEv>
 80010f4:	4603      	mov	r3, r0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff fabe 	bl	8000678 <_ZN8UARTTask8InitTaskEv>
	DebugTask::Inst().InitTask();
 80010fc:	f7ff fe3e 	bl	8000d7c <_ZN9DebugTask4InstEv>
 8001100:	4603      	mov	r3, r0
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff fea4 	bl	8000e50 <_ZN9DebugTask8InitTaskEv>

	// Print System Boot Info : Warning, don't queue more than 10 prints before scheduler starts
	SOAR_PRINT("\n-- AVIONICS CORE --\n");
 8001108:	480f      	ldr	r0, [pc, #60]	; (8001148 <_Z8run_mainv+0x68>)
 800110a:	f000 f829 	bl	8001160 <_Z5printPKcz>
	SOAR_PRINT("System Reset Reason: [TODO]\n"); //TODO: If we want a system reset reason we need to save it on flash
 800110e:	480f      	ldr	r0, [pc, #60]	; (800114c <_Z8run_mainv+0x6c>)
 8001110:	f000 f826 	bl	8001160 <_Z5printPKcz>
	SOAR_PRINT("Current System Heap Use: %d Bytes\n", xPortGetFreeHeapSize());
 8001114:	f007 fb06 	bl	8008724 <xPortGetFreeHeapSize>
 8001118:	4603      	mov	r3, r0
 800111a:	4619      	mov	r1, r3
 800111c:	480c      	ldr	r0, [pc, #48]	; (8001150 <_Z8run_mainv+0x70>)
 800111e:	f000 f81f 	bl	8001160 <_Z5printPKcz>
	SOAR_PRINT("Lowest Ever Heap Size: %d Bytes\n\n", xPortGetMinimumEverFreeHeapSize());
 8001122:	f007 fb0b 	bl	800873c <xPortGetMinimumEverFreeHeapSize>
 8001126:	4603      	mov	r3, r0
 8001128:	4619      	mov	r1, r3
 800112a:	480a      	ldr	r0, [pc, #40]	; (8001154 <_Z8run_mainv+0x74>)
 800112c:	f000 f818 	bl	8001160 <_Z5printPKcz>
	
	// Start the Scheduler
	// Guidelines:
	// - Be CAREFUL with race conditions after osKernelStart
	// - Recommended to not use new and delete after this point
    osKernelStart();
 8001130:	f005 f897 	bl	8006262 <osKernelStart>

	// Should never reach here
	SOAR_ASSERT(false, "osKernelStart() failed");
 8001134:	4b08      	ldr	r3, [pc, #32]	; (8001158 <_Z8run_mainv+0x78>)
 8001136:	2231      	movs	r2, #49	; 0x31
 8001138:	4908      	ldr	r1, [pc, #32]	; (800115c <_Z8run_mainv+0x7c>)
 800113a:	2000      	movs	r0, #0
 800113c:	f000 f872 	bl	8001224 <_Z17soar_assert_debugbPKctS0_z>

	while (1)
	{
		osDelay(100);
 8001140:	2064      	movs	r0, #100	; 0x64
 8001142:	f005 f895 	bl	8006270 <osDelay>
 8001146:	e7fb      	b.n	8001140 <_Z8run_mainv+0x60>
 8001148:	080098fc 	.word	0x080098fc
 800114c:	08009914 	.word	0x08009914
 8001150:	08009934 	.word	0x08009934
 8001154:	08009958 	.word	0x08009958
 8001158:	0800997c 	.word	0x0800997c
 800115c:	08009994 	.word	0x08009994

08001160 <_Z5printPKcz>:
* @brief Variadic print function, sends a command packet to the queue
* @param str String to print with printf style formatting
* @param ... Additional arguments to print if assertion fails, in same format as printf
*/
void print(const char* str, ...)
{
 8001160:	b40f      	push	{r0, r1, r2, r3}
 8001162:	b580      	push	{r7, lr}
 8001164:	b0b6      	sub	sp, #216	; 0xd8
 8001166:	af00      	add	r7, sp, #0
	//Try to take the VA list mutex
	if (Global::vaListMutex.Lock(DEBUG_TAKE_MAX_TIME_MS)) {
 8001168:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800116c:	482a      	ldr	r0, [pc, #168]	; (8001218 <_Z5printPKcz+0xb8>)
 800116e:	f7ff fc89 	bl	8000a84 <_ZN5Mutex4LockEm>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d042      	beq.n	80011fe <_Z5printPKcz+0x9e>
		// If we have a message, and can use VA list, extract the string into a new buffer, and null terminate it
		uint8_t str_buffer[DEBUG_PRINT_MAX_SIZE] = {};
 8001178:	2300      	movs	r3, #0
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	f107 0308 	add.w	r3, r7, #8
 8001180:	22bc      	movs	r2, #188	; 0xbc
 8001182:	2100      	movs	r1, #0
 8001184:	4618      	mov	r0, r3
 8001186:	f007 fc13 	bl	80089b0 <memset>
		va_list argument_list;
		va_start(argument_list, str);
 800118a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800118e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
		int16_t buflen = vsnprintf(reinterpret_cast<char*>(str_buffer), sizeof(str_buffer) - 1, str, argument_list);
 8001192:	1d38      	adds	r0, r7, #4
 8001194:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001198:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800119c:	21bf      	movs	r1, #191	; 0xbf
 800119e:	f007 fe0d 	bl	8008dbc <vsniprintf>
 80011a2:	4603      	mov	r3, r0
 80011a4:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
		va_end(argument_list);
		if (buflen > 0) {
 80011a8:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	dd06      	ble.n	80011be <_Z5printPKcz+0x5e>
			str_buffer[buflen] = '\0';
 80011b0:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 80011b4:	33d8      	adds	r3, #216	; 0xd8
 80011b6:	443b      	add	r3, r7
 80011b8:	2200      	movs	r2, #0
 80011ba:	f803 2cd4 	strb.w	r2, [r3, #-212]
		}

		// Release the VA List Mutex
		Global::vaListMutex.Unlock();
 80011be:	4816      	ldr	r0, [pc, #88]	; (8001218 <_Z5printPKcz+0xb8>)
 80011c0:	f7ff fc80 	bl	8000ac4 <_ZN5Mutex6UnlockEv>

		//Generate a command
		Command cmd(DATA_COMMAND, (uint16_t)UART_TASK_COMMAND_SEND_DEBUG); // Set the UART channel to send data on
 80011c4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80011c8:	2201      	movs	r2, #1
 80011ca:	2102      	movs	r1, #2
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff fb30 	bl	8000832 <_ZN7CommandC1E15GLOBAL_COMMANDSt>
		
		//Copy data into the command
		cmd.CopyDataToCommand(str_buffer, buflen);
 80011d2:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	; 0xd6
 80011d6:	1d39      	adds	r1, r7, #4
 80011d8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff fb81 	bl	80008e4 <_ZN7Command17CopyDataToCommandEPht>
			
		//Send this packet off to the UART Task
		UARTTask::Inst().GetEventQueue()->Send(cmd);
 80011e2:	f7ff fa03 	bl	80005ec <_ZN8UARTTask4InstEv>
 80011e6:	4603      	mov	r3, r0
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff ff6d 	bl	80010c8 <_ZNK4Task13GetEventQueueEv>
 80011ee:	4602      	mov	r2, r0
 80011f0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80011f4:	4619      	mov	r1, r3
 80011f6:	4610      	mov	r0, r2
 80011f8:	f7ff fcae 	bl	8000b58 <_ZN5Queue4SendER7Command>
	else
	{
		//TODO: Print out that we could not acquire the VA list mutex
		SOAR_ASSERT(false, "Could not acquire VA_LIST mutex");
	}
}
 80011fc:	e005      	b.n	800120a <_Z5printPKcz+0xaa>
		SOAR_ASSERT(false, "Could not acquire VA_LIST mutex");
 80011fe:	4b07      	ldr	r3, [pc, #28]	; (800121c <_Z5printPKcz+0xbc>)
 8001200:	2266      	movs	r2, #102	; 0x66
 8001202:	4907      	ldr	r1, [pc, #28]	; (8001220 <_Z5printPKcz+0xc0>)
 8001204:	2000      	movs	r0, #0
 8001206:	f000 f80d 	bl	8001224 <_Z17soar_assert_debugbPKctS0_z>
}
 800120a:	bf00      	nop
 800120c:	37d8      	adds	r7, #216	; 0xd8
 800120e:	46bd      	mov	sp, r7
 8001210:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001214:	b004      	add	sp, #16
 8001216:	4770      	bx	lr
 8001218:	200000cc 	.word	0x200000cc
 800121c:	080099d0 	.word	0x080099d0
 8001220:	08009994 	.word	0x08009994

08001224 <_Z17soar_assert_debugbPKctS0_z>:
 * @param file File that the assertion is in (__FILE__)
 * @param line Line number that the assertion is on (__LINE__)
 * @param str Optional message to print if assertion fails. Must be less than 192 characters AFTER formatting
 * @param ... Additional arguments to print if assertion fails, in same format as printf
 */
void soar_assert_debug(bool condition, const char* file, const uint16_t line, const char* str, ...) {
 8001224:	b408      	push	{r3}
 8001226:	b580      	push	{r7, lr}
 8001228:	b0d9      	sub	sp, #356	; 0x164
 800122a:	af02      	add	r7, sp, #8
 800122c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001230:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001234:	6019      	str	r1, [r3, #0]
 8001236:	4611      	mov	r1, r2
 8001238:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800123c:	f2a3 1351 	subw	r3, r3, #337	; 0x151
 8001240:	4602      	mov	r2, r0
 8001242:	701a      	strb	r2, [r3, #0]
 8001244:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001248:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800124c:	460a      	mov	r2, r1
 800124e:	801a      	strh	r2, [r3, #0]
	// If assertion succeeds, do nothing
	if (condition) {
 8001250:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001254:	f2a3 1351 	subw	r3, r3, #337	; 0x151
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b00      	cmp	r3, #0
 800125c:	f040 8092 	bne.w	8001384 <_Z17soar_assert_debugbPKctS0_z+0x160>
		return;
	}

	bool printMessage = false;
 8001260:	2300      	movs	r3, #0
 8001262:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157

	// NOTE: Be careful! If va_list funcs while RTOS is active ALL calls to any vsnprint functions MUST have a mutex lock/unlock
	// NOTE: https://nadler.com/embedded/newlibAndFreeRTOS.html

	// We have an assert fail, we try to take control of the Debug semaphore, and then suspend all other parts of the system
	if (Global::vaListMutex.Lock(ASSERT_TAKE_MAX_TIME_MS)) {
 8001266:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800126a:	484a      	ldr	r0, [pc, #296]	; (8001394 <_Z17soar_assert_debugbPKctS0_z+0x170>)
 800126c:	f7ff fc0a 	bl	8000a84 <_ZN5Mutex4LockEm>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d002      	beq.n	800127c <_Z17soar_assert_debugbPKctS0_z+0x58>
		// We have the mutex, we can now safely print the message
		printMessage = true;
 8001276:	2301      	movs	r3, #1
 8001278:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
	}
	
	vTaskSuspendAll();
 800127c:	f006 f8f8 	bl	8007470 <vTaskSuspendAll>

	//If we have the vaListMutex, we can safely use vsnprintf
	if (printMessage) {
 8001280:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8001284:	2b00      	cmp	r3, #0
 8001286:	d072      	beq.n	800136e <_Z17soar_assert_debugbPKctS0_z+0x14a>
		// Print out the assertion header through the supported interface, we don't have a UART task running, so we directly use HAL
		uint8_t header_buf[ASSERT_BUFFER_MAX_SIZE] = {};
 8001288:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800128c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	3304      	adds	r3, #4
 8001296:	229c      	movs	r2, #156	; 0x9c
 8001298:	2100      	movs	r1, #0
 800129a:	4618      	mov	r0, r3
 800129c:	f007 fb88 	bl	80089b0 <memset>
		int16_t res = snprintf(reinterpret_cast<char*>(header_buf), ASSERT_BUFFER_MAX_SIZE - 1, "\r\n\n-- ASSERTION FAILED --\r\nFile [%s] @ Line # [%d]\r\n", file, line);
 80012a0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80012a4:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80012a8:	881a      	ldrh	r2, [r3, #0]
 80012aa:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80012ae:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80012b2:	f107 000c 	add.w	r0, r7, #12
 80012b6:	9200      	str	r2, [sp, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a37      	ldr	r2, [pc, #220]	; (8001398 <_Z17soar_assert_debugbPKctS0_z+0x174>)
 80012bc:	219f      	movs	r1, #159	; 0x9f
 80012be:	f007 fd1d 	bl	8008cfc <sniprintf>
 80012c2:	4603      	mov	r3, r0
 80012c4:	f8a7 3154 	strh.w	r3, [r7, #340]	; 0x154
		if (res < 0) {
 80012c8:	f9b7 3154 	ldrsh.w	r3, [r7, #340]	; 0x154
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	da0a      	bge.n	80012e6 <_Z17soar_assert_debugbPKctS0_z+0xc2>
			// If we failed to generate the header, just format the line number
			snprintf(reinterpret_cast<char*>(header_buf), ASSERT_BUFFER_MAX_SIZE - 1, "\r\n\n-- ASSERTION FAILED --\r\nFile [PATH_TOO_LONG] @ Line # [%d]\r\n", line);
 80012d0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80012d4:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80012d8:	881b      	ldrh	r3, [r3, #0]
 80012da:	f107 000c 	add.w	r0, r7, #12
 80012de:	4a2f      	ldr	r2, [pc, #188]	; (800139c <_Z17soar_assert_debugbPKctS0_z+0x178>)
 80012e0:	219f      	movs	r1, #159	; 0x9f
 80012e2:	f007 fd0b 	bl	8008cfc <sniprintf>
		}

		// Output the header to the debug port
		HAL_UART_Transmit(DEFAULT_ASSERT_UART_HANDLE, header_buf, strlen(reinterpret_cast<char*>(header_buf)), ASSERT_SEND_MAX_TIME_MS);
 80012e6:	f107 030c 	add.w	r3, r7, #12
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7fe ff7a 	bl	80001e4 <strlen>
 80012f0:	4603      	mov	r3, r0
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	f107 010c 	add.w	r1, r7, #12
 80012f8:	23fa      	movs	r3, #250	; 0xfa
 80012fa:	4829      	ldr	r0, [pc, #164]	; (80013a0 <_Z17soar_assert_debugbPKctS0_z+0x17c>)
 80012fc:	f004 f820 	bl	8005340 <HAL_UART_Transmit>

		// If we have a message, and can use VA list, extract the string into a new buffer, and null terminate it
		if (printMessage && str != nullptr) {
 8001300:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8001304:	2b00      	cmp	r3, #0
 8001306:	d038      	beq.n	800137a <_Z17soar_assert_debugbPKctS0_z+0x156>
 8001308:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800130c:	2b00      	cmp	r3, #0
 800130e:	d034      	beq.n	800137a <_Z17soar_assert_debugbPKctS0_z+0x156>
			uint8_t str_buffer[ASSERT_BUFFER_MAX_SIZE] = {};
 8001310:	2300      	movs	r3, #0
 8001312:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001316:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800131a:	229c      	movs	r2, #156	; 0x9c
 800131c:	2100      	movs	r1, #0
 800131e:	4618      	mov	r0, r3
 8001320:	f007 fb46 	bl	80089b0 <memset>
			va_list argument_list;
			va_start(argument_list, str);
 8001324:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001328:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
			int16_t buflen = vsnprintf(reinterpret_cast<char*>(str_buffer), sizeof(str_buffer) - 1, str, argument_list);
 800132c:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8001330:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001334:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8001338:	219f      	movs	r1, #159	; 0x9f
 800133a:	f007 fd3f 	bl	8008dbc <vsniprintf>
 800133e:	4603      	mov	r3, r0
 8001340:	f8a7 3152 	strh.w	r3, [r7, #338]	; 0x152
			va_end(argument_list);
			if (buflen > 0) {
 8001344:	f9b7 3152 	ldrsh.w	r3, [r7, #338]	; 0x152
 8001348:	2b00      	cmp	r3, #0
 800134a:	dd16      	ble.n	800137a <_Z17soar_assert_debugbPKctS0_z+0x156>
				str_buffer[buflen] = '\0';
 800134c:	f9b7 3152 	ldrsh.w	r3, [r7, #338]	; 0x152
 8001350:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8001354:	443b      	add	r3, r7
 8001356:	2200      	movs	r2, #0
 8001358:	f803 2cac 	strb.w	r2, [r3, #-172]
				HAL_UART_Transmit(DEFAULT_ASSERT_UART_HANDLE, str_buffer, buflen, ASSERT_SEND_MAX_TIME_MS);
 800135c:	f8b7 2152 	ldrh.w	r2, [r7, #338]	; 0x152
 8001360:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 8001364:	23fa      	movs	r3, #250	; 0xfa
 8001366:	480e      	ldr	r0, [pc, #56]	; (80013a0 <_Z17soar_assert_debugbPKctS0_z+0x17c>)
 8001368:	f003 ffea 	bl	8005340 <HAL_UART_Transmit>
 800136c:	e005      	b.n	800137a <_Z17soar_assert_debugbPKctS0_z+0x156>
			}
		}
	}
	else {
		//TODO: Should manually print out the assertion header
		HAL_UART_Transmit(DEFAULT_ASSERT_UART_HANDLE, (uint8_t*)"-- ASSERTION FAILED --\r\nCould not acquire vaListMutex\r\n", 55, ASSERT_SEND_MAX_TIME_MS);
 800136e:	23fa      	movs	r3, #250	; 0xfa
 8001370:	2237      	movs	r2, #55	; 0x37
 8001372:	490c      	ldr	r1, [pc, #48]	; (80013a4 <_Z17soar_assert_debugbPKctS0_z+0x180>)
 8001374:	480a      	ldr	r0, [pc, #40]	; (80013a0 <_Z17soar_assert_debugbPKctS0_z+0x17c>)
 8001376:	f003 ffe3 	bl	8005340 <HAL_UART_Transmit>
	}

	HAL_NVIC_SystemReset();
 800137a:	f001 fef2 	bl	8003162 <HAL_NVIC_SystemReset>

	// We should not reach this code, but if we do, we should resume the scheduler
	xTaskResumeAll();
 800137e:	f006 f885 	bl	800748c <xTaskResumeAll>
 8001382:	e000      	b.n	8001386 <_Z17soar_assert_debugbPKctS0_z+0x162>
		return;
 8001384:	bf00      	nop
}
 8001386:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 800138a:	46bd      	mov	sp, r7
 800138c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001390:	b001      	add	sp, #4
 8001392:	4770      	bx	lr
 8001394:	200000cc 	.word	0x200000cc
 8001398:	080099f0 	.word	0x080099f0
 800139c:	08009a28 	.word	0x08009a28
 80013a0:	200005ec 	.word	0x200005ec
 80013a4:	08009a68 	.word	0x08009a68

080013a8 <_Z41__static_initialization_and_destruction_0ii>:
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d107      	bne.n	80013c8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013be:	4293      	cmp	r3, r2
 80013c0:	d102      	bne.n	80013c8 <_Z41__static_initialization_and_destruction_0ii+0x20>
Mutex Global::vaListMutex;
 80013c2:	4809      	ldr	r0, [pc, #36]	; (80013e8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80013c4:	f7ff fb32 	bl	8000a2c <_ZN5MutexC1Ev>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d107      	bne.n	80013de <_Z41__static_initialization_and_destruction_0ii+0x36>
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d102      	bne.n	80013de <_Z41__static_initialization_and_destruction_0ii+0x36>
 80013d8:	4803      	ldr	r0, [pc, #12]	; (80013e8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80013da:	f7ff fb45 	bl	8000a68 <_ZN5MutexD1Ev>
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	200000cc 	.word	0x200000cc

080013ec <_GLOBAL__sub_I__ZN6Global11vaListMutexE>:
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80013f4:	2001      	movs	r0, #1
 80013f6:	f7ff ffd7 	bl	80013a8 <_Z41__static_initialization_and_destruction_0ii>
 80013fa:	bd80      	pop	{r7, pc}

080013fc <_GLOBAL__sub_D__ZN6Global11vaListMutexE>:
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
 8001400:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001404:	2000      	movs	r0, #0
 8001406:	f7ff ffcf 	bl	80013a8 <_Z41__static_initialization_and_destruction_0ii>
 800140a:	bd80      	pop	{r7, pc}

0800140c <run_interface>:

#include "main_avionics.hpp"

extern "C" {
    void run_interface()
    {
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
        run_main();
 8001410:	f7ff fe66 	bl	80010e0 <_Z8run_mainv>
    }
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}

08001418 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	4a07      	ldr	r2, [pc, #28]	; (8001444 <vApplicationGetIdleTaskMemory+0x2c>)
 8001428:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	4a06      	ldr	r2, [pc, #24]	; (8001448 <vApplicationGetIdleTaskMemory+0x30>)
 800142e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2280      	movs	r2, #128	; 0x80
 8001434:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001436:	bf00      	nop
 8001438:	3714      	adds	r7, #20
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	200000d0 	.word	0x200000d0
 8001448:	20000184 	.word	0x20000184

0800144c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001450:	f000 fea1 	bl	8002196 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001454:	f000 f817 	bl	8001486 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001458:	f000 fa1e 	bl	8001898 <MX_GPIO_Init>
  MX_ADC1_Init();
 800145c:	f000 f85a 	bl	8001514 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001460:	f000 f8de 	bl	8001620 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8001464:	f000 f91a 	bl	800169c <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 8001468:	f000 f946 	bl	80016f8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800146c:	f000 f974 	bl	8001758 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001470:	f000 f9a2 	bl	80017b8 <MX_USART3_UART_Init>
  MX_SPI2_Init();
 8001474:	f000 f9d2 	bl	800181c <MX_SPI2_Init>
  MX_CRC_Init();
 8001478:	f000 f8b0 	bl	80015dc <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  run_interface();
 800147c:	f7ff ffc6 	bl	800140c <run_interface>
 8001480:	2300      	movs	r3, #0
    /* USER CODE BEGIN 3 */
  }

#endif
  /* USER CODE END 3 */
}
 8001482:	4618      	mov	r0, r3
 8001484:	bd80      	pop	{r7, pc}

08001486 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b096      	sub	sp, #88	; 0x58
 800148a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	2244      	movs	r2, #68	; 0x44
 8001492:	2100      	movs	r1, #0
 8001494:	4618      	mov	r0, r3
 8001496:	f007 fa8b 	bl	80089b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800149a:	463b      	mov	r3, r7
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80014a8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80014ac:	f002 fa0e 	bl	80038cc <HAL_PWREx_ControlVoltageScaling>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <SystemClock_Config+0x34>
  {
    Error_Handler();
 80014b6:	f000 fa93 	bl	80019e0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80014ba:	2310      	movs	r3, #16
 80014bc:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80014be:	2301      	movs	r3, #1
 80014c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80014c6:	2360      	movs	r3, #96	; 0x60
 80014c8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014ca:	2300      	movs	r3, #0
 80014cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ce:	f107 0314 	add.w	r3, r7, #20
 80014d2:	4618      	mov	r0, r3
 80014d4:	f002 fa50 	bl	8003978 <HAL_RCC_OscConfig>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80014de:	f000 fa7f 	bl	80019e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014e2:	230f      	movs	r3, #15
 80014e4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80014e6:	2300      	movs	r3, #0
 80014e8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014ea:	2300      	movs	r3, #0
 80014ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014f2:	2300      	movs	r3, #0
 80014f4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014f6:	463b      	mov	r3, r7
 80014f8:	2100      	movs	r1, #0
 80014fa:	4618      	mov	r0, r3
 80014fc:	f002 fe50 	bl	80041a0 <HAL_RCC_ClockConfig>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001506:	f000 fa6b 	bl	80019e0 <Error_Handler>
  }
}
 800150a:	bf00      	nop
 800150c:	3758      	adds	r7, #88	; 0x58
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
	...

08001514 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800151a:	463b      	mov	r3, r7
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]
 8001528:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800152a:	4b29      	ldr	r3, [pc, #164]	; (80015d0 <MX_ADC1_Init+0xbc>)
 800152c:	4a29      	ldr	r2, [pc, #164]	; (80015d4 <MX_ADC1_Init+0xc0>)
 800152e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001530:	4b27      	ldr	r3, [pc, #156]	; (80015d0 <MX_ADC1_Init+0xbc>)
 8001532:	2200      	movs	r2, #0
 8001534:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001536:	4b26      	ldr	r3, [pc, #152]	; (80015d0 <MX_ADC1_Init+0xbc>)
 8001538:	2200      	movs	r2, #0
 800153a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800153c:	4b24      	ldr	r3, [pc, #144]	; (80015d0 <MX_ADC1_Init+0xbc>)
 800153e:	2200      	movs	r2, #0
 8001540:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001542:	4b23      	ldr	r3, [pc, #140]	; (80015d0 <MX_ADC1_Init+0xbc>)
 8001544:	2200      	movs	r2, #0
 8001546:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001548:	4b21      	ldr	r3, [pc, #132]	; (80015d0 <MX_ADC1_Init+0xbc>)
 800154a:	2204      	movs	r2, #4
 800154c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800154e:	4b20      	ldr	r3, [pc, #128]	; (80015d0 <MX_ADC1_Init+0xbc>)
 8001550:	2200      	movs	r2, #0
 8001552:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001554:	4b1e      	ldr	r3, [pc, #120]	; (80015d0 <MX_ADC1_Init+0xbc>)
 8001556:	2200      	movs	r2, #0
 8001558:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800155a:	4b1d      	ldr	r3, [pc, #116]	; (80015d0 <MX_ADC1_Init+0xbc>)
 800155c:	2201      	movs	r2, #1
 800155e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001560:	4b1b      	ldr	r3, [pc, #108]	; (80015d0 <MX_ADC1_Init+0xbc>)
 8001562:	2200      	movs	r2, #0
 8001564:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001568:	4b19      	ldr	r3, [pc, #100]	; (80015d0 <MX_ADC1_Init+0xbc>)
 800156a:	2200      	movs	r2, #0
 800156c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800156e:	4b18      	ldr	r3, [pc, #96]	; (80015d0 <MX_ADC1_Init+0xbc>)
 8001570:	2200      	movs	r2, #0
 8001572:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001574:	4b16      	ldr	r3, [pc, #88]	; (80015d0 <MX_ADC1_Init+0xbc>)
 8001576:	2200      	movs	r2, #0
 8001578:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800157c:	4b14      	ldr	r3, [pc, #80]	; (80015d0 <MX_ADC1_Init+0xbc>)
 800157e:	2200      	movs	r2, #0
 8001580:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001582:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <MX_ADC1_Init+0xbc>)
 8001584:	2200      	movs	r2, #0
 8001586:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800158a:	4811      	ldr	r0, [pc, #68]	; (80015d0 <MX_ADC1_Init+0xbc>)
 800158c:	f000 ffc8 	bl	8002520 <HAL_ADC_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001596:	f000 fa23 	bl	80019e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800159a:	4b0f      	ldr	r3, [pc, #60]	; (80015d8 <MX_ADC1_Init+0xc4>)
 800159c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800159e:	2306      	movs	r3, #6
 80015a0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80015a2:	2300      	movs	r3, #0
 80015a4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80015a6:	237f      	movs	r3, #127	; 0x7f
 80015a8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015aa:	2304      	movs	r3, #4
 80015ac:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015b2:	463b      	mov	r3, r7
 80015b4:	4619      	mov	r1, r3
 80015b6:	4806      	ldr	r0, [pc, #24]	; (80015d0 <MX_ADC1_Init+0xbc>)
 80015b8:	f001 f8fa 	bl	80027b0 <HAL_ADC_ConfigChannel>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80015c2:	f000 fa0d 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015c6:	bf00      	nop
 80015c8:	3718      	adds	r7, #24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000384 	.word	0x20000384
 80015d4:	50040000 	.word	0x50040000
 80015d8:	04300002 	.word	0x04300002

080015dc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80015e0:	4b0d      	ldr	r3, [pc, #52]	; (8001618 <MX_CRC_Init+0x3c>)
 80015e2:	4a0e      	ldr	r2, [pc, #56]	; (800161c <MX_CRC_Init+0x40>)
 80015e4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80015e6:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <MX_CRC_Init+0x3c>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80015ec:	4b0a      	ldr	r3, [pc, #40]	; (8001618 <MX_CRC_Init+0x3c>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80015f2:	4b09      	ldr	r3, [pc, #36]	; (8001618 <MX_CRC_Init+0x3c>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80015f8:	4b07      	ldr	r3, [pc, #28]	; (8001618 <MX_CRC_Init+0x3c>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80015fe:	4b06      	ldr	r3, [pc, #24]	; (8001618 <MX_CRC_Init+0x3c>)
 8001600:	2201      	movs	r2, #1
 8001602:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001604:	4804      	ldr	r0, [pc, #16]	; (8001618 <MX_CRC_Init+0x3c>)
 8001606:	f001 fdb1 	bl	800316c <HAL_CRC_Init>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001610:	f000 f9e6 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001614:	bf00      	nop
 8001616:	bd80      	pop	{r7, pc}
 8001618:	200003e8 	.word	0x200003e8
 800161c:	40023000 	.word	0x40023000

08001620 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001624:	4b1b      	ldr	r3, [pc, #108]	; (8001694 <MX_I2C1_Init+0x74>)
 8001626:	4a1c      	ldr	r2, [pc, #112]	; (8001698 <MX_I2C1_Init+0x78>)
 8001628:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 800162a:	4b1a      	ldr	r3, [pc, #104]	; (8001694 <MX_I2C1_Init+0x74>)
 800162c:	f640 6214 	movw	r2, #3604	; 0xe14
 8001630:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001632:	4b18      	ldr	r3, [pc, #96]	; (8001694 <MX_I2C1_Init+0x74>)
 8001634:	2200      	movs	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001638:	4b16      	ldr	r3, [pc, #88]	; (8001694 <MX_I2C1_Init+0x74>)
 800163a:	2201      	movs	r2, #1
 800163c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800163e:	4b15      	ldr	r3, [pc, #84]	; (8001694 <MX_I2C1_Init+0x74>)
 8001640:	2200      	movs	r2, #0
 8001642:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001644:	4b13      	ldr	r3, [pc, #76]	; (8001694 <MX_I2C1_Init+0x74>)
 8001646:	2200      	movs	r2, #0
 8001648:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800164a:	4b12      	ldr	r3, [pc, #72]	; (8001694 <MX_I2C1_Init+0x74>)
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001650:	4b10      	ldr	r3, [pc, #64]	; (8001694 <MX_I2C1_Init+0x74>)
 8001652:	2200      	movs	r2, #0
 8001654:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001656:	4b0f      	ldr	r3, [pc, #60]	; (8001694 <MX_I2C1_Init+0x74>)
 8001658:	2200      	movs	r2, #0
 800165a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800165c:	480d      	ldr	r0, [pc, #52]	; (8001694 <MX_I2C1_Init+0x74>)
 800165e:	f002 f801 	bl	8003664 <HAL_I2C_Init>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001668:	f000 f9ba 	bl	80019e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800166c:	2100      	movs	r1, #0
 800166e:	4809      	ldr	r0, [pc, #36]	; (8001694 <MX_I2C1_Init+0x74>)
 8001670:	f002 f887 	bl	8003782 <HAL_I2CEx_ConfigAnalogFilter>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800167a:	f000 f9b1 	bl	80019e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800167e:	2100      	movs	r1, #0
 8001680:	4804      	ldr	r0, [pc, #16]	; (8001694 <MX_I2C1_Init+0x74>)
 8001682:	f002 f8c9 	bl	8003818 <HAL_I2CEx_ConfigDigitalFilter>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800168c:	f000 f9a8 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001690:	bf00      	nop
 8001692:	bd80      	pop	{r7, pc}
 8001694:	2000040c 	.word	0x2000040c
 8001698:	40005400 	.word	0x40005400

0800169c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80016a0:	4b12      	ldr	r3, [pc, #72]	; (80016ec <MX_LPUART1_UART_Init+0x50>)
 80016a2:	4a13      	ldr	r2, [pc, #76]	; (80016f0 <MX_LPUART1_UART_Init+0x54>)
 80016a4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80016a6:	4b11      	ldr	r3, [pc, #68]	; (80016ec <MX_LPUART1_UART_Init+0x50>)
 80016a8:	4a12      	ldr	r2, [pc, #72]	; (80016f4 <MX_LPUART1_UART_Init+0x58>)
 80016aa:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 80016ac:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <MX_LPUART1_UART_Init+0x50>)
 80016ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016b2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80016b4:	4b0d      	ldr	r3, [pc, #52]	; (80016ec <MX_LPUART1_UART_Init+0x50>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80016ba:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <MX_LPUART1_UART_Init+0x50>)
 80016bc:	2200      	movs	r2, #0
 80016be:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80016c0:	4b0a      	ldr	r3, [pc, #40]	; (80016ec <MX_LPUART1_UART_Init+0x50>)
 80016c2:	220c      	movs	r2, #12
 80016c4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016c6:	4b09      	ldr	r3, [pc, #36]	; (80016ec <MX_LPUART1_UART_Init+0x50>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016cc:	4b07      	ldr	r3, [pc, #28]	; (80016ec <MX_LPUART1_UART_Init+0x50>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016d2:	4b06      	ldr	r3, [pc, #24]	; (80016ec <MX_LPUART1_UART_Init+0x50>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80016d8:	4804      	ldr	r0, [pc, #16]	; (80016ec <MX_LPUART1_UART_Init+0x50>)
 80016da:	f003 fde3 	bl	80052a4 <HAL_UART_Init>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80016e4:	f000 f97c 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80016e8:	bf00      	nop
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20000460 	.word	0x20000460
 80016f0:	40008000 	.word	0x40008000
 80016f4:	00033324 	.word	0x00033324

080016f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016fc:	4b14      	ldr	r3, [pc, #80]	; (8001750 <MX_USART1_UART_Init+0x58>)
 80016fe:	4a15      	ldr	r2, [pc, #84]	; (8001754 <MX_USART1_UART_Init+0x5c>)
 8001700:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001702:	4b13      	ldr	r3, [pc, #76]	; (8001750 <MX_USART1_UART_Init+0x58>)
 8001704:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001708:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800170a:	4b11      	ldr	r3, [pc, #68]	; (8001750 <MX_USART1_UART_Init+0x58>)
 800170c:	2200      	movs	r2, #0
 800170e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001710:	4b0f      	ldr	r3, [pc, #60]	; (8001750 <MX_USART1_UART_Init+0x58>)
 8001712:	2200      	movs	r2, #0
 8001714:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001716:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <MX_USART1_UART_Init+0x58>)
 8001718:	2200      	movs	r2, #0
 800171a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800171c:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <MX_USART1_UART_Init+0x58>)
 800171e:	220c      	movs	r2, #12
 8001720:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001722:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <MX_USART1_UART_Init+0x58>)
 8001724:	2200      	movs	r2, #0
 8001726:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001728:	4b09      	ldr	r3, [pc, #36]	; (8001750 <MX_USART1_UART_Init+0x58>)
 800172a:	2200      	movs	r2, #0
 800172c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800172e:	4b08      	ldr	r3, [pc, #32]	; (8001750 <MX_USART1_UART_Init+0x58>)
 8001730:	2200      	movs	r2, #0
 8001732:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001734:	4b06      	ldr	r3, [pc, #24]	; (8001750 <MX_USART1_UART_Init+0x58>)
 8001736:	2200      	movs	r2, #0
 8001738:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800173a:	4805      	ldr	r0, [pc, #20]	; (8001750 <MX_USART1_UART_Init+0x58>)
 800173c:	f003 fdb2 	bl	80052a4 <HAL_UART_Init>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001746:	f000 f94b 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	200004e4 	.word	0x200004e4
 8001754:	40013800 	.word	0x40013800

08001758 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800175c:	4b14      	ldr	r3, [pc, #80]	; (80017b0 <MX_USART2_UART_Init+0x58>)
 800175e:	4a15      	ldr	r2, [pc, #84]	; (80017b4 <MX_USART2_UART_Init+0x5c>)
 8001760:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001762:	4b13      	ldr	r3, [pc, #76]	; (80017b0 <MX_USART2_UART_Init+0x58>)
 8001764:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001768:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800176a:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <MX_USART2_UART_Init+0x58>)
 800176c:	2200      	movs	r2, #0
 800176e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001770:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <MX_USART2_UART_Init+0x58>)
 8001772:	2200      	movs	r2, #0
 8001774:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001776:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <MX_USART2_UART_Init+0x58>)
 8001778:	2200      	movs	r2, #0
 800177a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800177c:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <MX_USART2_UART_Init+0x58>)
 800177e:	220c      	movs	r2, #12
 8001780:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001782:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <MX_USART2_UART_Init+0x58>)
 8001784:	2200      	movs	r2, #0
 8001786:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001788:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <MX_USART2_UART_Init+0x58>)
 800178a:	2200      	movs	r2, #0
 800178c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800178e:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <MX_USART2_UART_Init+0x58>)
 8001790:	2200      	movs	r2, #0
 8001792:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <MX_USART2_UART_Init+0x58>)
 8001796:	2200      	movs	r2, #0
 8001798:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800179a:	4805      	ldr	r0, [pc, #20]	; (80017b0 <MX_USART2_UART_Init+0x58>)
 800179c:	f003 fd82 	bl	80052a4 <HAL_UART_Init>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80017a6:	f000 f91b 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000568 	.word	0x20000568
 80017b4:	40004400 	.word	0x40004400

080017b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017bc:	4b15      	ldr	r3, [pc, #84]	; (8001814 <MX_USART3_UART_Init+0x5c>)
 80017be:	4a16      	ldr	r2, [pc, #88]	; (8001818 <MX_USART3_UART_Init+0x60>)
 80017c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80017c2:	4b14      	ldr	r3, [pc, #80]	; (8001814 <MX_USART3_UART_Init+0x5c>)
 80017c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017ca:	4b12      	ldr	r3, [pc, #72]	; (8001814 <MX_USART3_UART_Init+0x5c>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017d0:	4b10      	ldr	r3, [pc, #64]	; (8001814 <MX_USART3_UART_Init+0x5c>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017d6:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <MX_USART3_UART_Init+0x5c>)
 80017d8:	2200      	movs	r2, #0
 80017da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017dc:	4b0d      	ldr	r3, [pc, #52]	; (8001814 <MX_USART3_UART_Init+0x5c>)
 80017de:	220c      	movs	r2, #12
 80017e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017e2:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <MX_USART3_UART_Init+0x5c>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017e8:	4b0a      	ldr	r3, [pc, #40]	; (8001814 <MX_USART3_UART_Init+0x5c>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017ee:	4b09      	ldr	r3, [pc, #36]	; (8001814 <MX_USART3_UART_Init+0x5c>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017f4:	4b07      	ldr	r3, [pc, #28]	; (8001814 <MX_USART3_UART_Init+0x5c>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RS485Ex_Init(&huart3, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80017fa:	2300      	movs	r3, #0
 80017fc:	2200      	movs	r2, #0
 80017fe:	2100      	movs	r1, #0
 8001800:	4804      	ldr	r0, [pc, #16]	; (8001814 <MX_USART3_UART_Init+0x5c>)
 8001802:	f004 fcc7 	bl	8006194 <HAL_RS485Ex_Init>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800180c:	f000 f8e8 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001810:	bf00      	nop
 8001812:	bd80      	pop	{r7, pc}
 8001814:	200005ec 	.word	0x200005ec
 8001818:	40004800 	.word	0x40004800

0800181c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001820:	4b1b      	ldr	r3, [pc, #108]	; (8001890 <MX_SPI2_Init+0x74>)
 8001822:	4a1c      	ldr	r2, [pc, #112]	; (8001894 <MX_SPI2_Init+0x78>)
 8001824:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001826:	4b1a      	ldr	r3, [pc, #104]	; (8001890 <MX_SPI2_Init+0x74>)
 8001828:	f44f 7282 	mov.w	r2, #260	; 0x104
 800182c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800182e:	4b18      	ldr	r3, [pc, #96]	; (8001890 <MX_SPI2_Init+0x74>)
 8001830:	2200      	movs	r2, #0
 8001832:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001834:	4b16      	ldr	r3, [pc, #88]	; (8001890 <MX_SPI2_Init+0x74>)
 8001836:	f44f 7240 	mov.w	r2, #768	; 0x300
 800183a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800183c:	4b14      	ldr	r3, [pc, #80]	; (8001890 <MX_SPI2_Init+0x74>)
 800183e:	2200      	movs	r2, #0
 8001840:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001842:	4b13      	ldr	r3, [pc, #76]	; (8001890 <MX_SPI2_Init+0x74>)
 8001844:	2200      	movs	r2, #0
 8001846:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001848:	4b11      	ldr	r3, [pc, #68]	; (8001890 <MX_SPI2_Init+0x74>)
 800184a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800184e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001850:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <MX_SPI2_Init+0x74>)
 8001852:	2200      	movs	r2, #0
 8001854:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001856:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <MX_SPI2_Init+0x74>)
 8001858:	2200      	movs	r2, #0
 800185a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800185c:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <MX_SPI2_Init+0x74>)
 800185e:	2200      	movs	r2, #0
 8001860:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001862:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <MX_SPI2_Init+0x74>)
 8001864:	2200      	movs	r2, #0
 8001866:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001868:	4b09      	ldr	r3, [pc, #36]	; (8001890 <MX_SPI2_Init+0x74>)
 800186a:	2207      	movs	r2, #7
 800186c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800186e:	4b08      	ldr	r3, [pc, #32]	; (8001890 <MX_SPI2_Init+0x74>)
 8001870:	2200      	movs	r2, #0
 8001872:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001874:	4b06      	ldr	r3, [pc, #24]	; (8001890 <MX_SPI2_Init+0x74>)
 8001876:	2208      	movs	r2, #8
 8001878:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800187a:	4805      	ldr	r0, [pc, #20]	; (8001890 <MX_SPI2_Init+0x74>)
 800187c:	f003 f9f0 	bl	8004c60 <HAL_SPI_Init>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001886:	f000 f8ab 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000670 	.word	0x20000670
 8001894:	40003800 	.word	0x40003800

08001898 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b08a      	sub	sp, #40	; 0x28
 800189c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189e:	f107 0314 	add.w	r3, r7, #20
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	605a      	str	r2, [r3, #4]
 80018a8:	609a      	str	r2, [r3, #8]
 80018aa:	60da      	str	r2, [r3, #12]
 80018ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ae:	4b40      	ldr	r3, [pc, #256]	; (80019b0 <MX_GPIO_Init+0x118>)
 80018b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b2:	4a3f      	ldr	r2, [pc, #252]	; (80019b0 <MX_GPIO_Init+0x118>)
 80018b4:	f043 0304 	orr.w	r3, r3, #4
 80018b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ba:	4b3d      	ldr	r3, [pc, #244]	; (80019b0 <MX_GPIO_Init+0x118>)
 80018bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018be:	f003 0304 	and.w	r3, r3, #4
 80018c2:	613b      	str	r3, [r7, #16]
 80018c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018c6:	4b3a      	ldr	r3, [pc, #232]	; (80019b0 <MX_GPIO_Init+0x118>)
 80018c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ca:	4a39      	ldr	r2, [pc, #228]	; (80019b0 <MX_GPIO_Init+0x118>)
 80018cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018d2:	4b37      	ldr	r3, [pc, #220]	; (80019b0 <MX_GPIO_Init+0x118>)
 80018d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018de:	4b34      	ldr	r3, [pc, #208]	; (80019b0 <MX_GPIO_Init+0x118>)
 80018e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e2:	4a33      	ldr	r2, [pc, #204]	; (80019b0 <MX_GPIO_Init+0x118>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ea:	4b31      	ldr	r3, [pc, #196]	; (80019b0 <MX_GPIO_Init+0x118>)
 80018ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	60bb      	str	r3, [r7, #8]
 80018f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f6:	4b2e      	ldr	r3, [pc, #184]	; (80019b0 <MX_GPIO_Init+0x118>)
 80018f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018fa:	4a2d      	ldr	r2, [pc, #180]	; (80019b0 <MX_GPIO_Init+0x118>)
 80018fc:	f043 0302 	orr.w	r3, r3, #2
 8001900:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001902:	4b2b      	ldr	r3, [pc, #172]	; (80019b0 <MX_GPIO_Init+0x118>)
 8001904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	607b      	str	r3, [r7, #4]
 800190c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800190e:	4b28      	ldr	r3, [pc, #160]	; (80019b0 <MX_GPIO_Init+0x118>)
 8001910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001912:	4a27      	ldr	r2, [pc, #156]	; (80019b0 <MX_GPIO_Init+0x118>)
 8001914:	f043 0308 	orr.w	r3, r3, #8
 8001918:	64d3      	str	r3, [r2, #76]	; 0x4c
 800191a:	4b25      	ldr	r3, [pc, #148]	; (80019b0 <MX_GPIO_Init+0x118>)
 800191c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191e:	f003 0308 	and.w	r3, r3, #8
 8001922:	603b      	str	r3, [r7, #0]
 8001924:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CONT_CK0_Pin|CONT_CK1_Pin|RELAY9_Pin|TC1_NCS_Pin
 8001926:	2200      	movs	r2, #0
 8001928:	f247 31e0 	movw	r1, #29664	; 0x73e0
 800192c:	4821      	ldr	r0, [pc, #132]	; (80019b4 <MX_GPIO_Init+0x11c>)
 800192e:	f001 fe81 	bl	8003634 <HAL_GPIO_WritePin>
                          |TC2_NCS_Pin|RELAY4_Pin|RELAY3_Pin|RS422_TX_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RELAY11_Pin|RELAY10_Pin|RELAY2_Pin|RELAY1_Pin
 8001932:	2200      	movs	r2, #0
 8001934:	f641 1103 	movw	r1, #6403	; 0x1903
 8001938:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800193c:	f001 fe7a 	bl	8003634 <HAL_GPIO_WritePin>
                          |RELAY0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RELAY8_Pin|RELAY7_Pin|RELAY6_Pin|RELAY5_Pin
 8001940:	2200      	movs	r2, #0
 8001942:	f241 01e7 	movw	r1, #4327	; 0x10e7
 8001946:	481c      	ldr	r0, [pc, #112]	; (80019b8 <MX_GPIO_Init+0x120>)
 8001948:	f001 fe74 	bl	8003634 <HAL_GPIO_WritePin>
                          |LED_2_Pin|LED_1_Pin|LED_0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CONT_CK0_Pin CONT_CK1_Pin RELAY9_Pin TC1_NCS_Pin
                           TC2_NCS_Pin RELAY4_Pin RELAY3_Pin RS422_TX_EN_Pin */
  GPIO_InitStruct.Pin = CONT_CK0_Pin|CONT_CK1_Pin|RELAY9_Pin|TC1_NCS_Pin
 800194c:	f247 33e0 	movw	r3, #29664	; 0x73e0
 8001950:	617b      	str	r3, [r7, #20]
                          |TC2_NCS_Pin|RELAY4_Pin|RELAY3_Pin|RS422_TX_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001952:	2301      	movs	r3, #1
 8001954:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195a:	2300      	movs	r3, #0
 800195c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800195e:	f107 0314 	add.w	r3, r7, #20
 8001962:	4619      	mov	r1, r3
 8001964:	4813      	ldr	r0, [pc, #76]	; (80019b4 <MX_GPIO_Init+0x11c>)
 8001966:	f001 fceb 	bl	8003340 <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY11_Pin RELAY10_Pin RELAY2_Pin RELAY1_Pin
                           RELAY0_Pin */
  GPIO_InitStruct.Pin = RELAY11_Pin|RELAY10_Pin|RELAY2_Pin|RELAY1_Pin
 800196a:	f641 1303 	movw	r3, #6403	; 0x1903
 800196e:	617b      	str	r3, [r7, #20]
                          |RELAY0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001970:	2301      	movs	r3, #1
 8001972:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001974:	2300      	movs	r3, #0
 8001976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001978:	2300      	movs	r3, #0
 800197a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	4619      	mov	r1, r3
 8001982:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001986:	f001 fcdb 	bl	8003340 <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY8_Pin RELAY7_Pin RELAY6_Pin RELAY5_Pin
                           LED_2_Pin LED_1_Pin LED_0_Pin */
  GPIO_InitStruct.Pin = RELAY8_Pin|RELAY7_Pin|RELAY6_Pin|RELAY5_Pin
 800198a:	f241 03e7 	movw	r3, #4327	; 0x10e7
 800198e:	617b      	str	r3, [r7, #20]
                          |LED_2_Pin|LED_1_Pin|LED_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001990:	2301      	movs	r3, #1
 8001992:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001998:	2300      	movs	r3, #0
 800199a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800199c:	f107 0314 	add.w	r3, r7, #20
 80019a0:	4619      	mov	r1, r3
 80019a2:	4805      	ldr	r0, [pc, #20]	; (80019b8 <MX_GPIO_Init+0x120>)
 80019a4:	f001 fccc 	bl	8003340 <HAL_GPIO_Init>

}
 80019a8:	bf00      	nop
 80019aa:	3728      	adds	r7, #40	; 0x28
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40021000 	.word	0x40021000
 80019b4:	48000800 	.word	0x48000800
 80019b8:	48000400 	.word	0x48000400

080019bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a04      	ldr	r2, [pc, #16]	; (80019dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d101      	bne.n	80019d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80019ce:	f000 fbfb 	bl	80021c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80019d2:	bf00      	nop
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40012c00 	.word	0x40012c00

080019e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019e4:	b672      	cpsid	i
}
 80019e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019e8:	e7fe      	b.n	80019e8 <Error_Handler+0x8>
	...

080019ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f2:	4b11      	ldr	r3, [pc, #68]	; (8001a38 <HAL_MspInit+0x4c>)
 80019f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019f6:	4a10      	ldr	r2, [pc, #64]	; (8001a38 <HAL_MspInit+0x4c>)
 80019f8:	f043 0301 	orr.w	r3, r3, #1
 80019fc:	6613      	str	r3, [r2, #96]	; 0x60
 80019fe:	4b0e      	ldr	r3, [pc, #56]	; (8001a38 <HAL_MspInit+0x4c>)
 8001a00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	607b      	str	r3, [r7, #4]
 8001a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a0a:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <HAL_MspInit+0x4c>)
 8001a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a0e:	4a0a      	ldr	r2, [pc, #40]	; (8001a38 <HAL_MspInit+0x4c>)
 8001a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a14:	6593      	str	r3, [r2, #88]	; 0x58
 8001a16:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <HAL_MspInit+0x4c>)
 8001a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1e:	603b      	str	r3, [r7, #0]
 8001a20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a22:	2200      	movs	r2, #0
 8001a24:	210f      	movs	r1, #15
 8001a26:	f06f 0001 	mvn.w	r0, #1
 8001a2a:	f001 fb70 	bl	800310e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40021000 	.word	0x40021000

08001a3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b0a2      	sub	sp, #136	; 0x88
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a44:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]
 8001a52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a54:	f107 0318 	add.w	r3, r7, #24
 8001a58:	225c      	movs	r2, #92	; 0x5c
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f006 ffa7 	bl	80089b0 <memset>
  if(hadc->Instance==ADC1)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a31      	ldr	r2, [pc, #196]	; (8001b2c <HAL_ADC_MspInit+0xf0>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d15b      	bne.n	8001b24 <HAL_ADC_MspInit+0xe8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001a6c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a70:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001a72:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001a76:	66bb      	str	r3, [r7, #104]	; 0x68
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001a80:	2310      	movs	r3, #16
 8001a82:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001a84:	2307      	movs	r3, #7
 8001a86:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001a90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a94:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a96:	f107 0318 	add.w	r3, r7, #24
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f002 fdd6 	bl	800464c <HAL_RCCEx_PeriphCLKConfig>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8001aa6:	f7ff ff9b 	bl	80019e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001aaa:	4b21      	ldr	r3, [pc, #132]	; (8001b30 <HAL_ADC_MspInit+0xf4>)
 8001aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aae:	4a20      	ldr	r2, [pc, #128]	; (8001b30 <HAL_ADC_MspInit+0xf4>)
 8001ab0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ab4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ab6:	4b1e      	ldr	r3, [pc, #120]	; (8001b30 <HAL_ADC_MspInit+0xf4>)
 8001ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001abe:	617b      	str	r3, [r7, #20]
 8001ac0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ac2:	4b1b      	ldr	r3, [pc, #108]	; (8001b30 <HAL_ADC_MspInit+0xf4>)
 8001ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac6:	4a1a      	ldr	r2, [pc, #104]	; (8001b30 <HAL_ADC_MspInit+0xf4>)
 8001ac8:	f043 0304 	orr.w	r3, r3, #4
 8001acc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ace:	4b18      	ldr	r3, [pc, #96]	; (8001b30 <HAL_ADC_MspInit+0xf4>)
 8001ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad2:	f003 0304 	and.w	r3, r3, #4
 8001ad6:	613b      	str	r3, [r7, #16]
 8001ad8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ada:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <HAL_ADC_MspInit+0xf4>)
 8001adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ade:	4a14      	ldr	r2, [pc, #80]	; (8001b30 <HAL_ADC_MspInit+0xf4>)
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ae6:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <HAL_ADC_MspInit+0xf4>)
 8001ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001af2:	230f      	movs	r3, #15
 8001af4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001af6:	230b      	movs	r3, #11
 8001af8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001afe:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001b02:	4619      	mov	r1, r3
 8001b04:	480b      	ldr	r0, [pc, #44]	; (8001b34 <HAL_ADC_MspInit+0xf8>)
 8001b06:	f001 fc1b 	bl	8003340 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001b0a:	23f0      	movs	r3, #240	; 0xf0
 8001b0c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001b0e:	230b      	movs	r3, #11
 8001b10:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b16:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b20:	f001 fc0e 	bl	8003340 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b24:	bf00      	nop
 8001b26:	3788      	adds	r7, #136	; 0x88
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	50040000 	.word	0x50040000
 8001b30:	40021000 	.word	0x40021000
 8001b34:	48000800 	.word	0x48000800

08001b38 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a0a      	ldr	r2, [pc, #40]	; (8001b70 <HAL_CRC_MspInit+0x38>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d10b      	bne.n	8001b62 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001b4a:	4b0a      	ldr	r3, [pc, #40]	; (8001b74 <HAL_CRC_MspInit+0x3c>)
 8001b4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b4e:	4a09      	ldr	r2, [pc, #36]	; (8001b74 <HAL_CRC_MspInit+0x3c>)
 8001b50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b54:	6493      	str	r3, [r2, #72]	; 0x48
 8001b56:	4b07      	ldr	r3, [pc, #28]	; (8001b74 <HAL_CRC_MspInit+0x3c>)
 8001b58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001b62:	bf00      	nop
 8001b64:	3714      	adds	r7, #20
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	40023000 	.word	0x40023000
 8001b74:	40021000 	.word	0x40021000

08001b78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b0a0      	sub	sp, #128	; 0x80
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b80:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b90:	f107 0310 	add.w	r3, r7, #16
 8001b94:	225c      	movs	r2, #92	; 0x5c
 8001b96:	2100      	movs	r1, #0
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f006 ff09 	bl	80089b0 <memset>
  if(hi2c->Instance==I2C1)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a1f      	ldr	r2, [pc, #124]	; (8001c20 <HAL_I2C_MspInit+0xa8>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d136      	bne.n	8001c16 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ba8:	2340      	movs	r3, #64	; 0x40
 8001baa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001bac:	2300      	movs	r3, #0
 8001bae:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bb0:	f107 0310 	add.w	r3, r7, #16
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f002 fd49 	bl	800464c <HAL_RCCEx_PeriphCLKConfig>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001bc0:	f7ff ff0e 	bl	80019e0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc4:	4b17      	ldr	r3, [pc, #92]	; (8001c24 <HAL_I2C_MspInit+0xac>)
 8001bc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc8:	4a16      	ldr	r2, [pc, #88]	; (8001c24 <HAL_I2C_MspInit+0xac>)
 8001bca:	f043 0302 	orr.w	r3, r3, #2
 8001bce:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bd0:	4b14      	ldr	r3, [pc, #80]	; (8001c24 <HAL_I2C_MspInit+0xac>)
 8001bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd4:	f003 0302 	and.w	r3, r3, #2
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bdc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001be0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001be2:	2312      	movs	r3, #18
 8001be4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bea:	2303      	movs	r3, #3
 8001bec:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bee:	2304      	movs	r3, #4
 8001bf0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	480b      	ldr	r0, [pc, #44]	; (8001c28 <HAL_I2C_MspInit+0xb0>)
 8001bfa:	f001 fba1 	bl	8003340 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bfe:	4b09      	ldr	r3, [pc, #36]	; (8001c24 <HAL_I2C_MspInit+0xac>)
 8001c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c02:	4a08      	ldr	r2, [pc, #32]	; (8001c24 <HAL_I2C_MspInit+0xac>)
 8001c04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c08:	6593      	str	r3, [r2, #88]	; 0x58
 8001c0a:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <HAL_I2C_MspInit+0xac>)
 8001c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c12:	60bb      	str	r3, [r7, #8]
 8001c14:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c16:	bf00      	nop
 8001c18:	3780      	adds	r7, #128	; 0x80
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40005400 	.word	0x40005400
 8001c24:	40021000 	.word	0x40021000
 8001c28:	48000400 	.word	0x48000400

08001c2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b0a8      	sub	sp, #160	; 0xa0
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c34:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	60da      	str	r2, [r3, #12]
 8001c42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c48:	225c      	movs	r2, #92	; 0x5c
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f006 feaf 	bl	80089b0 <memset>
  if(huart->Instance==LPUART1)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a95      	ldr	r2, [pc, #596]	; (8001eac <HAL_UART_MspInit+0x280>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d13c      	bne.n	8001cd6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001c5c:	2320      	movs	r3, #32
 8001c5e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001c60:	2300      	movs	r3, #0
 8001c62:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f002 fcef 	bl	800464c <HAL_RCCEx_PeriphCLKConfig>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c74:	f7ff feb4 	bl	80019e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001c78:	4b8d      	ldr	r3, [pc, #564]	; (8001eb0 <HAL_UART_MspInit+0x284>)
 8001c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c7c:	4a8c      	ldr	r2, [pc, #560]	; (8001eb0 <HAL_UART_MspInit+0x284>)
 8001c7e:	f043 0301 	orr.w	r3, r3, #1
 8001c82:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001c84:	4b8a      	ldr	r3, [pc, #552]	; (8001eb0 <HAL_UART_MspInit+0x284>)
 8001c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c90:	4b87      	ldr	r3, [pc, #540]	; (8001eb0 <HAL_UART_MspInit+0x284>)
 8001c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c94:	4a86      	ldr	r2, [pc, #536]	; (8001eb0 <HAL_UART_MspInit+0x284>)
 8001c96:	f043 0302 	orr.w	r3, r3, #2
 8001c9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c9c:	4b84      	ldr	r3, [pc, #528]	; (8001eb0 <HAL_UART_MspInit+0x284>)
 8001c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001ca8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001cac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001cc2:	2308      	movs	r3, #8
 8001cc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4879      	ldr	r0, [pc, #484]	; (8001eb4 <HAL_UART_MspInit+0x288>)
 8001cd0:	f001 fb36 	bl	8003340 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001cd4:	e0e6      	b.n	8001ea4 <HAL_UART_MspInit+0x278>
  else if(huart->Instance==USART1)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a77      	ldr	r2, [pc, #476]	; (8001eb8 <HAL_UART_MspInit+0x28c>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d13d      	bne.n	8001d5c <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ce8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cec:	4618      	mov	r0, r3
 8001cee:	f002 fcad 	bl	800464c <HAL_RCCEx_PeriphCLKConfig>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8001cf8:	f7ff fe72 	bl	80019e0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cfc:	4b6c      	ldr	r3, [pc, #432]	; (8001eb0 <HAL_UART_MspInit+0x284>)
 8001cfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d00:	4a6b      	ldr	r2, [pc, #428]	; (8001eb0 <HAL_UART_MspInit+0x284>)
 8001d02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d06:	6613      	str	r3, [r2, #96]	; 0x60
 8001d08:	4b69      	ldr	r3, [pc, #420]	; (8001eb0 <HAL_UART_MspInit+0x284>)
 8001d0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d10:	627b      	str	r3, [r7, #36]	; 0x24
 8001d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d14:	4b66      	ldr	r3, [pc, #408]	; (8001eb0 <HAL_UART_MspInit+0x284>)
 8001d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d18:	4a65      	ldr	r2, [pc, #404]	; (8001eb0 <HAL_UART_MspInit+0x284>)
 8001d1a:	f043 0301 	orr.w	r3, r3, #1
 8001d1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d20:	4b63      	ldr	r3, [pc, #396]	; (8001eb0 <HAL_UART_MspInit+0x284>)
 8001d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	623b      	str	r3, [r7, #32]
 8001d2a:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d2c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001d30:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d34:	2302      	movs	r3, #2
 8001d36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d40:	2303      	movs	r3, #3
 8001d42:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d46:	2307      	movs	r3, #7
 8001d48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001d50:	4619      	mov	r1, r3
 8001d52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d56:	f001 faf3 	bl	8003340 <HAL_GPIO_Init>
}
 8001d5a:	e0a3      	b.n	8001ea4 <HAL_UART_MspInit+0x278>
  else if(huart->Instance==USART2)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a56      	ldr	r2, [pc, #344]	; (8001ebc <HAL_UART_MspInit+0x290>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d13c      	bne.n	8001de0 <HAL_UART_MspInit+0x1b4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d66:	2302      	movs	r3, #2
 8001d68:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d72:	4618      	mov	r0, r3
 8001d74:	f002 fc6a 	bl	800464c <HAL_RCCEx_PeriphCLKConfig>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <HAL_UART_MspInit+0x156>
      Error_Handler();
 8001d7e:	f7ff fe2f 	bl	80019e0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d82:	4b4b      	ldr	r3, [pc, #300]	; (8001eb0 <HAL_UART_MspInit+0x284>)
 8001d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d86:	4a4a      	ldr	r2, [pc, #296]	; (8001eb0 <HAL_UART_MspInit+0x284>)
 8001d88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d8c:	6593      	str	r3, [r2, #88]	; 0x58
 8001d8e:	4b48      	ldr	r3, [pc, #288]	; (8001eb0 <HAL_UART_MspInit+0x284>)
 8001d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d96:	61fb      	str	r3, [r7, #28]
 8001d98:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d9a:	4b45      	ldr	r3, [pc, #276]	; (8001eb0 <HAL_UART_MspInit+0x284>)
 8001d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d9e:	4a44      	ldr	r2, [pc, #272]	; (8001eb0 <HAL_UART_MspInit+0x284>)
 8001da0:	f043 0301 	orr.w	r3, r3, #1
 8001da4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001da6:	4b42      	ldr	r3, [pc, #264]	; (8001eb0 <HAL_UART_MspInit+0x284>)
 8001da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	61bb      	str	r3, [r7, #24]
 8001db0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001db2:	230c      	movs	r3, #12
 8001db4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db8:	2302      	movs	r3, #2
 8001dba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001dca:	2307      	movs	r3, #7
 8001dcc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dda:	f001 fab1 	bl	8003340 <HAL_GPIO_Init>
}
 8001dde:	e061      	b.n	8001ea4 <HAL_UART_MspInit+0x278>
  else if(huart->Instance==USART3)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a36      	ldr	r2, [pc, #216]	; (8001ec0 <HAL_UART_MspInit+0x294>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d15c      	bne.n	8001ea4 <HAL_UART_MspInit+0x278>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001dea:	2304      	movs	r3, #4
 8001dec:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001dee:	2300      	movs	r3, #0
 8001df0:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001df2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001df6:	4618      	mov	r0, r3
 8001df8:	f002 fc28 	bl	800464c <HAL_RCCEx_PeriphCLKConfig>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <HAL_UART_MspInit+0x1da>
      Error_Handler();
 8001e02:	f7ff fded 	bl	80019e0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e06:	4b2a      	ldr	r3, [pc, #168]	; (8001eb0 <HAL_UART_MspInit+0x284>)
 8001e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e0a:	4a29      	ldr	r2, [pc, #164]	; (8001eb0 <HAL_UART_MspInit+0x284>)
 8001e0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e10:	6593      	str	r3, [r2, #88]	; 0x58
 8001e12:	4b27      	ldr	r3, [pc, #156]	; (8001eb0 <HAL_UART_MspInit+0x284>)
 8001e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e1a:	617b      	str	r3, [r7, #20]
 8001e1c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e1e:	4b24      	ldr	r3, [pc, #144]	; (8001eb0 <HAL_UART_MspInit+0x284>)
 8001e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e22:	4a23      	ldr	r2, [pc, #140]	; (8001eb0 <HAL_UART_MspInit+0x284>)
 8001e24:	f043 0304 	orr.w	r3, r3, #4
 8001e28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e2a:	4b21      	ldr	r3, [pc, #132]	; (8001eb0 <HAL_UART_MspInit+0x284>)
 8001e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e2e:	f003 0304 	and.w	r3, r3, #4
 8001e32:	613b      	str	r3, [r7, #16]
 8001e34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e36:	4b1e      	ldr	r3, [pc, #120]	; (8001eb0 <HAL_UART_MspInit+0x284>)
 8001e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e3a:	4a1d      	ldr	r2, [pc, #116]	; (8001eb0 <HAL_UART_MspInit+0x284>)
 8001e3c:	f043 0308 	orr.w	r3, r3, #8
 8001e40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e42:	4b1b      	ldr	r3, [pc, #108]	; (8001eb0 <HAL_UART_MspInit+0x284>)
 8001e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e46:	f003 0308 	and.w	r3, r3, #8
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001e4e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001e52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e56:	2302      	movs	r3, #2
 8001e58:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e62:	2303      	movs	r3, #3
 8001e64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e68:	2307      	movs	r3, #7
 8001e6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e6e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001e72:	4619      	mov	r1, r3
 8001e74:	4813      	ldr	r0, [pc, #76]	; (8001ec4 <HAL_UART_MspInit+0x298>)
 8001e76:	f001 fa63 	bl	8003340 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e7a:	2304      	movs	r3, #4
 8001e7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e80:	2302      	movs	r3, #2
 8001e82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e86:	2300      	movs	r3, #0
 8001e88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e92:	2307      	movs	r3, #7
 8001e94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e98:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	480a      	ldr	r0, [pc, #40]	; (8001ec8 <HAL_UART_MspInit+0x29c>)
 8001ea0:	f001 fa4e 	bl	8003340 <HAL_GPIO_Init>
}
 8001ea4:	bf00      	nop
 8001ea6:	37a0      	adds	r7, #160	; 0xa0
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40008000 	.word	0x40008000
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	48000400 	.word	0x48000400
 8001eb8:	40013800 	.word	0x40013800
 8001ebc:	40004400 	.word	0x40004400
 8001ec0:	40004800 	.word	0x40004800
 8001ec4:	48000800 	.word	0x48000800
 8001ec8:	48000c00 	.word	0x48000c00

08001ecc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b08a      	sub	sp, #40	; 0x28
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed4:	f107 0314 	add.w	r3, r7, #20
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	605a      	str	r2, [r3, #4]
 8001ede:	609a      	str	r2, [r3, #8]
 8001ee0:	60da      	str	r2, [r3, #12]
 8001ee2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a17      	ldr	r2, [pc, #92]	; (8001f48 <HAL_SPI_MspInit+0x7c>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d128      	bne.n	8001f40 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001eee:	4b17      	ldr	r3, [pc, #92]	; (8001f4c <HAL_SPI_MspInit+0x80>)
 8001ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef2:	4a16      	ldr	r2, [pc, #88]	; (8001f4c <HAL_SPI_MspInit+0x80>)
 8001ef4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ef8:	6593      	str	r3, [r2, #88]	; 0x58
 8001efa:	4b14      	ldr	r3, [pc, #80]	; (8001f4c <HAL_SPI_MspInit+0x80>)
 8001efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f02:	613b      	str	r3, [r7, #16]
 8001f04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f06:	4b11      	ldr	r3, [pc, #68]	; (8001f4c <HAL_SPI_MspInit+0x80>)
 8001f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f0a:	4a10      	ldr	r2, [pc, #64]	; (8001f4c <HAL_SPI_MspInit+0x80>)
 8001f0c:	f043 0302 	orr.w	r3, r3, #2
 8001f10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f12:	4b0e      	ldr	r3, [pc, #56]	; (8001f4c <HAL_SPI_MspInit+0x80>)
 8001f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001f1e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001f22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f24:	2302      	movs	r3, #2
 8001f26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f30:	2305      	movs	r3, #5
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f34:	f107 0314 	add.w	r3, r7, #20
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4805      	ldr	r0, [pc, #20]	; (8001f50 <HAL_SPI_MspInit+0x84>)
 8001f3c:	f001 fa00 	bl	8003340 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001f40:	bf00      	nop
 8001f42:	3728      	adds	r7, #40	; 0x28
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40003800 	.word	0x40003800
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	48000400 	.word	0x48000400

08001f54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b08c      	sub	sp, #48	; 0x30
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001f62:	4b2e      	ldr	r3, [pc, #184]	; (800201c <HAL_InitTick+0xc8>)
 8001f64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f66:	4a2d      	ldr	r2, [pc, #180]	; (800201c <HAL_InitTick+0xc8>)
 8001f68:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f6c:	6613      	str	r3, [r2, #96]	; 0x60
 8001f6e:	4b2b      	ldr	r3, [pc, #172]	; (800201c <HAL_InitTick+0xc8>)
 8001f70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f76:	60bb      	str	r3, [r7, #8]
 8001f78:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f7a:	f107 020c 	add.w	r2, r7, #12
 8001f7e:	f107 0310 	add.w	r3, r7, #16
 8001f82:	4611      	mov	r1, r2
 8001f84:	4618      	mov	r0, r3
 8001f86:	f002 facf 	bl	8004528 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001f8a:	f002 fab7 	bl	80044fc <HAL_RCC_GetPCLK2Freq>
 8001f8e:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f92:	4a23      	ldr	r2, [pc, #140]	; (8002020 <HAL_InitTick+0xcc>)
 8001f94:	fba2 2303 	umull	r2, r3, r2, r3
 8001f98:	0c9b      	lsrs	r3, r3, #18
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001f9e:	4b21      	ldr	r3, [pc, #132]	; (8002024 <HAL_InitTick+0xd0>)
 8001fa0:	4a21      	ldr	r2, [pc, #132]	; (8002028 <HAL_InitTick+0xd4>)
 8001fa2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001fa4:	4b1f      	ldr	r3, [pc, #124]	; (8002024 <HAL_InitTick+0xd0>)
 8001fa6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001faa:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001fac:	4a1d      	ldr	r2, [pc, #116]	; (8002024 <HAL_InitTick+0xd0>)
 8001fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb0:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001fb2:	4b1c      	ldr	r3, [pc, #112]	; (8002024 <HAL_InitTick+0xd0>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fb8:	4b1a      	ldr	r3, [pc, #104]	; (8002024 <HAL_InitTick+0xd0>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fbe:	4b19      	ldr	r3, [pc, #100]	; (8002024 <HAL_InitTick+0xd0>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001fc4:	4817      	ldr	r0, [pc, #92]	; (8002024 <HAL_InitTick+0xd0>)
 8001fc6:	f002 feee 	bl	8004da6 <HAL_TIM_Base_Init>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001fd0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d11b      	bne.n	8002010 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001fd8:	4812      	ldr	r0, [pc, #72]	; (8002024 <HAL_InitTick+0xd0>)
 8001fda:	f002 ff45 	bl	8004e68 <HAL_TIM_Base_Start_IT>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001fe4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d111      	bne.n	8002010 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001fec:	2019      	movs	r0, #25
 8001fee:	f001 f8aa 	bl	8003146 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2b0f      	cmp	r3, #15
 8001ff6:	d808      	bhi.n	800200a <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	6879      	ldr	r1, [r7, #4]
 8001ffc:	2019      	movs	r0, #25
 8001ffe:	f001 f886 	bl	800310e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002002:	4a0a      	ldr	r2, [pc, #40]	; (800202c <HAL_InitTick+0xd8>)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6013      	str	r3, [r2, #0]
 8002008:	e002      	b.n	8002010 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002010:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002014:	4618      	mov	r0, r3
 8002016:	3730      	adds	r7, #48	; 0x30
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40021000 	.word	0x40021000
 8002020:	431bde83 	.word	0x431bde83
 8002024:	200006d4 	.word	0x200006d4
 8002028:	40012c00 	.word	0x40012c00
 800202c:	20000004 	.word	0x20000004

08002030 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002034:	e7fe      	b.n	8002034 <NMI_Handler+0x4>

08002036 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002036:	b480      	push	{r7}
 8002038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800203a:	e7fe      	b.n	800203a <HardFault_Handler+0x4>

0800203c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002040:	e7fe      	b.n	8002040 <MemManage_Handler+0x4>

08002042 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002042:	b480      	push	{r7}
 8002044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002046:	e7fe      	b.n	8002046 <BusFault_Handler+0x4>

08002048 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800204c:	e7fe      	b.n	800204c <UsageFault_Handler+0x4>

0800204e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800204e:	b480      	push	{r7}
 8002050:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002052:	bf00      	nop
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002060:	4802      	ldr	r0, [pc, #8]	; (800206c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002062:	f002 ff55 	bl	8004f10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002066:	bf00      	nop
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	200006d4 	.word	0x200006d4

08002070 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  return 1;
 8002074:	2301      	movs	r3, #1
}
 8002076:	4618      	mov	r0, r3
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <_kill>:

int _kill(int pid, int sig)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800208a:	f006 fc4f 	bl	800892c <__errno>
 800208e:	4603      	mov	r3, r0
 8002090:	2216      	movs	r2, #22
 8002092:	601a      	str	r2, [r3, #0]
  return -1;
 8002094:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002098:	4618      	mov	r0, r3
 800209a:	3708      	adds	r7, #8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <_exit>:

void _exit (int status)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020a8:	f04f 31ff 	mov.w	r1, #4294967295
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f7ff ffe7 	bl	8002080 <_kill>
  while (1) {}    /* Make sure we hang here */
 80020b2:	e7fe      	b.n	80020b2 <_exit+0x12>

080020b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020bc:	4a14      	ldr	r2, [pc, #80]	; (8002110 <_sbrk+0x5c>)
 80020be:	4b15      	ldr	r3, [pc, #84]	; (8002114 <_sbrk+0x60>)
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020c8:	4b13      	ldr	r3, [pc, #76]	; (8002118 <_sbrk+0x64>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d102      	bne.n	80020d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020d0:	4b11      	ldr	r3, [pc, #68]	; (8002118 <_sbrk+0x64>)
 80020d2:	4a12      	ldr	r2, [pc, #72]	; (800211c <_sbrk+0x68>)
 80020d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020d6:	4b10      	ldr	r3, [pc, #64]	; (8002118 <_sbrk+0x64>)
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4413      	add	r3, r2
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d207      	bcs.n	80020f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020e4:	f006 fc22 	bl	800892c <__errno>
 80020e8:	4603      	mov	r3, r0
 80020ea:	220c      	movs	r2, #12
 80020ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020ee:	f04f 33ff 	mov.w	r3, #4294967295
 80020f2:	e009      	b.n	8002108 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020f4:	4b08      	ldr	r3, [pc, #32]	; (8002118 <_sbrk+0x64>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020fa:	4b07      	ldr	r3, [pc, #28]	; (8002118 <_sbrk+0x64>)
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4413      	add	r3, r2
 8002102:	4a05      	ldr	r2, [pc, #20]	; (8002118 <_sbrk+0x64>)
 8002104:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002106:	68fb      	ldr	r3, [r7, #12]
}
 8002108:	4618      	mov	r0, r3
 800210a:	3718      	adds	r7, #24
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	20010000 	.word	0x20010000
 8002114:	00000400 	.word	0x00000400
 8002118:	20000720 	.word	0x20000720
 800211c:	20001488 	.word	0x20001488

08002120 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002124:	4b06      	ldr	r3, [pc, #24]	; (8002140 <SystemInit+0x20>)
 8002126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800212a:	4a05      	ldr	r2, [pc, #20]	; (8002140 <SystemInit+0x20>)
 800212c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002130:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002134:	bf00      	nop
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	e000ed00 	.word	0xe000ed00

08002144 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002144:	f8df d034 	ldr.w	sp, [pc, #52]	; 800217c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002148:	f7ff ffea 	bl	8002120 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800214c:	480c      	ldr	r0, [pc, #48]	; (8002180 <LoopForever+0x6>)
  ldr r1, =_edata
 800214e:	490d      	ldr	r1, [pc, #52]	; (8002184 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002150:	4a0d      	ldr	r2, [pc, #52]	; (8002188 <LoopForever+0xe>)
  movs r3, #0
 8002152:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002154:	e002      	b.n	800215c <LoopCopyDataInit>

08002156 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002156:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002158:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800215a:	3304      	adds	r3, #4

0800215c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800215c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800215e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002160:	d3f9      	bcc.n	8002156 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002162:	4a0a      	ldr	r2, [pc, #40]	; (800218c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002164:	4c0a      	ldr	r4, [pc, #40]	; (8002190 <LoopForever+0x16>)
  movs r3, #0
 8002166:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002168:	e001      	b.n	800216e <LoopFillZerobss>

0800216a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800216a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800216c:	3204      	adds	r2, #4

0800216e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800216e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002170:	d3fb      	bcc.n	800216a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002172:	f006 fbe1 	bl	8008938 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002176:	f7ff f969 	bl	800144c <main>

0800217a <LoopForever>:

LoopForever:
    b LoopForever
 800217a:	e7fe      	b.n	800217a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800217c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002180:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002184:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002188:	08009b9c 	.word	0x08009b9c
  ldr r2, =_sbss
 800218c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002190:	20001488 	.word	0x20001488

08002194 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002194:	e7fe      	b.n	8002194 <ADC1_IRQHandler>

08002196 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b082      	sub	sp, #8
 800219a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800219c:	2300      	movs	r3, #0
 800219e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021a0:	2003      	movs	r0, #3
 80021a2:	f000 ffa9 	bl	80030f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021a6:	200f      	movs	r0, #15
 80021a8:	f7ff fed4 	bl	8001f54 <HAL_InitTick>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d002      	beq.n	80021b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	71fb      	strb	r3, [r7, #7]
 80021b6:	e001      	b.n	80021bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80021b8:	f7ff fc18 	bl	80019ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80021bc:	79fb      	ldrb	r3, [r7, #7]
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
	...

080021c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80021cc:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <HAL_IncTick+0x20>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	461a      	mov	r2, r3
 80021d2:	4b06      	ldr	r3, [pc, #24]	; (80021ec <HAL_IncTick+0x24>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4413      	add	r3, r2
 80021d8:	4a04      	ldr	r2, [pc, #16]	; (80021ec <HAL_IncTick+0x24>)
 80021da:	6013      	str	r3, [r2, #0]
}
 80021dc:	bf00      	nop
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	20000008 	.word	0x20000008
 80021ec:	20000724 	.word	0x20000724

080021f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  return uwTick;
 80021f4:	4b03      	ldr	r3, [pc, #12]	; (8002204 <HAL_GetTick+0x14>)
 80021f6:	681b      	ldr	r3, [r3, #0]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	20000724 	.word	0x20000724

08002208 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	431a      	orrs	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	609a      	str	r2, [r3, #8]
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800222e:	b480      	push	{r7}
 8002230:	b083      	sub	sp, #12
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
 8002236:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	431a      	orrs	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	609a      	str	r2, [r3, #8]
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002264:	4618      	mov	r0, r3
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002270:	b480      	push	{r7}
 8002272:	b087      	sub	sp, #28
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
 800227c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	3360      	adds	r3, #96	; 0x60
 8002282:	461a      	mov	r2, r3
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	4413      	add	r3, r2
 800228a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	4b08      	ldr	r3, [pc, #32]	; (80022b4 <LL_ADC_SetOffset+0x44>)
 8002292:	4013      	ands	r3, r2
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800229a:	683a      	ldr	r2, [r7, #0]
 800229c:	430a      	orrs	r2, r1
 800229e:	4313      	orrs	r3, r2
 80022a0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80022a8:	bf00      	nop
 80022aa:	371c      	adds	r7, #28
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	03fff000 	.word	0x03fff000

080022b8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	3360      	adds	r3, #96	; 0x60
 80022c6:	461a      	mov	r2, r3
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4413      	add	r3, r2
 80022ce:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3714      	adds	r7, #20
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b087      	sub	sp, #28
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	3360      	adds	r3, #96	; 0x60
 80022f4:	461a      	mov	r2, r3
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	4413      	add	r3, r2
 80022fc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	431a      	orrs	r2, r3
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800230e:	bf00      	nop
 8002310:	371c      	adds	r7, #28
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800231a:	b480      	push	{r7}
 800231c:	b087      	sub	sp, #28
 800231e:	af00      	add	r7, sp, #0
 8002320:	60f8      	str	r0, [r7, #12]
 8002322:	60b9      	str	r1, [r7, #8]
 8002324:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	3330      	adds	r3, #48	; 0x30
 800232a:	461a      	mov	r2, r3
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	0a1b      	lsrs	r3, r3, #8
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	f003 030c 	and.w	r3, r3, #12
 8002336:	4413      	add	r3, r2
 8002338:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	f003 031f 	and.w	r3, r3, #31
 8002344:	211f      	movs	r1, #31
 8002346:	fa01 f303 	lsl.w	r3, r1, r3
 800234a:	43db      	mvns	r3, r3
 800234c:	401a      	ands	r2, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	0e9b      	lsrs	r3, r3, #26
 8002352:	f003 011f 	and.w	r1, r3, #31
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	f003 031f 	and.w	r3, r3, #31
 800235c:	fa01 f303 	lsl.w	r3, r1, r3
 8002360:	431a      	orrs	r2, r3
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002366:	bf00      	nop
 8002368:	371c      	adds	r7, #28
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002372:	b480      	push	{r7}
 8002374:	b087      	sub	sp, #28
 8002376:	af00      	add	r7, sp, #0
 8002378:	60f8      	str	r0, [r7, #12]
 800237a:	60b9      	str	r1, [r7, #8]
 800237c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	3314      	adds	r3, #20
 8002382:	461a      	mov	r2, r3
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	0e5b      	lsrs	r3, r3, #25
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	f003 0304 	and.w	r3, r3, #4
 800238e:	4413      	add	r3, r2
 8002390:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	0d1b      	lsrs	r3, r3, #20
 800239a:	f003 031f 	and.w	r3, r3, #31
 800239e:	2107      	movs	r1, #7
 80023a0:	fa01 f303 	lsl.w	r3, r1, r3
 80023a4:	43db      	mvns	r3, r3
 80023a6:	401a      	ands	r2, r3
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	0d1b      	lsrs	r3, r3, #20
 80023ac:	f003 031f 	and.w	r3, r3, #31
 80023b0:	6879      	ldr	r1, [r7, #4]
 80023b2:	fa01 f303 	lsl.w	r3, r1, r3
 80023b6:	431a      	orrs	r2, r3
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80023bc:	bf00      	nop
 80023be:	371c      	adds	r7, #28
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023e0:	43db      	mvns	r3, r3
 80023e2:	401a      	ands	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f003 0318 	and.w	r3, r3, #24
 80023ea:	4908      	ldr	r1, [pc, #32]	; (800240c <LL_ADC_SetChannelSingleDiff+0x44>)
 80023ec:	40d9      	lsrs	r1, r3
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	400b      	ands	r3, r1
 80023f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023f6:	431a      	orrs	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80023fe:	bf00      	nop
 8002400:	3714      	adds	r7, #20
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	0007ffff 	.word	0x0007ffff

08002410 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002420:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	6093      	str	r3, [r2, #8]
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002444:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002448:	d101      	bne.n	800244e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800244a:	2301      	movs	r3, #1
 800244c:	e000      	b.n	8002450 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800246c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002470:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002494:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002498:	d101      	bne.n	800249e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800249a:	2301      	movs	r3, #1
 800249c:	e000      	b.n	80024a0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d101      	bne.n	80024c4 <LL_ADC_IsEnabled+0x18>
 80024c0:	2301      	movs	r3, #1
 80024c2:	e000      	b.n	80024c6 <LL_ADC_IsEnabled+0x1a>
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b083      	sub	sp, #12
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f003 0304 	and.w	r3, r3, #4
 80024e2:	2b04      	cmp	r3, #4
 80024e4:	d101      	bne.n	80024ea <LL_ADC_REG_IsConversionOngoing+0x18>
 80024e6:	2301      	movs	r3, #1
 80024e8:	e000      	b.n	80024ec <LL_ADC_REG_IsConversionOngoing+0x1a>
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f003 0308 	and.w	r3, r3, #8
 8002508:	2b08      	cmp	r3, #8
 800250a:	d101      	bne.n	8002510 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800250c:	2301      	movs	r3, #1
 800250e:	e000      	b.n	8002512 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
	...

08002520 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b088      	sub	sp, #32
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002528:	2300      	movs	r3, #0
 800252a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800252c:	2300      	movs	r3, #0
 800252e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e12c      	b.n	8002794 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002544:	2b00      	cmp	r3, #0
 8002546:	d109      	bne.n	800255c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f7ff fa77 	bl	8001a3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff ff67 	bl	8002434 <LL_ADC_IsDeepPowerDownEnabled>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d004      	beq.n	8002576 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff ff4d 	bl	8002410 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4618      	mov	r0, r3
 800257c:	f7ff ff82 	bl	8002484 <LL_ADC_IsInternalRegulatorEnabled>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d115      	bne.n	80025b2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff ff66 	bl	800245c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002590:	4b82      	ldr	r3, [pc, #520]	; (800279c <HAL_ADC_Init+0x27c>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	099b      	lsrs	r3, r3, #6
 8002596:	4a82      	ldr	r2, [pc, #520]	; (80027a0 <HAL_ADC_Init+0x280>)
 8002598:	fba2 2303 	umull	r2, r3, r2, r3
 800259c:	099b      	lsrs	r3, r3, #6
 800259e:	3301      	adds	r3, #1
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80025a4:	e002      	b.n	80025ac <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	3b01      	subs	r3, #1
 80025aa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1f9      	bne.n	80025a6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff ff64 	bl	8002484 <LL_ADC_IsInternalRegulatorEnabled>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d10d      	bne.n	80025de <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c6:	f043 0210 	orr.w	r2, r3, #16
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d2:	f043 0201 	orr.w	r2, r3, #1
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7ff ff75 	bl	80024d2 <LL_ADC_REG_IsConversionOngoing>
 80025e8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ee:	f003 0310 	and.w	r3, r3, #16
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f040 80c5 	bne.w	8002782 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f040 80c1 	bne.w	8002782 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002604:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002608:	f043 0202 	orr.w	r2, r3, #2
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff ff49 	bl	80024ac <LL_ADC_IsEnabled>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d10b      	bne.n	8002638 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002620:	4860      	ldr	r0, [pc, #384]	; (80027a4 <HAL_ADC_Init+0x284>)
 8002622:	f7ff ff43 	bl	80024ac <LL_ADC_IsEnabled>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d105      	bne.n	8002638 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	4619      	mov	r1, r3
 8002632:	485d      	ldr	r0, [pc, #372]	; (80027a8 <HAL_ADC_Init+0x288>)
 8002634:	f7ff fde8 	bl	8002208 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	7e5b      	ldrb	r3, [r3, #25]
 800263c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002642:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002648:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800264e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002656:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002658:	4313      	orrs	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d106      	bne.n	8002674 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266a:	3b01      	subs	r3, #1
 800266c:	045b      	lsls	r3, r3, #17
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4313      	orrs	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002678:	2b00      	cmp	r3, #0
 800267a:	d009      	beq.n	8002690 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002680:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002688:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	4313      	orrs	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68da      	ldr	r2, [r3, #12]
 8002696:	4b45      	ldr	r3, [pc, #276]	; (80027ac <HAL_ADC_Init+0x28c>)
 8002698:	4013      	ands	r3, r2
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	6812      	ldr	r2, [r2, #0]
 800269e:	69b9      	ldr	r1, [r7, #24]
 80026a0:	430b      	orrs	r3, r1
 80026a2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff ff12 	bl	80024d2 <LL_ADC_REG_IsConversionOngoing>
 80026ae:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff ff1f 	bl	80024f8 <LL_ADC_INJ_IsConversionOngoing>
 80026ba:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d13d      	bne.n	800273e <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d13a      	bne.n	800273e <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80026cc:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026d4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80026d6:	4313      	orrs	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026e4:	f023 0302 	bic.w	r3, r3, #2
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	6812      	ldr	r2, [r2, #0]
 80026ec:	69b9      	ldr	r1, [r7, #24]
 80026ee:	430b      	orrs	r3, r1
 80026f0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d118      	bne.n	800272e <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002706:	f023 0304 	bic.w	r3, r3, #4
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002712:	4311      	orrs	r1, r2
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002718:	4311      	orrs	r1, r2
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800271e:	430a      	orrs	r2, r1
 8002720:	431a      	orrs	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f042 0201 	orr.w	r2, r2, #1
 800272a:	611a      	str	r2, [r3, #16]
 800272c:	e007      	b.n	800273e <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	691a      	ldr	r2, [r3, #16]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 0201 	bic.w	r2, r2, #1
 800273c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d10c      	bne.n	8002760 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274c:	f023 010f 	bic.w	r1, r3, #15
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	69db      	ldr	r3, [r3, #28]
 8002754:	1e5a      	subs	r2, r3, #1
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	430a      	orrs	r2, r1
 800275c:	631a      	str	r2, [r3, #48]	; 0x30
 800275e:	e007      	b.n	8002770 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f022 020f 	bic.w	r2, r2, #15
 800276e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002774:	f023 0303 	bic.w	r3, r3, #3
 8002778:	f043 0201 	orr.w	r2, r3, #1
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	655a      	str	r2, [r3, #84]	; 0x54
 8002780:	e007      	b.n	8002792 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002786:	f043 0210 	orr.w	r2, r3, #16
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002792:	7ffb      	ldrb	r3, [r7, #31]
}
 8002794:	4618      	mov	r0, r3
 8002796:	3720      	adds	r7, #32
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	20000000 	.word	0x20000000
 80027a0:	053e2d63 	.word	0x053e2d63
 80027a4:	50040000 	.word	0x50040000
 80027a8:	50040300 	.word	0x50040300
 80027ac:	fff0c007 	.word	0xfff0c007

080027b0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b0b6      	sub	sp, #216	; 0xd8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027ba:	2300      	movs	r3, #0
 80027bc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80027c0:	2300      	movs	r3, #0
 80027c2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d101      	bne.n	80027d2 <HAL_ADC_ConfigChannel+0x22>
 80027ce:	2302      	movs	r3, #2
 80027d0:	e3b9      	b.n	8002f46 <HAL_ADC_ConfigChannel+0x796>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2201      	movs	r2, #1
 80027d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4618      	mov	r0, r3
 80027e0:	f7ff fe77 	bl	80024d2 <LL_ADC_REG_IsConversionOngoing>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f040 839e 	bne.w	8002f28 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	2b05      	cmp	r3, #5
 80027f2:	d824      	bhi.n	800283e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	3b02      	subs	r3, #2
 80027fa:	2b03      	cmp	r3, #3
 80027fc:	d81b      	bhi.n	8002836 <HAL_ADC_ConfigChannel+0x86>
 80027fe:	a201      	add	r2, pc, #4	; (adr r2, 8002804 <HAL_ADC_ConfigChannel+0x54>)
 8002800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002804:	08002815 	.word	0x08002815
 8002808:	0800281d 	.word	0x0800281d
 800280c:	08002825 	.word	0x08002825
 8002810:	0800282d 	.word	0x0800282d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	220c      	movs	r2, #12
 8002818:	605a      	str	r2, [r3, #4]
          break;
 800281a:	e011      	b.n	8002840 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	2212      	movs	r2, #18
 8002820:	605a      	str	r2, [r3, #4]
          break;
 8002822:	e00d      	b.n	8002840 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	2218      	movs	r2, #24
 8002828:	605a      	str	r2, [r3, #4]
          break;
 800282a:	e009      	b.n	8002840 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002832:	605a      	str	r2, [r3, #4]
          break;
 8002834:	e004      	b.n	8002840 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	2206      	movs	r2, #6
 800283a:	605a      	str	r2, [r3, #4]
          break;
 800283c:	e000      	b.n	8002840 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800283e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6818      	ldr	r0, [r3, #0]
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	6859      	ldr	r1, [r3, #4]
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	461a      	mov	r2, r3
 800284e:	f7ff fd64 	bl	800231a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff fe3b 	bl	80024d2 <LL_ADC_REG_IsConversionOngoing>
 800285c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff fe47 	bl	80024f8 <LL_ADC_INJ_IsConversionOngoing>
 800286a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800286e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002872:	2b00      	cmp	r3, #0
 8002874:	f040 81a6 	bne.w	8002bc4 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002878:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800287c:	2b00      	cmp	r3, #0
 800287e:	f040 81a1 	bne.w	8002bc4 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6818      	ldr	r0, [r3, #0]
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	6819      	ldr	r1, [r3, #0]
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	461a      	mov	r2, r3
 8002890:	f7ff fd6f 	bl	8002372 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	695a      	ldr	r2, [r3, #20]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	08db      	lsrs	r3, r3, #3
 80028a0:	f003 0303 	and.w	r3, r3, #3
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	d00a      	beq.n	80028cc <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6818      	ldr	r0, [r3, #0]
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	6919      	ldr	r1, [r3, #16]
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80028c6:	f7ff fcd3 	bl	8002270 <LL_ADC_SetOffset>
 80028ca:	e17b      	b.n	8002bc4 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2100      	movs	r1, #0
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff fcf0 	bl	80022b8 <LL_ADC_GetOffsetChannel>
 80028d8:	4603      	mov	r3, r0
 80028da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d10a      	bne.n	80028f8 <HAL_ADC_ConfigChannel+0x148>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2100      	movs	r1, #0
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff fce5 	bl	80022b8 <LL_ADC_GetOffsetChannel>
 80028ee:	4603      	mov	r3, r0
 80028f0:	0e9b      	lsrs	r3, r3, #26
 80028f2:	f003 021f 	and.w	r2, r3, #31
 80028f6:	e01e      	b.n	8002936 <HAL_ADC_ConfigChannel+0x186>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2100      	movs	r1, #0
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff fcda 	bl	80022b8 <LL_ADC_GetOffsetChannel>
 8002904:	4603      	mov	r3, r0
 8002906:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800290e:	fa93 f3a3 	rbit	r3, r3
 8002912:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002916:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800291a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800291e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002926:	2320      	movs	r3, #32
 8002928:	e004      	b.n	8002934 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800292a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800292e:	fab3 f383 	clz	r3, r3
 8002932:	b2db      	uxtb	r3, r3
 8002934:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800293e:	2b00      	cmp	r3, #0
 8002940:	d105      	bne.n	800294e <HAL_ADC_ConfigChannel+0x19e>
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	0e9b      	lsrs	r3, r3, #26
 8002948:	f003 031f 	and.w	r3, r3, #31
 800294c:	e018      	b.n	8002980 <HAL_ADC_ConfigChannel+0x1d0>
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002956:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800295a:	fa93 f3a3 	rbit	r3, r3
 800295e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002962:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002966:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800296a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002972:	2320      	movs	r3, #32
 8002974:	e004      	b.n	8002980 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002976:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800297a:	fab3 f383 	clz	r3, r3
 800297e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002980:	429a      	cmp	r2, r3
 8002982:	d106      	bne.n	8002992 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2200      	movs	r2, #0
 800298a:	2100      	movs	r1, #0
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff fca9 	bl	80022e4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2101      	movs	r1, #1
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff fc8d 	bl	80022b8 <LL_ADC_GetOffsetChannel>
 800299e:	4603      	mov	r3, r0
 80029a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d10a      	bne.n	80029be <HAL_ADC_ConfigChannel+0x20e>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2101      	movs	r1, #1
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff fc82 	bl	80022b8 <LL_ADC_GetOffsetChannel>
 80029b4:	4603      	mov	r3, r0
 80029b6:	0e9b      	lsrs	r3, r3, #26
 80029b8:	f003 021f 	and.w	r2, r3, #31
 80029bc:	e01e      	b.n	80029fc <HAL_ADC_ConfigChannel+0x24c>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2101      	movs	r1, #1
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff fc77 	bl	80022b8 <LL_ADC_GetOffsetChannel>
 80029ca:	4603      	mov	r3, r0
 80029cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80029d4:	fa93 f3a3 	rbit	r3, r3
 80029d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80029dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80029e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80029e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d101      	bne.n	80029f0 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80029ec:	2320      	movs	r3, #32
 80029ee:	e004      	b.n	80029fa <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80029f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80029f4:	fab3 f383 	clz	r3, r3
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d105      	bne.n	8002a14 <HAL_ADC_ConfigChannel+0x264>
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	0e9b      	lsrs	r3, r3, #26
 8002a0e:	f003 031f 	and.w	r3, r3, #31
 8002a12:	e018      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x296>
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a20:	fa93 f3a3 	rbit	r3, r3
 8002a24:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002a28:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002a2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002a30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d101      	bne.n	8002a3c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002a38:	2320      	movs	r3, #32
 8002a3a:	e004      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002a3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a40:	fab3 f383 	clz	r3, r3
 8002a44:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d106      	bne.n	8002a58 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	2101      	movs	r1, #1
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7ff fc46 	bl	80022e4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2102      	movs	r1, #2
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7ff fc2a 	bl	80022b8 <LL_ADC_GetOffsetChannel>
 8002a64:	4603      	mov	r3, r0
 8002a66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d10a      	bne.n	8002a84 <HAL_ADC_ConfigChannel+0x2d4>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2102      	movs	r1, #2
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7ff fc1f 	bl	80022b8 <LL_ADC_GetOffsetChannel>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	0e9b      	lsrs	r3, r3, #26
 8002a7e:	f003 021f 	and.w	r2, r3, #31
 8002a82:	e01e      	b.n	8002ac2 <HAL_ADC_ConfigChannel+0x312>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2102      	movs	r1, #2
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7ff fc14 	bl	80022b8 <LL_ADC_GetOffsetChannel>
 8002a90:	4603      	mov	r3, r0
 8002a92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a9a:	fa93 f3a3 	rbit	r3, r3
 8002a9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002aa2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002aa6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002aaa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002ab2:	2320      	movs	r3, #32
 8002ab4:	e004      	b.n	8002ac0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002ab6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002aba:	fab3 f383 	clz	r3, r3
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d105      	bne.n	8002ada <HAL_ADC_ConfigChannel+0x32a>
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	0e9b      	lsrs	r3, r3, #26
 8002ad4:	f003 031f 	and.w	r3, r3, #31
 8002ad8:	e016      	b.n	8002b08 <HAL_ADC_ConfigChannel+0x358>
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ae6:	fa93 f3a3 	rbit	r3, r3
 8002aea:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002aec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002aee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002af2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d101      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002afa:	2320      	movs	r3, #32
 8002afc:	e004      	b.n	8002b08 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002afe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b02:	fab3 f383 	clz	r3, r3
 8002b06:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d106      	bne.n	8002b1a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2200      	movs	r2, #0
 8002b12:	2102      	movs	r1, #2
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff fbe5 	bl	80022e4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2103      	movs	r1, #3
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff fbc9 	bl	80022b8 <LL_ADC_GetOffsetChannel>
 8002b26:	4603      	mov	r3, r0
 8002b28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d10a      	bne.n	8002b46 <HAL_ADC_ConfigChannel+0x396>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2103      	movs	r1, #3
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff fbbe 	bl	80022b8 <LL_ADC_GetOffsetChannel>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	0e9b      	lsrs	r3, r3, #26
 8002b40:	f003 021f 	and.w	r2, r3, #31
 8002b44:	e017      	b.n	8002b76 <HAL_ADC_ConfigChannel+0x3c6>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2103      	movs	r1, #3
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff fbb3 	bl	80022b8 <LL_ADC_GetOffsetChannel>
 8002b52:	4603      	mov	r3, r0
 8002b54:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b58:	fa93 f3a3 	rbit	r3, r3
 8002b5c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002b5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b60:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002b62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d101      	bne.n	8002b6c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002b68:	2320      	movs	r3, #32
 8002b6a:	e003      	b.n	8002b74 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002b6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b6e:	fab3 f383 	clz	r3, r3
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d105      	bne.n	8002b8e <HAL_ADC_ConfigChannel+0x3de>
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	0e9b      	lsrs	r3, r3, #26
 8002b88:	f003 031f 	and.w	r3, r3, #31
 8002b8c:	e011      	b.n	8002bb2 <HAL_ADC_ConfigChannel+0x402>
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b96:	fa93 f3a3 	rbit	r3, r3
 8002b9a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002b9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b9e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002ba0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002ba6:	2320      	movs	r3, #32
 8002ba8:	e003      	b.n	8002bb2 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002baa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bac:	fab3 f383 	clz	r3, r3
 8002bb0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d106      	bne.n	8002bc4 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	2103      	movs	r1, #3
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff fb90 	bl	80022e4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff fc6f 	bl	80024ac <LL_ADC_IsEnabled>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f040 813f 	bne.w	8002e54 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6818      	ldr	r0, [r3, #0]
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	6819      	ldr	r1, [r3, #0]
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	461a      	mov	r2, r3
 8002be4:	f7ff fbf0 	bl	80023c8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	4a8e      	ldr	r2, [pc, #568]	; (8002e28 <HAL_ADC_ConfigChannel+0x678>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	f040 8130 	bne.w	8002e54 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d10b      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x46c>
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	0e9b      	lsrs	r3, r3, #26
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	f003 031f 	and.w	r3, r3, #31
 8002c10:	2b09      	cmp	r3, #9
 8002c12:	bf94      	ite	ls
 8002c14:	2301      	movls	r3, #1
 8002c16:	2300      	movhi	r3, #0
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	e019      	b.n	8002c50 <HAL_ADC_ConfigChannel+0x4a0>
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c24:	fa93 f3a3 	rbit	r3, r3
 8002c28:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002c2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c2c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002c2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d101      	bne.n	8002c38 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002c34:	2320      	movs	r3, #32
 8002c36:	e003      	b.n	8002c40 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002c38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c3a:	fab3 f383 	clz	r3, r3
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	3301      	adds	r3, #1
 8002c42:	f003 031f 	and.w	r3, r3, #31
 8002c46:	2b09      	cmp	r3, #9
 8002c48:	bf94      	ite	ls
 8002c4a:	2301      	movls	r3, #1
 8002c4c:	2300      	movhi	r3, #0
 8002c4e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d079      	beq.n	8002d48 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d107      	bne.n	8002c70 <HAL_ADC_ConfigChannel+0x4c0>
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	0e9b      	lsrs	r3, r3, #26
 8002c66:	3301      	adds	r3, #1
 8002c68:	069b      	lsls	r3, r3, #26
 8002c6a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c6e:	e015      	b.n	8002c9c <HAL_ADC_ConfigChannel+0x4ec>
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c78:	fa93 f3a3 	rbit	r3, r3
 8002c7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002c7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c80:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002c82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d101      	bne.n	8002c8c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002c88:	2320      	movs	r3, #32
 8002c8a:	e003      	b.n	8002c94 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002c8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c8e:	fab3 f383 	clz	r3, r3
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	3301      	adds	r3, #1
 8002c96:	069b      	lsls	r3, r3, #26
 8002c98:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d109      	bne.n	8002cbc <HAL_ADC_ConfigChannel+0x50c>
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	0e9b      	lsrs	r3, r3, #26
 8002cae:	3301      	adds	r3, #1
 8002cb0:	f003 031f 	and.w	r3, r3, #31
 8002cb4:	2101      	movs	r1, #1
 8002cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cba:	e017      	b.n	8002cec <HAL_ADC_ConfigChannel+0x53c>
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cc4:	fa93 f3a3 	rbit	r3, r3
 8002cc8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002cca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ccc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002cce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d101      	bne.n	8002cd8 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002cd4:	2320      	movs	r3, #32
 8002cd6:	e003      	b.n	8002ce0 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002cd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cda:	fab3 f383 	clz	r3, r3
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	f003 031f 	and.w	r3, r3, #31
 8002ce6:	2101      	movs	r1, #1
 8002ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cec:	ea42 0103 	orr.w	r1, r2, r3
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d10a      	bne.n	8002d12 <HAL_ADC_ConfigChannel+0x562>
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	0e9b      	lsrs	r3, r3, #26
 8002d02:	3301      	adds	r3, #1
 8002d04:	f003 021f 	and.w	r2, r3, #31
 8002d08:	4613      	mov	r3, r2
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	4413      	add	r3, r2
 8002d0e:	051b      	lsls	r3, r3, #20
 8002d10:	e018      	b.n	8002d44 <HAL_ADC_ConfigChannel+0x594>
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d1a:	fa93 f3a3 	rbit	r3, r3
 8002d1e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d22:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002d24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002d2a:	2320      	movs	r3, #32
 8002d2c:	e003      	b.n	8002d36 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d30:	fab3 f383 	clz	r3, r3
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	3301      	adds	r3, #1
 8002d38:	f003 021f 	and.w	r2, r3, #31
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	4413      	add	r3, r2
 8002d42:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d44:	430b      	orrs	r3, r1
 8002d46:	e080      	b.n	8002e4a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d107      	bne.n	8002d64 <HAL_ADC_ConfigChannel+0x5b4>
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	0e9b      	lsrs	r3, r3, #26
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	069b      	lsls	r3, r3, #26
 8002d5e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d62:	e015      	b.n	8002d90 <HAL_ADC_ConfigChannel+0x5e0>
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d6c:	fa93 f3a3 	rbit	r3, r3
 8002d70:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d74:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d101      	bne.n	8002d80 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002d7c:	2320      	movs	r3, #32
 8002d7e:	e003      	b.n	8002d88 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d82:	fab3 f383 	clz	r3, r3
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	3301      	adds	r3, #1
 8002d8a:	069b      	lsls	r3, r3, #26
 8002d8c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d109      	bne.n	8002db0 <HAL_ADC_ConfigChannel+0x600>
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	0e9b      	lsrs	r3, r3, #26
 8002da2:	3301      	adds	r3, #1
 8002da4:	f003 031f 	and.w	r3, r3, #31
 8002da8:	2101      	movs	r1, #1
 8002daa:	fa01 f303 	lsl.w	r3, r1, r3
 8002dae:	e017      	b.n	8002de0 <HAL_ADC_ConfigChannel+0x630>
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db6:	6a3b      	ldr	r3, [r7, #32]
 8002db8:	fa93 f3a3 	rbit	r3, r3
 8002dbc:	61fb      	str	r3, [r7, #28]
  return result;
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d101      	bne.n	8002dcc <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002dc8:	2320      	movs	r3, #32
 8002dca:	e003      	b.n	8002dd4 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dce:	fab3 f383 	clz	r3, r3
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	f003 031f 	and.w	r3, r3, #31
 8002dda:	2101      	movs	r1, #1
 8002ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8002de0:	ea42 0103 	orr.w	r1, r2, r3
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d10d      	bne.n	8002e0c <HAL_ADC_ConfigChannel+0x65c>
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	0e9b      	lsrs	r3, r3, #26
 8002df6:	3301      	adds	r3, #1
 8002df8:	f003 021f 	and.w	r2, r3, #31
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	4413      	add	r3, r2
 8002e02:	3b1e      	subs	r3, #30
 8002e04:	051b      	lsls	r3, r3, #20
 8002e06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e0a:	e01d      	b.n	8002e48 <HAL_ADC_ConfigChannel+0x698>
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	fa93 f3a3 	rbit	r3, r3
 8002e18:	613b      	str	r3, [r7, #16]
  return result;
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d103      	bne.n	8002e2c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002e24:	2320      	movs	r3, #32
 8002e26:	e005      	b.n	8002e34 <HAL_ADC_ConfigChannel+0x684>
 8002e28:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	fab3 f383 	clz	r3, r3
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	3301      	adds	r3, #1
 8002e36:	f003 021f 	and.w	r2, r3, #31
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	4413      	add	r3, r2
 8002e40:	3b1e      	subs	r3, #30
 8002e42:	051b      	lsls	r3, r3, #20
 8002e44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e48:	430b      	orrs	r3, r1
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	6892      	ldr	r2, [r2, #8]
 8002e4e:	4619      	mov	r1, r3
 8002e50:	f7ff fa8f 	bl	8002372 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	4b3d      	ldr	r3, [pc, #244]	; (8002f50 <HAL_ADC_ConfigChannel+0x7a0>)
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d06c      	beq.n	8002f3a <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e60:	483c      	ldr	r0, [pc, #240]	; (8002f54 <HAL_ADC_ConfigChannel+0x7a4>)
 8002e62:	f7ff f9f7 	bl	8002254 <LL_ADC_GetCommonPathInternalCh>
 8002e66:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a3a      	ldr	r2, [pc, #232]	; (8002f58 <HAL_ADC_ConfigChannel+0x7a8>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d127      	bne.n	8002ec4 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002e74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d121      	bne.n	8002ec4 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a35      	ldr	r2, [pc, #212]	; (8002f5c <HAL_ADC_ConfigChannel+0x7ac>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d157      	bne.n	8002f3a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e8e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e92:	4619      	mov	r1, r3
 8002e94:	482f      	ldr	r0, [pc, #188]	; (8002f54 <HAL_ADC_ConfigChannel+0x7a4>)
 8002e96:	f7ff f9ca 	bl	800222e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e9a:	4b31      	ldr	r3, [pc, #196]	; (8002f60 <HAL_ADC_ConfigChannel+0x7b0>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	099b      	lsrs	r3, r3, #6
 8002ea0:	4a30      	ldr	r2, [pc, #192]	; (8002f64 <HAL_ADC_ConfigChannel+0x7b4>)
 8002ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea6:	099b      	lsrs	r3, r3, #6
 8002ea8:	1c5a      	adds	r2, r3, #1
 8002eaa:	4613      	mov	r3, r2
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	4413      	add	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002eb4:	e002      	b.n	8002ebc <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	3b01      	subs	r3, #1
 8002eba:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1f9      	bne.n	8002eb6 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ec2:	e03a      	b.n	8002f3a <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a27      	ldr	r2, [pc, #156]	; (8002f68 <HAL_ADC_ConfigChannel+0x7b8>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d113      	bne.n	8002ef6 <HAL_ADC_ConfigChannel+0x746>
 8002ece:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ed2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10d      	bne.n	8002ef6 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a1f      	ldr	r2, [pc, #124]	; (8002f5c <HAL_ADC_ConfigChannel+0x7ac>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d12a      	bne.n	8002f3a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ee4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ee8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002eec:	4619      	mov	r1, r3
 8002eee:	4819      	ldr	r0, [pc, #100]	; (8002f54 <HAL_ADC_ConfigChannel+0x7a4>)
 8002ef0:	f7ff f99d 	bl	800222e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ef4:	e021      	b.n	8002f3a <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a1c      	ldr	r2, [pc, #112]	; (8002f6c <HAL_ADC_ConfigChannel+0x7bc>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d11c      	bne.n	8002f3a <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002f00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d116      	bne.n	8002f3a <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a12      	ldr	r2, [pc, #72]	; (8002f5c <HAL_ADC_ConfigChannel+0x7ac>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d111      	bne.n	8002f3a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f1a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f1e:	4619      	mov	r1, r3
 8002f20:	480c      	ldr	r0, [pc, #48]	; (8002f54 <HAL_ADC_ConfigChannel+0x7a4>)
 8002f22:	f7ff f984 	bl	800222e <LL_ADC_SetCommonPathInternalCh>
 8002f26:	e008      	b.n	8002f3a <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f2c:	f043 0220 	orr.w	r2, r3, #32
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002f42:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	37d8      	adds	r7, #216	; 0xd8
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	80080000 	.word	0x80080000
 8002f54:	50040300 	.word	0x50040300
 8002f58:	c7520000 	.word	0xc7520000
 8002f5c:	50040000 	.word	0x50040000
 8002f60:	20000000 	.word	0x20000000
 8002f64:	053e2d63 	.word	0x053e2d63
 8002f68:	cb840000 	.word	0xcb840000
 8002f6c:	80000001 	.word	0x80000001

08002f70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f003 0307 	and.w	r3, r3, #7
 8002f7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f80:	4b0c      	ldr	r3, [pc, #48]	; (8002fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f86:	68ba      	ldr	r2, [r7, #8]
 8002f88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fa2:	4a04      	ldr	r2, [pc, #16]	; (8002fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	60d3      	str	r3, [r2, #12]
}
 8002fa8:	bf00      	nop
 8002faa:	3714      	adds	r7, #20
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr
 8002fb4:	e000ed00 	.word	0xe000ed00

08002fb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fbc:	4b04      	ldr	r3, [pc, #16]	; (8002fd0 <__NVIC_GetPriorityGrouping+0x18>)
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	0a1b      	lsrs	r3, r3, #8
 8002fc2:	f003 0307 	and.w	r3, r3, #7
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	e000ed00 	.word	0xe000ed00

08002fd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	4603      	mov	r3, r0
 8002fdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	db0b      	blt.n	8002ffe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fe6:	79fb      	ldrb	r3, [r7, #7]
 8002fe8:	f003 021f 	and.w	r2, r3, #31
 8002fec:	4907      	ldr	r1, [pc, #28]	; (800300c <__NVIC_EnableIRQ+0x38>)
 8002fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff2:	095b      	lsrs	r3, r3, #5
 8002ff4:	2001      	movs	r0, #1
 8002ff6:	fa00 f202 	lsl.w	r2, r0, r2
 8002ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ffe:	bf00      	nop
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	e000e100 	.word	0xe000e100

08003010 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	4603      	mov	r3, r0
 8003018:	6039      	str	r1, [r7, #0]
 800301a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800301c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003020:	2b00      	cmp	r3, #0
 8003022:	db0a      	blt.n	800303a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	b2da      	uxtb	r2, r3
 8003028:	490c      	ldr	r1, [pc, #48]	; (800305c <__NVIC_SetPriority+0x4c>)
 800302a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302e:	0112      	lsls	r2, r2, #4
 8003030:	b2d2      	uxtb	r2, r2
 8003032:	440b      	add	r3, r1
 8003034:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003038:	e00a      	b.n	8003050 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	b2da      	uxtb	r2, r3
 800303e:	4908      	ldr	r1, [pc, #32]	; (8003060 <__NVIC_SetPriority+0x50>)
 8003040:	79fb      	ldrb	r3, [r7, #7]
 8003042:	f003 030f 	and.w	r3, r3, #15
 8003046:	3b04      	subs	r3, #4
 8003048:	0112      	lsls	r2, r2, #4
 800304a:	b2d2      	uxtb	r2, r2
 800304c:	440b      	add	r3, r1
 800304e:	761a      	strb	r2, [r3, #24]
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	e000e100 	.word	0xe000e100
 8003060:	e000ed00 	.word	0xe000ed00

08003064 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003064:	b480      	push	{r7}
 8003066:	b089      	sub	sp, #36	; 0x24
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f003 0307 	and.w	r3, r3, #7
 8003076:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	f1c3 0307 	rsb	r3, r3, #7
 800307e:	2b04      	cmp	r3, #4
 8003080:	bf28      	it	cs
 8003082:	2304      	movcs	r3, #4
 8003084:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	3304      	adds	r3, #4
 800308a:	2b06      	cmp	r3, #6
 800308c:	d902      	bls.n	8003094 <NVIC_EncodePriority+0x30>
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	3b03      	subs	r3, #3
 8003092:	e000      	b.n	8003096 <NVIC_EncodePriority+0x32>
 8003094:	2300      	movs	r3, #0
 8003096:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003098:	f04f 32ff 	mov.w	r2, #4294967295
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	fa02 f303 	lsl.w	r3, r2, r3
 80030a2:	43da      	mvns	r2, r3
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	401a      	ands	r2, r3
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030ac:	f04f 31ff 	mov.w	r1, #4294967295
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	fa01 f303 	lsl.w	r3, r1, r3
 80030b6:	43d9      	mvns	r1, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030bc:	4313      	orrs	r3, r2
         );
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3724      	adds	r7, #36	; 0x24
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
	...

080030cc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80030d0:	f3bf 8f4f 	dsb	sy
}
 80030d4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80030d6:	4b06      	ldr	r3, [pc, #24]	; (80030f0 <__NVIC_SystemReset+0x24>)
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80030de:	4904      	ldr	r1, [pc, #16]	; (80030f0 <__NVIC_SystemReset+0x24>)
 80030e0:	4b04      	ldr	r3, [pc, #16]	; (80030f4 <__NVIC_SystemReset+0x28>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80030e6:	f3bf 8f4f 	dsb	sy
}
 80030ea:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80030ec:	bf00      	nop
 80030ee:	e7fd      	b.n	80030ec <__NVIC_SystemReset+0x20>
 80030f0:	e000ed00 	.word	0xe000ed00
 80030f4:	05fa0004 	.word	0x05fa0004

080030f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f7ff ff35 	bl	8002f70 <__NVIC_SetPriorityGrouping>
}
 8003106:	bf00      	nop
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800310e:	b580      	push	{r7, lr}
 8003110:	b086      	sub	sp, #24
 8003112:	af00      	add	r7, sp, #0
 8003114:	4603      	mov	r3, r0
 8003116:	60b9      	str	r1, [r7, #8]
 8003118:	607a      	str	r2, [r7, #4]
 800311a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800311c:	2300      	movs	r3, #0
 800311e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003120:	f7ff ff4a 	bl	8002fb8 <__NVIC_GetPriorityGrouping>
 8003124:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	68b9      	ldr	r1, [r7, #8]
 800312a:	6978      	ldr	r0, [r7, #20]
 800312c:	f7ff ff9a 	bl	8003064 <NVIC_EncodePriority>
 8003130:	4602      	mov	r2, r0
 8003132:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003136:	4611      	mov	r1, r2
 8003138:	4618      	mov	r0, r3
 800313a:	f7ff ff69 	bl	8003010 <__NVIC_SetPriority>
}
 800313e:	bf00      	nop
 8003140:	3718      	adds	r7, #24
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b082      	sub	sp, #8
 800314a:	af00      	add	r7, sp, #0
 800314c:	4603      	mov	r3, r0
 800314e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003154:	4618      	mov	r0, r3
 8003156:	f7ff ff3d 	bl	8002fd4 <__NVIC_EnableIRQ>
}
 800315a:	bf00      	nop
 800315c:	3708      	adds	r7, #8
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8003166:	f7ff ffb1 	bl	80030cc <__NVIC_SystemReset>
	...

0800316c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e054      	b.n	8003228 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	7f5b      	ldrb	r3, [r3, #29]
 8003182:	b2db      	uxtb	r3, r3
 8003184:	2b00      	cmp	r3, #0
 8003186:	d105      	bne.n	8003194 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f7fe fcd2 	bl	8001b38 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2202      	movs	r2, #2
 8003198:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	791b      	ldrb	r3, [r3, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10c      	bne.n	80031bc <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a22      	ldr	r2, [pc, #136]	; (8003230 <HAL_CRC_Init+0xc4>)
 80031a8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	689a      	ldr	r2, [r3, #8]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f022 0218 	bic.w	r2, r2, #24
 80031b8:	609a      	str	r2, [r3, #8]
 80031ba:	e00c      	b.n	80031d6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6899      	ldr	r1, [r3, #8]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	461a      	mov	r2, r3
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 f834 	bl	8003234 <HAL_CRCEx_Polynomial_Set>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e028      	b.n	8003228 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	795b      	ldrb	r3, [r3, #5]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d105      	bne.n	80031ea <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f04f 32ff 	mov.w	r2, #4294967295
 80031e6:	611a      	str	r2, [r3, #16]
 80031e8:	e004      	b.n	80031f4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	6912      	ldr	r2, [r2, #16]
 80031f2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	695a      	ldr	r2, [r3, #20]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	430a      	orrs	r2, r1
 8003208:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	699a      	ldr	r2, [r3, #24]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	430a      	orrs	r2, r1
 800321e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	3708      	adds	r7, #8
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	04c11db7 	.word	0x04c11db7

08003234 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003234:	b480      	push	{r7}
 8003236:	b087      	sub	sp, #28
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003240:	2300      	movs	r3, #0
 8003242:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003244:	231f      	movs	r3, #31
 8003246:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003248:	bf00      	nop
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1e5a      	subs	r2, r3, #1
 800324e:	613a      	str	r2, [r7, #16]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d009      	beq.n	8003268 <HAL_CRCEx_Polynomial_Set+0x34>
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	f003 031f 	and.w	r3, r3, #31
 800325a:	68ba      	ldr	r2, [r7, #8]
 800325c:	fa22 f303 	lsr.w	r3, r2, r3
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	2b00      	cmp	r3, #0
 8003266:	d0f0      	beq.n	800324a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b18      	cmp	r3, #24
 800326c:	d846      	bhi.n	80032fc <HAL_CRCEx_Polynomial_Set+0xc8>
 800326e:	a201      	add	r2, pc, #4	; (adr r2, 8003274 <HAL_CRCEx_Polynomial_Set+0x40>)
 8003270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003274:	08003303 	.word	0x08003303
 8003278:	080032fd 	.word	0x080032fd
 800327c:	080032fd 	.word	0x080032fd
 8003280:	080032fd 	.word	0x080032fd
 8003284:	080032fd 	.word	0x080032fd
 8003288:	080032fd 	.word	0x080032fd
 800328c:	080032fd 	.word	0x080032fd
 8003290:	080032fd 	.word	0x080032fd
 8003294:	080032f1 	.word	0x080032f1
 8003298:	080032fd 	.word	0x080032fd
 800329c:	080032fd 	.word	0x080032fd
 80032a0:	080032fd 	.word	0x080032fd
 80032a4:	080032fd 	.word	0x080032fd
 80032a8:	080032fd 	.word	0x080032fd
 80032ac:	080032fd 	.word	0x080032fd
 80032b0:	080032fd 	.word	0x080032fd
 80032b4:	080032e5 	.word	0x080032e5
 80032b8:	080032fd 	.word	0x080032fd
 80032bc:	080032fd 	.word	0x080032fd
 80032c0:	080032fd 	.word	0x080032fd
 80032c4:	080032fd 	.word	0x080032fd
 80032c8:	080032fd 	.word	0x080032fd
 80032cc:	080032fd 	.word	0x080032fd
 80032d0:	080032fd 	.word	0x080032fd
 80032d4:	080032d9 	.word	0x080032d9
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	2b06      	cmp	r3, #6
 80032dc:	d913      	bls.n	8003306 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80032e2:	e010      	b.n	8003306 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	2b07      	cmp	r3, #7
 80032e8:	d90f      	bls.n	800330a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80032ee:	e00c      	b.n	800330a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	2b0f      	cmp	r3, #15
 80032f4:	d90b      	bls.n	800330e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80032fa:	e008      	b.n	800330e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	75fb      	strb	r3, [r7, #23]
      break;
 8003300:	e006      	b.n	8003310 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003302:	bf00      	nop
 8003304:	e004      	b.n	8003310 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003306:	bf00      	nop
 8003308:	e002      	b.n	8003310 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800330a:	bf00      	nop
 800330c:	e000      	b.n	8003310 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800330e:	bf00      	nop
  }
  if (status == HAL_OK)
 8003310:	7dfb      	ldrb	r3, [r7, #23]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10d      	bne.n	8003332 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68ba      	ldr	r2, [r7, #8]
 800331c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f023 0118 	bic.w	r1, r3, #24
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	430a      	orrs	r2, r1
 8003330:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003332:	7dfb      	ldrb	r3, [r7, #23]
}
 8003334:	4618      	mov	r0, r3
 8003336:	371c      	adds	r7, #28
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003340:	b480      	push	{r7}
 8003342:	b087      	sub	sp, #28
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800334a:	2300      	movs	r3, #0
 800334c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800334e:	e154      	b.n	80035fa <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	2101      	movs	r1, #1
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	fa01 f303 	lsl.w	r3, r1, r3
 800335c:	4013      	ands	r3, r2
 800335e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2b00      	cmp	r3, #0
 8003364:	f000 8146 	beq.w	80035f4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f003 0303 	and.w	r3, r3, #3
 8003370:	2b01      	cmp	r3, #1
 8003372:	d005      	beq.n	8003380 <HAL_GPIO_Init+0x40>
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f003 0303 	and.w	r3, r3, #3
 800337c:	2b02      	cmp	r3, #2
 800337e:	d130      	bne.n	80033e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	2203      	movs	r2, #3
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	43db      	mvns	r3, r3
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	4013      	ands	r3, r2
 8003396:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	68da      	ldr	r2, [r3, #12]
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	fa02 f303 	lsl.w	r3, r2, r3
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033b6:	2201      	movs	r2, #1
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	fa02 f303 	lsl.w	r3, r2, r3
 80033be:	43db      	mvns	r3, r3
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	4013      	ands	r3, r2
 80033c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	091b      	lsrs	r3, r3, #4
 80033cc:	f003 0201 	and.w	r2, r3, #1
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	fa02 f303 	lsl.w	r3, r2, r3
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	4313      	orrs	r3, r2
 80033da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	693a      	ldr	r2, [r7, #16]
 80033e0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f003 0303 	and.w	r3, r3, #3
 80033ea:	2b03      	cmp	r3, #3
 80033ec:	d017      	beq.n	800341e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	2203      	movs	r2, #3
 80033fa:	fa02 f303 	lsl.w	r3, r2, r3
 80033fe:	43db      	mvns	r3, r3
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	4013      	ands	r3, r2
 8003404:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	689a      	ldr	r2, [r3, #8]
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	fa02 f303 	lsl.w	r3, r2, r3
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	4313      	orrs	r3, r2
 8003416:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f003 0303 	and.w	r3, r3, #3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d123      	bne.n	8003472 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	08da      	lsrs	r2, r3, #3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	3208      	adds	r2, #8
 8003432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003436:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	f003 0307 	and.w	r3, r3, #7
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	220f      	movs	r2, #15
 8003442:	fa02 f303 	lsl.w	r3, r2, r3
 8003446:	43db      	mvns	r3, r3
 8003448:	693a      	ldr	r2, [r7, #16]
 800344a:	4013      	ands	r3, r2
 800344c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	691a      	ldr	r2, [r3, #16]
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	f003 0307 	and.w	r3, r3, #7
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	fa02 f303 	lsl.w	r3, r2, r3
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	4313      	orrs	r3, r2
 8003462:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	08da      	lsrs	r2, r3, #3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	3208      	adds	r2, #8
 800346c:	6939      	ldr	r1, [r7, #16]
 800346e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	2203      	movs	r2, #3
 800347e:	fa02 f303 	lsl.w	r3, r2, r3
 8003482:	43db      	mvns	r3, r3
 8003484:	693a      	ldr	r2, [r7, #16]
 8003486:	4013      	ands	r3, r2
 8003488:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f003 0203 	and.w	r2, r3, #3
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	fa02 f303 	lsl.w	r3, r2, r3
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	4313      	orrs	r3, r2
 800349e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f000 80a0 	beq.w	80035f4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034b4:	4b58      	ldr	r3, [pc, #352]	; (8003618 <HAL_GPIO_Init+0x2d8>)
 80034b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034b8:	4a57      	ldr	r2, [pc, #348]	; (8003618 <HAL_GPIO_Init+0x2d8>)
 80034ba:	f043 0301 	orr.w	r3, r3, #1
 80034be:	6613      	str	r3, [r2, #96]	; 0x60
 80034c0:	4b55      	ldr	r3, [pc, #340]	; (8003618 <HAL_GPIO_Init+0x2d8>)
 80034c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	60bb      	str	r3, [r7, #8]
 80034ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80034cc:	4a53      	ldr	r2, [pc, #332]	; (800361c <HAL_GPIO_Init+0x2dc>)
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	089b      	lsrs	r3, r3, #2
 80034d2:	3302      	adds	r3, #2
 80034d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f003 0303 	and.w	r3, r3, #3
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	220f      	movs	r2, #15
 80034e4:	fa02 f303 	lsl.w	r3, r2, r3
 80034e8:	43db      	mvns	r3, r3
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	4013      	ands	r3, r2
 80034ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80034f6:	d019      	beq.n	800352c <HAL_GPIO_Init+0x1ec>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a49      	ldr	r2, [pc, #292]	; (8003620 <HAL_GPIO_Init+0x2e0>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d013      	beq.n	8003528 <HAL_GPIO_Init+0x1e8>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a48      	ldr	r2, [pc, #288]	; (8003624 <HAL_GPIO_Init+0x2e4>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d00d      	beq.n	8003524 <HAL_GPIO_Init+0x1e4>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a47      	ldr	r2, [pc, #284]	; (8003628 <HAL_GPIO_Init+0x2e8>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d007      	beq.n	8003520 <HAL_GPIO_Init+0x1e0>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a46      	ldr	r2, [pc, #280]	; (800362c <HAL_GPIO_Init+0x2ec>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d101      	bne.n	800351c <HAL_GPIO_Init+0x1dc>
 8003518:	2304      	movs	r3, #4
 800351a:	e008      	b.n	800352e <HAL_GPIO_Init+0x1ee>
 800351c:	2307      	movs	r3, #7
 800351e:	e006      	b.n	800352e <HAL_GPIO_Init+0x1ee>
 8003520:	2303      	movs	r3, #3
 8003522:	e004      	b.n	800352e <HAL_GPIO_Init+0x1ee>
 8003524:	2302      	movs	r3, #2
 8003526:	e002      	b.n	800352e <HAL_GPIO_Init+0x1ee>
 8003528:	2301      	movs	r3, #1
 800352a:	e000      	b.n	800352e <HAL_GPIO_Init+0x1ee>
 800352c:	2300      	movs	r3, #0
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	f002 0203 	and.w	r2, r2, #3
 8003534:	0092      	lsls	r2, r2, #2
 8003536:	4093      	lsls	r3, r2
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	4313      	orrs	r3, r2
 800353c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800353e:	4937      	ldr	r1, [pc, #220]	; (800361c <HAL_GPIO_Init+0x2dc>)
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	089b      	lsrs	r3, r3, #2
 8003544:	3302      	adds	r3, #2
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800354c:	4b38      	ldr	r3, [pc, #224]	; (8003630 <HAL_GPIO_Init+0x2f0>)
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	43db      	mvns	r3, r3
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	4013      	ands	r3, r2
 800355a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d003      	beq.n	8003570 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003568:	693a      	ldr	r2, [r7, #16]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	4313      	orrs	r3, r2
 800356e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003570:	4a2f      	ldr	r2, [pc, #188]	; (8003630 <HAL_GPIO_Init+0x2f0>)
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003576:	4b2e      	ldr	r3, [pc, #184]	; (8003630 <HAL_GPIO_Init+0x2f0>)
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	43db      	mvns	r3, r3
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	4013      	ands	r3, r2
 8003584:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d003      	beq.n	800359a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	4313      	orrs	r3, r2
 8003598:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800359a:	4a25      	ldr	r2, [pc, #148]	; (8003630 <HAL_GPIO_Init+0x2f0>)
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80035a0:	4b23      	ldr	r3, [pc, #140]	; (8003630 <HAL_GPIO_Init+0x2f0>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	43db      	mvns	r3, r3
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	4013      	ands	r3, r2
 80035ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d003      	beq.n	80035c4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80035c4:	4a1a      	ldr	r2, [pc, #104]	; (8003630 <HAL_GPIO_Init+0x2f0>)
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80035ca:	4b19      	ldr	r3, [pc, #100]	; (8003630 <HAL_GPIO_Init+0x2f0>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	43db      	mvns	r3, r3
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	4013      	ands	r3, r2
 80035d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d003      	beq.n	80035ee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80035ee:	4a10      	ldr	r2, [pc, #64]	; (8003630 <HAL_GPIO_Init+0x2f0>)
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	3301      	adds	r3, #1
 80035f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	fa22 f303 	lsr.w	r3, r2, r3
 8003604:	2b00      	cmp	r3, #0
 8003606:	f47f aea3 	bne.w	8003350 <HAL_GPIO_Init+0x10>
  }
}
 800360a:	bf00      	nop
 800360c:	bf00      	nop
 800360e:	371c      	adds	r7, #28
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr
 8003618:	40021000 	.word	0x40021000
 800361c:	40010000 	.word	0x40010000
 8003620:	48000400 	.word	0x48000400
 8003624:	48000800 	.word	0x48000800
 8003628:	48000c00 	.word	0x48000c00
 800362c:	48001000 	.word	0x48001000
 8003630:	40010400 	.word	0x40010400

08003634 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	460b      	mov	r3, r1
 800363e:	807b      	strh	r3, [r7, #2]
 8003640:	4613      	mov	r3, r2
 8003642:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003644:	787b      	ldrb	r3, [r7, #1]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d003      	beq.n	8003652 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800364a:	887a      	ldrh	r2, [r7, #2]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003650:	e002      	b.n	8003658 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003652:	887a      	ldrh	r2, [r7, #2]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d101      	bne.n	8003676 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e081      	b.n	800377a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2b00      	cmp	r3, #0
 8003680:	d106      	bne.n	8003690 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f7fe fa74 	bl	8001b78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2224      	movs	r2, #36	; 0x24
 8003694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f022 0201 	bic.w	r2, r2, #1
 80036a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685a      	ldr	r2, [r3, #4]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036b4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	689a      	ldr	r2, [r3, #8]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036c4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d107      	bne.n	80036de <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689a      	ldr	r2, [r3, #8]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036da:	609a      	str	r2, [r3, #8]
 80036dc:	e006      	b.n	80036ec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	689a      	ldr	r2, [r3, #8]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80036ea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d104      	bne.n	80036fe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	6812      	ldr	r2, [r2, #0]
 8003708:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800370c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003710:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68da      	ldr	r2, [r3, #12]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003720:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	691a      	ldr	r2, [r3, #16]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	430a      	orrs	r2, r1
 800373a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	69d9      	ldr	r1, [r3, #28]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a1a      	ldr	r2, [r3, #32]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	430a      	orrs	r2, r1
 800374a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f042 0201 	orr.w	r2, r2, #1
 800375a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2220      	movs	r2, #32
 8003766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003782:	b480      	push	{r7}
 8003784:	b083      	sub	sp, #12
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
 800378a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b20      	cmp	r3, #32
 8003796:	d138      	bne.n	800380a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d101      	bne.n	80037a6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80037a2:	2302      	movs	r3, #2
 80037a4:	e032      	b.n	800380c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2224      	movs	r2, #36	; 0x24
 80037b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 0201 	bic.w	r2, r2, #1
 80037c4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80037d4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	6819      	ldr	r1, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	683a      	ldr	r2, [r7, #0]
 80037e2:	430a      	orrs	r2, r1
 80037e4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f042 0201 	orr.w	r2, r2, #1
 80037f4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2220      	movs	r2, #32
 80037fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003806:	2300      	movs	r3, #0
 8003808:	e000      	b.n	800380c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800380a:	2302      	movs	r3, #2
  }
}
 800380c:	4618      	mov	r0, r3
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003828:	b2db      	uxtb	r3, r3
 800382a:	2b20      	cmp	r3, #32
 800382c:	d139      	bne.n	80038a2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003834:	2b01      	cmp	r3, #1
 8003836:	d101      	bne.n	800383c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003838:	2302      	movs	r3, #2
 800383a:	e033      	b.n	80038a4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2224      	movs	r2, #36	; 0x24
 8003848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f022 0201 	bic.w	r2, r2, #1
 800385a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800386a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	021b      	lsls	r3, r3, #8
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	4313      	orrs	r3, r2
 8003874:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f042 0201 	orr.w	r2, r2, #1
 800388c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2220      	movs	r2, #32
 8003892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800389e:	2300      	movs	r3, #0
 80038a0:	e000      	b.n	80038a4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80038a2:	2302      	movs	r3, #2
  }
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3714      	adds	r7, #20
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80038b4:	4b04      	ldr	r3, [pc, #16]	; (80038c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80038bc:	4618      	mov	r0, r3
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	40007000 	.word	0x40007000

080038cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038da:	d130      	bne.n	800393e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80038dc:	4b23      	ldr	r3, [pc, #140]	; (800396c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80038e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038e8:	d038      	beq.n	800395c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80038ea:	4b20      	ldr	r3, [pc, #128]	; (800396c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038f2:	4a1e      	ldr	r2, [pc, #120]	; (800396c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038f8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80038fa:	4b1d      	ldr	r3, [pc, #116]	; (8003970 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2232      	movs	r2, #50	; 0x32
 8003900:	fb02 f303 	mul.w	r3, r2, r3
 8003904:	4a1b      	ldr	r2, [pc, #108]	; (8003974 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003906:	fba2 2303 	umull	r2, r3, r2, r3
 800390a:	0c9b      	lsrs	r3, r3, #18
 800390c:	3301      	adds	r3, #1
 800390e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003910:	e002      	b.n	8003918 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	3b01      	subs	r3, #1
 8003916:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003918:	4b14      	ldr	r3, [pc, #80]	; (800396c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003920:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003924:	d102      	bne.n	800392c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1f2      	bne.n	8003912 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800392c:	4b0f      	ldr	r3, [pc, #60]	; (800396c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800392e:	695b      	ldr	r3, [r3, #20]
 8003930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003934:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003938:	d110      	bne.n	800395c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e00f      	b.n	800395e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800393e:	4b0b      	ldr	r3, [pc, #44]	; (800396c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003946:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800394a:	d007      	beq.n	800395c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800394c:	4b07      	ldr	r3, [pc, #28]	; (800396c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003954:	4a05      	ldr	r2, [pc, #20]	; (800396c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003956:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800395a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3714      	adds	r7, #20
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	40007000 	.word	0x40007000
 8003970:	20000000 	.word	0x20000000
 8003974:	431bde83 	.word	0x431bde83

08003978 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b088      	sub	sp, #32
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d102      	bne.n	800398c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	f000 bc02 	b.w	8004190 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800398c:	4b96      	ldr	r3, [pc, #600]	; (8003be8 <HAL_RCC_OscConfig+0x270>)
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f003 030c 	and.w	r3, r3, #12
 8003994:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003996:	4b94      	ldr	r3, [pc, #592]	; (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	f003 0303 	and.w	r3, r3, #3
 800399e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0310 	and.w	r3, r3, #16
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f000 80e4 	beq.w	8003b76 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d007      	beq.n	80039c4 <HAL_RCC_OscConfig+0x4c>
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	2b0c      	cmp	r3, #12
 80039b8:	f040 808b 	bne.w	8003ad2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	f040 8087 	bne.w	8003ad2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039c4:	4b88      	ldr	r3, [pc, #544]	; (8003be8 <HAL_RCC_OscConfig+0x270>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d005      	beq.n	80039dc <HAL_RCC_OscConfig+0x64>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	699b      	ldr	r3, [r3, #24]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d101      	bne.n	80039dc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e3d9      	b.n	8004190 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a1a      	ldr	r2, [r3, #32]
 80039e0:	4b81      	ldr	r3, [pc, #516]	; (8003be8 <HAL_RCC_OscConfig+0x270>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0308 	and.w	r3, r3, #8
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d004      	beq.n	80039f6 <HAL_RCC_OscConfig+0x7e>
 80039ec:	4b7e      	ldr	r3, [pc, #504]	; (8003be8 <HAL_RCC_OscConfig+0x270>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039f4:	e005      	b.n	8003a02 <HAL_RCC_OscConfig+0x8a>
 80039f6:	4b7c      	ldr	r3, [pc, #496]	; (8003be8 <HAL_RCC_OscConfig+0x270>)
 80039f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039fc:	091b      	lsrs	r3, r3, #4
 80039fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d223      	bcs.n	8003a4e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f000 fdbe 	bl	800458c <RCC_SetFlashLatencyFromMSIRange>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e3ba      	b.n	8004190 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a1a:	4b73      	ldr	r3, [pc, #460]	; (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a72      	ldr	r2, [pc, #456]	; (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003a20:	f043 0308 	orr.w	r3, r3, #8
 8003a24:	6013      	str	r3, [r2, #0]
 8003a26:	4b70      	ldr	r3, [pc, #448]	; (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	496d      	ldr	r1, [pc, #436]	; (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a38:	4b6b      	ldr	r3, [pc, #428]	; (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	69db      	ldr	r3, [r3, #28]
 8003a44:	021b      	lsls	r3, r3, #8
 8003a46:	4968      	ldr	r1, [pc, #416]	; (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	604b      	str	r3, [r1, #4]
 8003a4c:	e025      	b.n	8003a9a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a4e:	4b66      	ldr	r3, [pc, #408]	; (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a65      	ldr	r2, [pc, #404]	; (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003a54:	f043 0308 	orr.w	r3, r3, #8
 8003a58:	6013      	str	r3, [r2, #0]
 8003a5a:	4b63      	ldr	r3, [pc, #396]	; (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a1b      	ldr	r3, [r3, #32]
 8003a66:	4960      	ldr	r1, [pc, #384]	; (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a6c:	4b5e      	ldr	r3, [pc, #376]	; (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	69db      	ldr	r3, [r3, #28]
 8003a78:	021b      	lsls	r3, r3, #8
 8003a7a:	495b      	ldr	r1, [pc, #364]	; (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d109      	bne.n	8003a9a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f000 fd7e 	bl	800458c <RCC_SetFlashLatencyFromMSIRange>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e37a      	b.n	8004190 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a9a:	f000 fc81 	bl	80043a0 <HAL_RCC_GetSysClockFreq>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	4b51      	ldr	r3, [pc, #324]	; (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	091b      	lsrs	r3, r3, #4
 8003aa6:	f003 030f 	and.w	r3, r3, #15
 8003aaa:	4950      	ldr	r1, [pc, #320]	; (8003bec <HAL_RCC_OscConfig+0x274>)
 8003aac:	5ccb      	ldrb	r3, [r1, r3]
 8003aae:	f003 031f 	and.w	r3, r3, #31
 8003ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ab6:	4a4e      	ldr	r2, [pc, #312]	; (8003bf0 <HAL_RCC_OscConfig+0x278>)
 8003ab8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003aba:	4b4e      	ldr	r3, [pc, #312]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7fe fa48 	bl	8001f54 <HAL_InitTick>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003ac8:	7bfb      	ldrb	r3, [r7, #15]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d052      	beq.n	8003b74 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003ace:	7bfb      	ldrb	r3, [r7, #15]
 8003ad0:	e35e      	b.n	8004190 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d032      	beq.n	8003b40 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003ada:	4b43      	ldr	r3, [pc, #268]	; (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a42      	ldr	r2, [pc, #264]	; (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003ae0:	f043 0301 	orr.w	r3, r3, #1
 8003ae4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ae6:	f7fe fb83 	bl	80021f0 <HAL_GetTick>
 8003aea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003aec:	e008      	b.n	8003b00 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003aee:	f7fe fb7f 	bl	80021f0 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d901      	bls.n	8003b00 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e347      	b.n	8004190 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b00:	4b39      	ldr	r3, [pc, #228]	; (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0302 	and.w	r3, r3, #2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d0f0      	beq.n	8003aee <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b0c:	4b36      	ldr	r3, [pc, #216]	; (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a35      	ldr	r2, [pc, #212]	; (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003b12:	f043 0308 	orr.w	r3, r3, #8
 8003b16:	6013      	str	r3, [r2, #0]
 8003b18:	4b33      	ldr	r3, [pc, #204]	; (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a1b      	ldr	r3, [r3, #32]
 8003b24:	4930      	ldr	r1, [pc, #192]	; (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b2a:	4b2f      	ldr	r3, [pc, #188]	; (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	021b      	lsls	r3, r3, #8
 8003b38:	492b      	ldr	r1, [pc, #172]	; (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	604b      	str	r3, [r1, #4]
 8003b3e:	e01a      	b.n	8003b76 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003b40:	4b29      	ldr	r3, [pc, #164]	; (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a28      	ldr	r2, [pc, #160]	; (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003b46:	f023 0301 	bic.w	r3, r3, #1
 8003b4a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b4c:	f7fe fb50 	bl	80021f0 <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b54:	f7fe fb4c 	bl	80021f0 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e314      	b.n	8004190 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b66:	4b20      	ldr	r3, [pc, #128]	; (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1f0      	bne.n	8003b54 <HAL_RCC_OscConfig+0x1dc>
 8003b72:	e000      	b.n	8003b76 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b74:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d073      	beq.n	8003c6a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	2b08      	cmp	r3, #8
 8003b86:	d005      	beq.n	8003b94 <HAL_RCC_OscConfig+0x21c>
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	2b0c      	cmp	r3, #12
 8003b8c:	d10e      	bne.n	8003bac <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	2b03      	cmp	r3, #3
 8003b92:	d10b      	bne.n	8003bac <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b94:	4b14      	ldr	r3, [pc, #80]	; (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d063      	beq.n	8003c68 <HAL_RCC_OscConfig+0x2f0>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d15f      	bne.n	8003c68 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e2f1      	b.n	8004190 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bb4:	d106      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x24c>
 8003bb6:	4b0c      	ldr	r3, [pc, #48]	; (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a0b      	ldr	r2, [pc, #44]	; (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bc0:	6013      	str	r3, [r2, #0]
 8003bc2:	e025      	b.n	8003c10 <HAL_RCC_OscConfig+0x298>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bcc:	d114      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x280>
 8003bce:	4b06      	ldr	r3, [pc, #24]	; (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a05      	ldr	r2, [pc, #20]	; (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003bd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bd8:	6013      	str	r3, [r2, #0]
 8003bda:	4b03      	ldr	r3, [pc, #12]	; (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a02      	ldr	r2, [pc, #8]	; (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003be4:	6013      	str	r3, [r2, #0]
 8003be6:	e013      	b.n	8003c10 <HAL_RCC_OscConfig+0x298>
 8003be8:	40021000 	.word	0x40021000
 8003bec:	08009aa8 	.word	0x08009aa8
 8003bf0:	20000000 	.word	0x20000000
 8003bf4:	20000004 	.word	0x20000004
 8003bf8:	4ba0      	ldr	r3, [pc, #640]	; (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a9f      	ldr	r2, [pc, #636]	; (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003bfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c02:	6013      	str	r3, [r2, #0]
 8003c04:	4b9d      	ldr	r3, [pc, #628]	; (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a9c      	ldr	r2, [pc, #624]	; (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003c0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d013      	beq.n	8003c40 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c18:	f7fe faea 	bl	80021f0 <HAL_GetTick>
 8003c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c1e:	e008      	b.n	8003c32 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c20:	f7fe fae6 	bl	80021f0 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b64      	cmp	r3, #100	; 0x64
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e2ae      	b.n	8004190 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c32:	4b92      	ldr	r3, [pc, #584]	; (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d0f0      	beq.n	8003c20 <HAL_RCC_OscConfig+0x2a8>
 8003c3e:	e014      	b.n	8003c6a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c40:	f7fe fad6 	bl	80021f0 <HAL_GetTick>
 8003c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c46:	e008      	b.n	8003c5a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c48:	f7fe fad2 	bl	80021f0 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b64      	cmp	r3, #100	; 0x64
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e29a      	b.n	8004190 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c5a:	4b88      	ldr	r3, [pc, #544]	; (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1f0      	bne.n	8003c48 <HAL_RCC_OscConfig+0x2d0>
 8003c66:	e000      	b.n	8003c6a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d060      	beq.n	8003d38 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	2b04      	cmp	r3, #4
 8003c7a:	d005      	beq.n	8003c88 <HAL_RCC_OscConfig+0x310>
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	2b0c      	cmp	r3, #12
 8003c80:	d119      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d116      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c88:	4b7c      	ldr	r3, [pc, #496]	; (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d005      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x328>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d101      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e277      	b.n	8004190 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ca0:	4b76      	ldr	r3, [pc, #472]	; (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	061b      	lsls	r3, r3, #24
 8003cae:	4973      	ldr	r1, [pc, #460]	; (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cb4:	e040      	b.n	8003d38 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d023      	beq.n	8003d06 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cbe:	4b6f      	ldr	r3, [pc, #444]	; (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a6e      	ldr	r2, [pc, #440]	; (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cca:	f7fe fa91 	bl	80021f0 <HAL_GetTick>
 8003cce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cd0:	e008      	b.n	8003ce4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cd2:	f7fe fa8d 	bl	80021f0 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e255      	b.n	8004190 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ce4:	4b65      	ldr	r3, [pc, #404]	; (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d0f0      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cf0:	4b62      	ldr	r3, [pc, #392]	; (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	061b      	lsls	r3, r3, #24
 8003cfe:	495f      	ldr	r1, [pc, #380]	; (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	604b      	str	r3, [r1, #4]
 8003d04:	e018      	b.n	8003d38 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d06:	4b5d      	ldr	r3, [pc, #372]	; (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a5c      	ldr	r2, [pc, #368]	; (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003d0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d12:	f7fe fa6d 	bl	80021f0 <HAL_GetTick>
 8003d16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d18:	e008      	b.n	8003d2c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d1a:	f7fe fa69 	bl	80021f0 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d901      	bls.n	8003d2c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e231      	b.n	8004190 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d2c:	4b53      	ldr	r3, [pc, #332]	; (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1f0      	bne.n	8003d1a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0308 	and.w	r3, r3, #8
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d03c      	beq.n	8003dbe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	695b      	ldr	r3, [r3, #20]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d01c      	beq.n	8003d86 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d4c:	4b4b      	ldr	r3, [pc, #300]	; (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003d4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d52:	4a4a      	ldr	r2, [pc, #296]	; (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003d54:	f043 0301 	orr.w	r3, r3, #1
 8003d58:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d5c:	f7fe fa48 	bl	80021f0 <HAL_GetTick>
 8003d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d62:	e008      	b.n	8003d76 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d64:	f7fe fa44 	bl	80021f0 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e20c      	b.n	8004190 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d76:	4b41      	ldr	r3, [pc, #260]	; (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003d78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d0ef      	beq.n	8003d64 <HAL_RCC_OscConfig+0x3ec>
 8003d84:	e01b      	b.n	8003dbe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d86:	4b3d      	ldr	r3, [pc, #244]	; (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003d88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d8c:	4a3b      	ldr	r2, [pc, #236]	; (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003d8e:	f023 0301 	bic.w	r3, r3, #1
 8003d92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d96:	f7fe fa2b 	bl	80021f0 <HAL_GetTick>
 8003d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d9c:	e008      	b.n	8003db0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d9e:	f7fe fa27 	bl	80021f0 <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d901      	bls.n	8003db0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e1ef      	b.n	8004190 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003db0:	4b32      	ldr	r3, [pc, #200]	; (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003db2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003db6:	f003 0302 	and.w	r3, r3, #2
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1ef      	bne.n	8003d9e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0304 	and.w	r3, r3, #4
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	f000 80a6 	beq.w	8003f18 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003dd0:	4b2a      	ldr	r3, [pc, #168]	; (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d10d      	bne.n	8003df8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ddc:	4b27      	ldr	r3, [pc, #156]	; (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de0:	4a26      	ldr	r2, [pc, #152]	; (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003de2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003de6:	6593      	str	r3, [r2, #88]	; 0x58
 8003de8:	4b24      	ldr	r3, [pc, #144]	; (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df0:	60bb      	str	r3, [r7, #8]
 8003df2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003df4:	2301      	movs	r3, #1
 8003df6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003df8:	4b21      	ldr	r3, [pc, #132]	; (8003e80 <HAL_RCC_OscConfig+0x508>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d118      	bne.n	8003e36 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e04:	4b1e      	ldr	r3, [pc, #120]	; (8003e80 <HAL_RCC_OscConfig+0x508>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a1d      	ldr	r2, [pc, #116]	; (8003e80 <HAL_RCC_OscConfig+0x508>)
 8003e0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e0e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e10:	f7fe f9ee 	bl	80021f0 <HAL_GetTick>
 8003e14:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e16:	e008      	b.n	8003e2a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e18:	f7fe f9ea 	bl	80021f0 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e1b2      	b.n	8004190 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e2a:	4b15      	ldr	r3, [pc, #84]	; (8003e80 <HAL_RCC_OscConfig+0x508>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d0f0      	beq.n	8003e18 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d108      	bne.n	8003e50 <HAL_RCC_OscConfig+0x4d8>
 8003e3e:	4b0f      	ldr	r3, [pc, #60]	; (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e44:	4a0d      	ldr	r2, [pc, #52]	; (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003e46:	f043 0301 	orr.w	r3, r3, #1
 8003e4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e4e:	e029      	b.n	8003ea4 <HAL_RCC_OscConfig+0x52c>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	2b05      	cmp	r3, #5
 8003e56:	d115      	bne.n	8003e84 <HAL_RCC_OscConfig+0x50c>
 8003e58:	4b08      	ldr	r3, [pc, #32]	; (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e5e:	4a07      	ldr	r2, [pc, #28]	; (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003e60:	f043 0304 	orr.w	r3, r3, #4
 8003e64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e68:	4b04      	ldr	r3, [pc, #16]	; (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e6e:	4a03      	ldr	r2, [pc, #12]	; (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003e70:	f043 0301 	orr.w	r3, r3, #1
 8003e74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e78:	e014      	b.n	8003ea4 <HAL_RCC_OscConfig+0x52c>
 8003e7a:	bf00      	nop
 8003e7c:	40021000 	.word	0x40021000
 8003e80:	40007000 	.word	0x40007000
 8003e84:	4b9a      	ldr	r3, [pc, #616]	; (80040f0 <HAL_RCC_OscConfig+0x778>)
 8003e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e8a:	4a99      	ldr	r2, [pc, #612]	; (80040f0 <HAL_RCC_OscConfig+0x778>)
 8003e8c:	f023 0301 	bic.w	r3, r3, #1
 8003e90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e94:	4b96      	ldr	r3, [pc, #600]	; (80040f0 <HAL_RCC_OscConfig+0x778>)
 8003e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e9a:	4a95      	ldr	r2, [pc, #596]	; (80040f0 <HAL_RCC_OscConfig+0x778>)
 8003e9c:	f023 0304 	bic.w	r3, r3, #4
 8003ea0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d016      	beq.n	8003eda <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eac:	f7fe f9a0 	bl	80021f0 <HAL_GetTick>
 8003eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eb2:	e00a      	b.n	8003eca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eb4:	f7fe f99c 	bl	80021f0 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e162      	b.n	8004190 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eca:	4b89      	ldr	r3, [pc, #548]	; (80040f0 <HAL_RCC_OscConfig+0x778>)
 8003ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed0:	f003 0302 	and.w	r3, r3, #2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d0ed      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x53c>
 8003ed8:	e015      	b.n	8003f06 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eda:	f7fe f989 	bl	80021f0 <HAL_GetTick>
 8003ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ee0:	e00a      	b.n	8003ef8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ee2:	f7fe f985 	bl	80021f0 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e14b      	b.n	8004190 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ef8:	4b7d      	ldr	r3, [pc, #500]	; (80040f0 <HAL_RCC_OscConfig+0x778>)
 8003efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1ed      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f06:	7ffb      	ldrb	r3, [r7, #31]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d105      	bne.n	8003f18 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f0c:	4b78      	ldr	r3, [pc, #480]	; (80040f0 <HAL_RCC_OscConfig+0x778>)
 8003f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f10:	4a77      	ldr	r2, [pc, #476]	; (80040f0 <HAL_RCC_OscConfig+0x778>)
 8003f12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f16:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0320 	and.w	r3, r3, #32
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d03c      	beq.n	8003f9e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d01c      	beq.n	8003f66 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f2c:	4b70      	ldr	r3, [pc, #448]	; (80040f0 <HAL_RCC_OscConfig+0x778>)
 8003f2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f32:	4a6f      	ldr	r2, [pc, #444]	; (80040f0 <HAL_RCC_OscConfig+0x778>)
 8003f34:	f043 0301 	orr.w	r3, r3, #1
 8003f38:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f3c:	f7fe f958 	bl	80021f0 <HAL_GetTick>
 8003f40:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f42:	e008      	b.n	8003f56 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f44:	f7fe f954 	bl	80021f0 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e11c      	b.n	8004190 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f56:	4b66      	ldr	r3, [pc, #408]	; (80040f0 <HAL_RCC_OscConfig+0x778>)
 8003f58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d0ef      	beq.n	8003f44 <HAL_RCC_OscConfig+0x5cc>
 8003f64:	e01b      	b.n	8003f9e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f66:	4b62      	ldr	r3, [pc, #392]	; (80040f0 <HAL_RCC_OscConfig+0x778>)
 8003f68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f6c:	4a60      	ldr	r2, [pc, #384]	; (80040f0 <HAL_RCC_OscConfig+0x778>)
 8003f6e:	f023 0301 	bic.w	r3, r3, #1
 8003f72:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f76:	f7fe f93b 	bl	80021f0 <HAL_GetTick>
 8003f7a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f7c:	e008      	b.n	8003f90 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f7e:	f7fe f937 	bl	80021f0 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d901      	bls.n	8003f90 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e0ff      	b.n	8004190 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f90:	4b57      	ldr	r3, [pc, #348]	; (80040f0 <HAL_RCC_OscConfig+0x778>)
 8003f92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1ef      	bne.n	8003f7e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f000 80f3 	beq.w	800418e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	f040 80c9 	bne.w	8004144 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003fb2:	4b4f      	ldr	r3, [pc, #316]	; (80040f0 <HAL_RCC_OscConfig+0x778>)
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	f003 0203 	and.w	r2, r3, #3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d12c      	bne.n	8004020 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d123      	bne.n	8004020 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fe2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d11b      	bne.n	8004020 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d113      	bne.n	8004020 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004002:	085b      	lsrs	r3, r3, #1
 8004004:	3b01      	subs	r3, #1
 8004006:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004008:	429a      	cmp	r2, r3
 800400a:	d109      	bne.n	8004020 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004016:	085b      	lsrs	r3, r3, #1
 8004018:	3b01      	subs	r3, #1
 800401a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800401c:	429a      	cmp	r2, r3
 800401e:	d06b      	beq.n	80040f8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	2b0c      	cmp	r3, #12
 8004024:	d062      	beq.n	80040ec <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004026:	4b32      	ldr	r3, [pc, #200]	; (80040f0 <HAL_RCC_OscConfig+0x778>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d001      	beq.n	8004036 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e0ac      	b.n	8004190 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004036:	4b2e      	ldr	r3, [pc, #184]	; (80040f0 <HAL_RCC_OscConfig+0x778>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a2d      	ldr	r2, [pc, #180]	; (80040f0 <HAL_RCC_OscConfig+0x778>)
 800403c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004040:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004042:	f7fe f8d5 	bl	80021f0 <HAL_GetTick>
 8004046:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004048:	e008      	b.n	800405c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800404a:	f7fe f8d1 	bl	80021f0 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	2b02      	cmp	r3, #2
 8004056:	d901      	bls.n	800405c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e099      	b.n	8004190 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800405c:	4b24      	ldr	r3, [pc, #144]	; (80040f0 <HAL_RCC_OscConfig+0x778>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1f0      	bne.n	800404a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004068:	4b21      	ldr	r3, [pc, #132]	; (80040f0 <HAL_RCC_OscConfig+0x778>)
 800406a:	68da      	ldr	r2, [r3, #12]
 800406c:	4b21      	ldr	r3, [pc, #132]	; (80040f4 <HAL_RCC_OscConfig+0x77c>)
 800406e:	4013      	ands	r3, r2
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004078:	3a01      	subs	r2, #1
 800407a:	0112      	lsls	r2, r2, #4
 800407c:	4311      	orrs	r1, r2
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004082:	0212      	lsls	r2, r2, #8
 8004084:	4311      	orrs	r1, r2
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800408a:	0852      	lsrs	r2, r2, #1
 800408c:	3a01      	subs	r2, #1
 800408e:	0552      	lsls	r2, r2, #21
 8004090:	4311      	orrs	r1, r2
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004096:	0852      	lsrs	r2, r2, #1
 8004098:	3a01      	subs	r2, #1
 800409a:	0652      	lsls	r2, r2, #25
 800409c:	4311      	orrs	r1, r2
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80040a2:	06d2      	lsls	r2, r2, #27
 80040a4:	430a      	orrs	r2, r1
 80040a6:	4912      	ldr	r1, [pc, #72]	; (80040f0 <HAL_RCC_OscConfig+0x778>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80040ac:	4b10      	ldr	r3, [pc, #64]	; (80040f0 <HAL_RCC_OscConfig+0x778>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a0f      	ldr	r2, [pc, #60]	; (80040f0 <HAL_RCC_OscConfig+0x778>)
 80040b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040b6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040b8:	4b0d      	ldr	r3, [pc, #52]	; (80040f0 <HAL_RCC_OscConfig+0x778>)
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	4a0c      	ldr	r2, [pc, #48]	; (80040f0 <HAL_RCC_OscConfig+0x778>)
 80040be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040c2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80040c4:	f7fe f894 	bl	80021f0 <HAL_GetTick>
 80040c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040ca:	e008      	b.n	80040de <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040cc:	f7fe f890 	bl	80021f0 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d901      	bls.n	80040de <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e058      	b.n	8004190 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040de:	4b04      	ldr	r3, [pc, #16]	; (80040f0 <HAL_RCC_OscConfig+0x778>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d0f0      	beq.n	80040cc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040ea:	e050      	b.n	800418e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e04f      	b.n	8004190 <HAL_RCC_OscConfig+0x818>
 80040f0:	40021000 	.word	0x40021000
 80040f4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040f8:	4b27      	ldr	r3, [pc, #156]	; (8004198 <HAL_RCC_OscConfig+0x820>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d144      	bne.n	800418e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004104:	4b24      	ldr	r3, [pc, #144]	; (8004198 <HAL_RCC_OscConfig+0x820>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a23      	ldr	r2, [pc, #140]	; (8004198 <HAL_RCC_OscConfig+0x820>)
 800410a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800410e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004110:	4b21      	ldr	r3, [pc, #132]	; (8004198 <HAL_RCC_OscConfig+0x820>)
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	4a20      	ldr	r2, [pc, #128]	; (8004198 <HAL_RCC_OscConfig+0x820>)
 8004116:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800411a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800411c:	f7fe f868 	bl	80021f0 <HAL_GetTick>
 8004120:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004122:	e008      	b.n	8004136 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004124:	f7fe f864 	bl	80021f0 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b02      	cmp	r3, #2
 8004130:	d901      	bls.n	8004136 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e02c      	b.n	8004190 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004136:	4b18      	ldr	r3, [pc, #96]	; (8004198 <HAL_RCC_OscConfig+0x820>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d0f0      	beq.n	8004124 <HAL_RCC_OscConfig+0x7ac>
 8004142:	e024      	b.n	800418e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	2b0c      	cmp	r3, #12
 8004148:	d01f      	beq.n	800418a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800414a:	4b13      	ldr	r3, [pc, #76]	; (8004198 <HAL_RCC_OscConfig+0x820>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a12      	ldr	r2, [pc, #72]	; (8004198 <HAL_RCC_OscConfig+0x820>)
 8004150:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004154:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004156:	f7fe f84b 	bl	80021f0 <HAL_GetTick>
 800415a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800415c:	e008      	b.n	8004170 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800415e:	f7fe f847 	bl	80021f0 <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	2b02      	cmp	r3, #2
 800416a:	d901      	bls.n	8004170 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e00f      	b.n	8004190 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004170:	4b09      	ldr	r3, [pc, #36]	; (8004198 <HAL_RCC_OscConfig+0x820>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1f0      	bne.n	800415e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800417c:	4b06      	ldr	r3, [pc, #24]	; (8004198 <HAL_RCC_OscConfig+0x820>)
 800417e:	68da      	ldr	r2, [r3, #12]
 8004180:	4905      	ldr	r1, [pc, #20]	; (8004198 <HAL_RCC_OscConfig+0x820>)
 8004182:	4b06      	ldr	r3, [pc, #24]	; (800419c <HAL_RCC_OscConfig+0x824>)
 8004184:	4013      	ands	r3, r2
 8004186:	60cb      	str	r3, [r1, #12]
 8004188:	e001      	b.n	800418e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e000      	b.n	8004190 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	3720      	adds	r7, #32
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	40021000 	.word	0x40021000
 800419c:	feeefffc 	.word	0xfeeefffc

080041a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d101      	bne.n	80041b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e0e7      	b.n	8004384 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041b4:	4b75      	ldr	r3, [pc, #468]	; (800438c <HAL_RCC_ClockConfig+0x1ec>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0307 	and.w	r3, r3, #7
 80041bc:	683a      	ldr	r2, [r7, #0]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d910      	bls.n	80041e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041c2:	4b72      	ldr	r3, [pc, #456]	; (800438c <HAL_RCC_ClockConfig+0x1ec>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f023 0207 	bic.w	r2, r3, #7
 80041ca:	4970      	ldr	r1, [pc, #448]	; (800438c <HAL_RCC_ClockConfig+0x1ec>)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041d2:	4b6e      	ldr	r3, [pc, #440]	; (800438c <HAL_RCC_ClockConfig+0x1ec>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0307 	and.w	r3, r3, #7
 80041da:	683a      	ldr	r2, [r7, #0]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d001      	beq.n	80041e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e0cf      	b.n	8004384 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0302 	and.w	r3, r3, #2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d010      	beq.n	8004212 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689a      	ldr	r2, [r3, #8]
 80041f4:	4b66      	ldr	r3, [pc, #408]	; (8004390 <HAL_RCC_ClockConfig+0x1f0>)
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d908      	bls.n	8004212 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004200:	4b63      	ldr	r3, [pc, #396]	; (8004390 <HAL_RCC_ClockConfig+0x1f0>)
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	4960      	ldr	r1, [pc, #384]	; (8004390 <HAL_RCC_ClockConfig+0x1f0>)
 800420e:	4313      	orrs	r3, r2
 8004210:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b00      	cmp	r3, #0
 800421c:	d04c      	beq.n	80042b8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	2b03      	cmp	r3, #3
 8004224:	d107      	bne.n	8004236 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004226:	4b5a      	ldr	r3, [pc, #360]	; (8004390 <HAL_RCC_ClockConfig+0x1f0>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d121      	bne.n	8004276 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e0a6      	b.n	8004384 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	2b02      	cmp	r3, #2
 800423c:	d107      	bne.n	800424e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800423e:	4b54      	ldr	r3, [pc, #336]	; (8004390 <HAL_RCC_ClockConfig+0x1f0>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d115      	bne.n	8004276 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e09a      	b.n	8004384 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d107      	bne.n	8004266 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004256:	4b4e      	ldr	r3, [pc, #312]	; (8004390 <HAL_RCC_ClockConfig+0x1f0>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d109      	bne.n	8004276 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e08e      	b.n	8004384 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004266:	4b4a      	ldr	r3, [pc, #296]	; (8004390 <HAL_RCC_ClockConfig+0x1f0>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800426e:	2b00      	cmp	r3, #0
 8004270:	d101      	bne.n	8004276 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e086      	b.n	8004384 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004276:	4b46      	ldr	r3, [pc, #280]	; (8004390 <HAL_RCC_ClockConfig+0x1f0>)
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f023 0203 	bic.w	r2, r3, #3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	4943      	ldr	r1, [pc, #268]	; (8004390 <HAL_RCC_ClockConfig+0x1f0>)
 8004284:	4313      	orrs	r3, r2
 8004286:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004288:	f7fd ffb2 	bl	80021f0 <HAL_GetTick>
 800428c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800428e:	e00a      	b.n	80042a6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004290:	f7fd ffae 	bl	80021f0 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	f241 3288 	movw	r2, #5000	; 0x1388
 800429e:	4293      	cmp	r3, r2
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e06e      	b.n	8004384 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042a6:	4b3a      	ldr	r3, [pc, #232]	; (8004390 <HAL_RCC_ClockConfig+0x1f0>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f003 020c 	and.w	r2, r3, #12
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d1eb      	bne.n	8004290 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0302 	and.w	r3, r3, #2
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d010      	beq.n	80042e6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	4b31      	ldr	r3, [pc, #196]	; (8004390 <HAL_RCC_ClockConfig+0x1f0>)
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d208      	bcs.n	80042e6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042d4:	4b2e      	ldr	r3, [pc, #184]	; (8004390 <HAL_RCC_ClockConfig+0x1f0>)
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	492b      	ldr	r1, [pc, #172]	; (8004390 <HAL_RCC_ClockConfig+0x1f0>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042e6:	4b29      	ldr	r3, [pc, #164]	; (800438c <HAL_RCC_ClockConfig+0x1ec>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0307 	and.w	r3, r3, #7
 80042ee:	683a      	ldr	r2, [r7, #0]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d210      	bcs.n	8004316 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042f4:	4b25      	ldr	r3, [pc, #148]	; (800438c <HAL_RCC_ClockConfig+0x1ec>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f023 0207 	bic.w	r2, r3, #7
 80042fc:	4923      	ldr	r1, [pc, #140]	; (800438c <HAL_RCC_ClockConfig+0x1ec>)
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	4313      	orrs	r3, r2
 8004302:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004304:	4b21      	ldr	r3, [pc, #132]	; (800438c <HAL_RCC_ClockConfig+0x1ec>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0307 	and.w	r3, r3, #7
 800430c:	683a      	ldr	r2, [r7, #0]
 800430e:	429a      	cmp	r2, r3
 8004310:	d001      	beq.n	8004316 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e036      	b.n	8004384 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0304 	and.w	r3, r3, #4
 800431e:	2b00      	cmp	r3, #0
 8004320:	d008      	beq.n	8004334 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004322:	4b1b      	ldr	r3, [pc, #108]	; (8004390 <HAL_RCC_ClockConfig+0x1f0>)
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	4918      	ldr	r1, [pc, #96]	; (8004390 <HAL_RCC_ClockConfig+0x1f0>)
 8004330:	4313      	orrs	r3, r2
 8004332:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0308 	and.w	r3, r3, #8
 800433c:	2b00      	cmp	r3, #0
 800433e:	d009      	beq.n	8004354 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004340:	4b13      	ldr	r3, [pc, #76]	; (8004390 <HAL_RCC_ClockConfig+0x1f0>)
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	00db      	lsls	r3, r3, #3
 800434e:	4910      	ldr	r1, [pc, #64]	; (8004390 <HAL_RCC_ClockConfig+0x1f0>)
 8004350:	4313      	orrs	r3, r2
 8004352:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004354:	f000 f824 	bl	80043a0 <HAL_RCC_GetSysClockFreq>
 8004358:	4602      	mov	r2, r0
 800435a:	4b0d      	ldr	r3, [pc, #52]	; (8004390 <HAL_RCC_ClockConfig+0x1f0>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	091b      	lsrs	r3, r3, #4
 8004360:	f003 030f 	and.w	r3, r3, #15
 8004364:	490b      	ldr	r1, [pc, #44]	; (8004394 <HAL_RCC_ClockConfig+0x1f4>)
 8004366:	5ccb      	ldrb	r3, [r1, r3]
 8004368:	f003 031f 	and.w	r3, r3, #31
 800436c:	fa22 f303 	lsr.w	r3, r2, r3
 8004370:	4a09      	ldr	r2, [pc, #36]	; (8004398 <HAL_RCC_ClockConfig+0x1f8>)
 8004372:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004374:	4b09      	ldr	r3, [pc, #36]	; (800439c <HAL_RCC_ClockConfig+0x1fc>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4618      	mov	r0, r3
 800437a:	f7fd fdeb 	bl	8001f54 <HAL_InitTick>
 800437e:	4603      	mov	r3, r0
 8004380:	72fb      	strb	r3, [r7, #11]

  return status;
 8004382:	7afb      	ldrb	r3, [r7, #11]
}
 8004384:	4618      	mov	r0, r3
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	40022000 	.word	0x40022000
 8004390:	40021000 	.word	0x40021000
 8004394:	08009aa8 	.word	0x08009aa8
 8004398:	20000000 	.word	0x20000000
 800439c:	20000004 	.word	0x20000004

080043a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b089      	sub	sp, #36	; 0x24
 80043a4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80043a6:	2300      	movs	r3, #0
 80043a8:	61fb      	str	r3, [r7, #28]
 80043aa:	2300      	movs	r3, #0
 80043ac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043ae:	4b3e      	ldr	r3, [pc, #248]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f003 030c 	and.w	r3, r3, #12
 80043b6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043b8:	4b3b      	ldr	r3, [pc, #236]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	f003 0303 	and.w	r3, r3, #3
 80043c0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d005      	beq.n	80043d4 <HAL_RCC_GetSysClockFreq+0x34>
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	2b0c      	cmp	r3, #12
 80043cc:	d121      	bne.n	8004412 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d11e      	bne.n	8004412 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80043d4:	4b34      	ldr	r3, [pc, #208]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0308 	and.w	r3, r3, #8
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d107      	bne.n	80043f0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80043e0:	4b31      	ldr	r3, [pc, #196]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80043e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043e6:	0a1b      	lsrs	r3, r3, #8
 80043e8:	f003 030f 	and.w	r3, r3, #15
 80043ec:	61fb      	str	r3, [r7, #28]
 80043ee:	e005      	b.n	80043fc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80043f0:	4b2d      	ldr	r3, [pc, #180]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	091b      	lsrs	r3, r3, #4
 80043f6:	f003 030f 	and.w	r3, r3, #15
 80043fa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80043fc:	4a2b      	ldr	r2, [pc, #172]	; (80044ac <HAL_RCC_GetSysClockFreq+0x10c>)
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004404:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d10d      	bne.n	8004428 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004410:	e00a      	b.n	8004428 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	2b04      	cmp	r3, #4
 8004416:	d102      	bne.n	800441e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004418:	4b25      	ldr	r3, [pc, #148]	; (80044b0 <HAL_RCC_GetSysClockFreq+0x110>)
 800441a:	61bb      	str	r3, [r7, #24]
 800441c:	e004      	b.n	8004428 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	2b08      	cmp	r3, #8
 8004422:	d101      	bne.n	8004428 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004424:	4b23      	ldr	r3, [pc, #140]	; (80044b4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004426:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	2b0c      	cmp	r3, #12
 800442c:	d134      	bne.n	8004498 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800442e:	4b1e      	ldr	r3, [pc, #120]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	f003 0303 	and.w	r3, r3, #3
 8004436:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	2b02      	cmp	r3, #2
 800443c:	d003      	beq.n	8004446 <HAL_RCC_GetSysClockFreq+0xa6>
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	2b03      	cmp	r3, #3
 8004442:	d003      	beq.n	800444c <HAL_RCC_GetSysClockFreq+0xac>
 8004444:	e005      	b.n	8004452 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004446:	4b1a      	ldr	r3, [pc, #104]	; (80044b0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004448:	617b      	str	r3, [r7, #20]
      break;
 800444a:	e005      	b.n	8004458 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800444c:	4b19      	ldr	r3, [pc, #100]	; (80044b4 <HAL_RCC_GetSysClockFreq+0x114>)
 800444e:	617b      	str	r3, [r7, #20]
      break;
 8004450:	e002      	b.n	8004458 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	617b      	str	r3, [r7, #20]
      break;
 8004456:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004458:	4b13      	ldr	r3, [pc, #76]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x108>)
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	091b      	lsrs	r3, r3, #4
 800445e:	f003 0307 	and.w	r3, r3, #7
 8004462:	3301      	adds	r3, #1
 8004464:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004466:	4b10      	ldr	r3, [pc, #64]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	0a1b      	lsrs	r3, r3, #8
 800446c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004470:	697a      	ldr	r2, [r7, #20]
 8004472:	fb03 f202 	mul.w	r2, r3, r2
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	fbb2 f3f3 	udiv	r3, r2, r3
 800447c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800447e:	4b0a      	ldr	r3, [pc, #40]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	0e5b      	lsrs	r3, r3, #25
 8004484:	f003 0303 	and.w	r3, r3, #3
 8004488:	3301      	adds	r3, #1
 800448a:	005b      	lsls	r3, r3, #1
 800448c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800448e:	697a      	ldr	r2, [r7, #20]
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	fbb2 f3f3 	udiv	r3, r2, r3
 8004496:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004498:	69bb      	ldr	r3, [r7, #24]
}
 800449a:	4618      	mov	r0, r3
 800449c:	3724      	adds	r7, #36	; 0x24
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	40021000 	.word	0x40021000
 80044ac:	08009ac0 	.word	0x08009ac0
 80044b0:	00f42400 	.word	0x00f42400
 80044b4:	007a1200 	.word	0x007a1200

080044b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044b8:	b480      	push	{r7}
 80044ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044bc:	4b03      	ldr	r3, [pc, #12]	; (80044cc <HAL_RCC_GetHCLKFreq+0x14>)
 80044be:	681b      	ldr	r3, [r3, #0]
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	20000000 	.word	0x20000000

080044d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80044d4:	f7ff fff0 	bl	80044b8 <HAL_RCC_GetHCLKFreq>
 80044d8:	4602      	mov	r2, r0
 80044da:	4b06      	ldr	r3, [pc, #24]	; (80044f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	0a1b      	lsrs	r3, r3, #8
 80044e0:	f003 0307 	and.w	r3, r3, #7
 80044e4:	4904      	ldr	r1, [pc, #16]	; (80044f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80044e6:	5ccb      	ldrb	r3, [r1, r3]
 80044e8:	f003 031f 	and.w	r3, r3, #31
 80044ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	40021000 	.word	0x40021000
 80044f8:	08009ab8 	.word	0x08009ab8

080044fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004500:	f7ff ffda 	bl	80044b8 <HAL_RCC_GetHCLKFreq>
 8004504:	4602      	mov	r2, r0
 8004506:	4b06      	ldr	r3, [pc, #24]	; (8004520 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	0adb      	lsrs	r3, r3, #11
 800450c:	f003 0307 	and.w	r3, r3, #7
 8004510:	4904      	ldr	r1, [pc, #16]	; (8004524 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004512:	5ccb      	ldrb	r3, [r1, r3]
 8004514:	f003 031f 	and.w	r3, r3, #31
 8004518:	fa22 f303 	lsr.w	r3, r2, r3
}
 800451c:	4618      	mov	r0, r3
 800451e:	bd80      	pop	{r7, pc}
 8004520:	40021000 	.word	0x40021000
 8004524:	08009ab8 	.word	0x08009ab8

08004528 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	220f      	movs	r2, #15
 8004536:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004538:	4b12      	ldr	r3, [pc, #72]	; (8004584 <HAL_RCC_GetClockConfig+0x5c>)
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f003 0203 	and.w	r2, r3, #3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004544:	4b0f      	ldr	r3, [pc, #60]	; (8004584 <HAL_RCC_GetClockConfig+0x5c>)
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004550:	4b0c      	ldr	r3, [pc, #48]	; (8004584 <HAL_RCC_GetClockConfig+0x5c>)
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800455c:	4b09      	ldr	r3, [pc, #36]	; (8004584 <HAL_RCC_GetClockConfig+0x5c>)
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	08db      	lsrs	r3, r3, #3
 8004562:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800456a:	4b07      	ldr	r3, [pc, #28]	; (8004588 <HAL_RCC_GetClockConfig+0x60>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0207 	and.w	r2, r3, #7
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	601a      	str	r2, [r3, #0]
}
 8004576:	bf00      	nop
 8004578:	370c      	adds	r7, #12
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	40021000 	.word	0x40021000
 8004588:	40022000 	.word	0x40022000

0800458c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b086      	sub	sp, #24
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004594:	2300      	movs	r3, #0
 8004596:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004598:	4b2a      	ldr	r3, [pc, #168]	; (8004644 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800459a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800459c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d003      	beq.n	80045ac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80045a4:	f7ff f984 	bl	80038b0 <HAL_PWREx_GetVoltageRange>
 80045a8:	6178      	str	r0, [r7, #20]
 80045aa:	e014      	b.n	80045d6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80045ac:	4b25      	ldr	r3, [pc, #148]	; (8004644 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045b0:	4a24      	ldr	r2, [pc, #144]	; (8004644 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045b6:	6593      	str	r3, [r2, #88]	; 0x58
 80045b8:	4b22      	ldr	r3, [pc, #136]	; (8004644 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045c0:	60fb      	str	r3, [r7, #12]
 80045c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80045c4:	f7ff f974 	bl	80038b0 <HAL_PWREx_GetVoltageRange>
 80045c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80045ca:	4b1e      	ldr	r3, [pc, #120]	; (8004644 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ce:	4a1d      	ldr	r2, [pc, #116]	; (8004644 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045d4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045dc:	d10b      	bne.n	80045f6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2b80      	cmp	r3, #128	; 0x80
 80045e2:	d919      	bls.n	8004618 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2ba0      	cmp	r3, #160	; 0xa0
 80045e8:	d902      	bls.n	80045f0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80045ea:	2302      	movs	r3, #2
 80045ec:	613b      	str	r3, [r7, #16]
 80045ee:	e013      	b.n	8004618 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80045f0:	2301      	movs	r3, #1
 80045f2:	613b      	str	r3, [r7, #16]
 80045f4:	e010      	b.n	8004618 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2b80      	cmp	r3, #128	; 0x80
 80045fa:	d902      	bls.n	8004602 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80045fc:	2303      	movs	r3, #3
 80045fe:	613b      	str	r3, [r7, #16]
 8004600:	e00a      	b.n	8004618 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2b80      	cmp	r3, #128	; 0x80
 8004606:	d102      	bne.n	800460e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004608:	2302      	movs	r3, #2
 800460a:	613b      	str	r3, [r7, #16]
 800460c:	e004      	b.n	8004618 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2b70      	cmp	r3, #112	; 0x70
 8004612:	d101      	bne.n	8004618 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004614:	2301      	movs	r3, #1
 8004616:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004618:	4b0b      	ldr	r3, [pc, #44]	; (8004648 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f023 0207 	bic.w	r2, r3, #7
 8004620:	4909      	ldr	r1, [pc, #36]	; (8004648 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	4313      	orrs	r3, r2
 8004626:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004628:	4b07      	ldr	r3, [pc, #28]	; (8004648 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0307 	and.w	r3, r3, #7
 8004630:	693a      	ldr	r2, [r7, #16]
 8004632:	429a      	cmp	r2, r3
 8004634:	d001      	beq.n	800463a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e000      	b.n	800463c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	3718      	adds	r7, #24
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	40021000 	.word	0x40021000
 8004648:	40022000 	.word	0x40022000

0800464c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b086      	sub	sp, #24
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004654:	2300      	movs	r3, #0
 8004656:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004658:	2300      	movs	r3, #0
 800465a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004664:	2b00      	cmp	r3, #0
 8004666:	d031      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800466c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004670:	d01a      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004672:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004676:	d814      	bhi.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004678:	2b00      	cmp	r3, #0
 800467a:	d009      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800467c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004680:	d10f      	bne.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004682:	4b5d      	ldr	r3, [pc, #372]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	4a5c      	ldr	r2, [pc, #368]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800468c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800468e:	e00c      	b.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	3304      	adds	r3, #4
 8004694:	2100      	movs	r1, #0
 8004696:	4618      	mov	r0, r3
 8004698:	f000 f9f0 	bl	8004a7c <RCCEx_PLLSAI1_Config>
 800469c:	4603      	mov	r3, r0
 800469e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046a0:	e003      	b.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	74fb      	strb	r3, [r7, #19]
      break;
 80046a6:	e000      	b.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80046a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046aa:	7cfb      	ldrb	r3, [r7, #19]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d10b      	bne.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046b0:	4b51      	ldr	r3, [pc, #324]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046be:	494e      	ldr	r1, [pc, #312]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80046c6:	e001      	b.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046c8:	7cfb      	ldrb	r3, [r7, #19]
 80046ca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	f000 809e 	beq.w	8004816 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046da:	2300      	movs	r3, #0
 80046dc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80046de:	4b46      	ldr	r3, [pc, #280]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80046ea:	2301      	movs	r3, #1
 80046ec:	e000      	b.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80046ee:	2300      	movs	r3, #0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00d      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046f4:	4b40      	ldr	r3, [pc, #256]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f8:	4a3f      	ldr	r2, [pc, #252]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046fe:	6593      	str	r3, [r2, #88]	; 0x58
 8004700:	4b3d      	ldr	r3, [pc, #244]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004708:	60bb      	str	r3, [r7, #8]
 800470a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800470c:	2301      	movs	r3, #1
 800470e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004710:	4b3a      	ldr	r3, [pc, #232]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a39      	ldr	r2, [pc, #228]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004716:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800471a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800471c:	f7fd fd68 	bl	80021f0 <HAL_GetTick>
 8004720:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004722:	e009      	b.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004724:	f7fd fd64 	bl	80021f0 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b02      	cmp	r3, #2
 8004730:	d902      	bls.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	74fb      	strb	r3, [r7, #19]
        break;
 8004736:	e005      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004738:	4b30      	ldr	r3, [pc, #192]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004740:	2b00      	cmp	r3, #0
 8004742:	d0ef      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004744:	7cfb      	ldrb	r3, [r7, #19]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d15a      	bne.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800474a:	4b2b      	ldr	r3, [pc, #172]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800474c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004750:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004754:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d01e      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004760:	697a      	ldr	r2, [r7, #20]
 8004762:	429a      	cmp	r2, r3
 8004764:	d019      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004766:	4b24      	ldr	r3, [pc, #144]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800476c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004770:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004772:	4b21      	ldr	r3, [pc, #132]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004778:	4a1f      	ldr	r2, [pc, #124]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800477a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800477e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004782:	4b1d      	ldr	r3, [pc, #116]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004788:	4a1b      	ldr	r2, [pc, #108]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800478a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800478e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004792:	4a19      	ldr	r2, [pc, #100]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	f003 0301 	and.w	r3, r3, #1
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d016      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a4:	f7fd fd24 	bl	80021f0 <HAL_GetTick>
 80047a8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047aa:	e00b      	b.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ac:	f7fd fd20 	bl	80021f0 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d902      	bls.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	74fb      	strb	r3, [r7, #19]
            break;
 80047c2:	e006      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047c4:	4b0c      	ldr	r3, [pc, #48]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d0ec      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80047d2:	7cfb      	ldrb	r3, [r7, #19]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d10b      	bne.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047d8:	4b07      	ldr	r3, [pc, #28]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e6:	4904      	ldr	r1, [pc, #16]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80047ee:	e009      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80047f0:	7cfb      	ldrb	r3, [r7, #19]
 80047f2:	74bb      	strb	r3, [r7, #18]
 80047f4:	e006      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80047f6:	bf00      	nop
 80047f8:	40021000 	.word	0x40021000
 80047fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004800:	7cfb      	ldrb	r3, [r7, #19]
 8004802:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004804:	7c7b      	ldrb	r3, [r7, #17]
 8004806:	2b01      	cmp	r3, #1
 8004808:	d105      	bne.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800480a:	4b9b      	ldr	r3, [pc, #620]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800480c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800480e:	4a9a      	ldr	r2, [pc, #616]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004810:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004814:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00a      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004822:	4b95      	ldr	r3, [pc, #596]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004828:	f023 0203 	bic.w	r2, r3, #3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a1b      	ldr	r3, [r3, #32]
 8004830:	4991      	ldr	r1, [pc, #580]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004832:	4313      	orrs	r3, r2
 8004834:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0302 	and.w	r3, r3, #2
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00a      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004844:	4b8c      	ldr	r3, [pc, #560]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800484a:	f023 020c 	bic.w	r2, r3, #12
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004852:	4989      	ldr	r1, [pc, #548]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004854:	4313      	orrs	r3, r2
 8004856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0304 	and.w	r3, r3, #4
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00a      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004866:	4b84      	ldr	r3, [pc, #528]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800486c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004874:	4980      	ldr	r1, [pc, #512]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004876:	4313      	orrs	r3, r2
 8004878:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0320 	and.w	r3, r3, #32
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00a      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004888:	4b7b      	ldr	r3, [pc, #492]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800488a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800488e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004896:	4978      	ldr	r1, [pc, #480]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004898:	4313      	orrs	r3, r2
 800489a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00a      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048aa:	4b73      	ldr	r3, [pc, #460]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80048ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b8:	496f      	ldr	r1, [pc, #444]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00a      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80048cc:	4b6a      	ldr	r3, [pc, #424]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80048ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048da:	4967      	ldr	r1, [pc, #412]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80048dc:	4313      	orrs	r3, r2
 80048de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00a      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048ee:	4b62      	ldr	r3, [pc, #392]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80048f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fc:	495e      	ldr	r1, [pc, #376]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00a      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004910:	4b59      	ldr	r3, [pc, #356]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004916:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800491e:	4956      	ldr	r1, [pc, #344]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004920:	4313      	orrs	r3, r2
 8004922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00a      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004932:	4b51      	ldr	r3, [pc, #324]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004938:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004940:	494d      	ldr	r1, [pc, #308]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004942:	4313      	orrs	r3, r2
 8004944:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d028      	beq.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004954:	4b48      	ldr	r3, [pc, #288]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800495a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004962:	4945      	ldr	r1, [pc, #276]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004964:	4313      	orrs	r3, r2
 8004966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800496e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004972:	d106      	bne.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004974:	4b40      	ldr	r3, [pc, #256]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	4a3f      	ldr	r2, [pc, #252]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800497a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800497e:	60d3      	str	r3, [r2, #12]
 8004980:	e011      	b.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004986:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800498a:	d10c      	bne.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	3304      	adds	r3, #4
 8004990:	2101      	movs	r1, #1
 8004992:	4618      	mov	r0, r3
 8004994:	f000 f872 	bl	8004a7c <RCCEx_PLLSAI1_Config>
 8004998:	4603      	mov	r3, r0
 800499a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800499c:	7cfb      	ldrb	r3, [r7, #19]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d001      	beq.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 80049a2:	7cfb      	ldrb	r3, [r7, #19]
 80049a4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d028      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049b2:	4b31      	ldr	r3, [pc, #196]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80049b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049c0:	492d      	ldr	r1, [pc, #180]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049d0:	d106      	bne.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049d2:	4b29      	ldr	r3, [pc, #164]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	4a28      	ldr	r2, [pc, #160]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80049d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049dc:	60d3      	str	r3, [r2, #12]
 80049de:	e011      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049e8:	d10c      	bne.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	3304      	adds	r3, #4
 80049ee:	2101      	movs	r1, #1
 80049f0:	4618      	mov	r0, r3
 80049f2:	f000 f843 	bl	8004a7c <RCCEx_PLLSAI1_Config>
 80049f6:	4603      	mov	r3, r0
 80049f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049fa:	7cfb      	ldrb	r3, [r7, #19]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d001      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8004a00:	7cfb      	ldrb	r3, [r7, #19]
 8004a02:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d01c      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a10:	4b19      	ldr	r3, [pc, #100]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a16:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a1e:	4916      	ldr	r1, [pc, #88]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a2e:	d10c      	bne.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	3304      	adds	r3, #4
 8004a34:	2102      	movs	r1, #2
 8004a36:	4618      	mov	r0, r3
 8004a38:	f000 f820 	bl	8004a7c <RCCEx_PLLSAI1_Config>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a40:	7cfb      	ldrb	r3, [r7, #19]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d001      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8004a46:	7cfb      	ldrb	r3, [r7, #19]
 8004a48:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00a      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a56:	4b08      	ldr	r3, [pc, #32]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a5c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a64:	4904      	ldr	r1, [pc, #16]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004a6c:	7cbb      	ldrb	r3, [r7, #18]
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3718      	adds	r7, #24
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	40021000 	.word	0x40021000

08004a7c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a86:	2300      	movs	r3, #0
 8004a88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a8a:	4b74      	ldr	r3, [pc, #464]	; (8004c5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	f003 0303 	and.w	r3, r3, #3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d018      	beq.n	8004ac8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004a96:	4b71      	ldr	r3, [pc, #452]	; (8004c5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	f003 0203 	and.w	r2, r3, #3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d10d      	bne.n	8004ac2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
       ||
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d009      	beq.n	8004ac2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004aae:	4b6b      	ldr	r3, [pc, #428]	; (8004c5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	091b      	lsrs	r3, r3, #4
 8004ab4:	f003 0307 	and.w	r3, r3, #7
 8004ab8:	1c5a      	adds	r2, r3, #1
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
       ||
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d047      	beq.n	8004b52 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	73fb      	strb	r3, [r7, #15]
 8004ac6:	e044      	b.n	8004b52 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2b03      	cmp	r3, #3
 8004ace:	d018      	beq.n	8004b02 <RCCEx_PLLSAI1_Config+0x86>
 8004ad0:	2b03      	cmp	r3, #3
 8004ad2:	d825      	bhi.n	8004b20 <RCCEx_PLLSAI1_Config+0xa4>
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d002      	beq.n	8004ade <RCCEx_PLLSAI1_Config+0x62>
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d009      	beq.n	8004af0 <RCCEx_PLLSAI1_Config+0x74>
 8004adc:	e020      	b.n	8004b20 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ade:	4b5f      	ldr	r3, [pc, #380]	; (8004c5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d11d      	bne.n	8004b26 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004aee:	e01a      	b.n	8004b26 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004af0:	4b5a      	ldr	r3, [pc, #360]	; (8004c5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d116      	bne.n	8004b2a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b00:	e013      	b.n	8004b2a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b02:	4b56      	ldr	r3, [pc, #344]	; (8004c5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d10f      	bne.n	8004b2e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b0e:	4b53      	ldr	r3, [pc, #332]	; (8004c5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d109      	bne.n	8004b2e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b1e:	e006      	b.n	8004b2e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	73fb      	strb	r3, [r7, #15]
      break;
 8004b24:	e004      	b.n	8004b30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b26:	bf00      	nop
 8004b28:	e002      	b.n	8004b30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b2a:	bf00      	nop
 8004b2c:	e000      	b.n	8004b30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b2e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b30:	7bfb      	ldrb	r3, [r7, #15]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d10d      	bne.n	8004b52 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004b36:	4b49      	ldr	r3, [pc, #292]	; (8004c5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6819      	ldr	r1, [r3, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	3b01      	subs	r3, #1
 8004b48:	011b      	lsls	r3, r3, #4
 8004b4a:	430b      	orrs	r3, r1
 8004b4c:	4943      	ldr	r1, [pc, #268]	; (8004c5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004b52:	7bfb      	ldrb	r3, [r7, #15]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d17c      	bne.n	8004c52 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004b58:	4b40      	ldr	r3, [pc, #256]	; (8004c5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a3f      	ldr	r2, [pc, #252]	; (8004c5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b5e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b64:	f7fd fb44 	bl	80021f0 <HAL_GetTick>
 8004b68:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b6a:	e009      	b.n	8004b80 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b6c:	f7fd fb40 	bl	80021f0 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d902      	bls.n	8004b80 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	73fb      	strb	r3, [r7, #15]
        break;
 8004b7e:	e005      	b.n	8004b8c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b80:	4b36      	ldr	r3, [pc, #216]	; (8004c5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d1ef      	bne.n	8004b6c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004b8c:	7bfb      	ldrb	r3, [r7, #15]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d15f      	bne.n	8004c52 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d110      	bne.n	8004bba <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b98:	4b30      	ldr	r3, [pc, #192]	; (8004c5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004ba0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	6892      	ldr	r2, [r2, #8]
 8004ba8:	0211      	lsls	r1, r2, #8
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	68d2      	ldr	r2, [r2, #12]
 8004bae:	06d2      	lsls	r2, r2, #27
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	492a      	ldr	r1, [pc, #168]	; (8004c5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	610b      	str	r3, [r1, #16]
 8004bb8:	e027      	b.n	8004c0a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d112      	bne.n	8004be6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004bc0:	4b26      	ldr	r3, [pc, #152]	; (8004c5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004bc8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	6892      	ldr	r2, [r2, #8]
 8004bd0:	0211      	lsls	r1, r2, #8
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	6912      	ldr	r2, [r2, #16]
 8004bd6:	0852      	lsrs	r2, r2, #1
 8004bd8:	3a01      	subs	r2, #1
 8004bda:	0552      	lsls	r2, r2, #21
 8004bdc:	430a      	orrs	r2, r1
 8004bde:	491f      	ldr	r1, [pc, #124]	; (8004c5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	610b      	str	r3, [r1, #16]
 8004be4:	e011      	b.n	8004c0a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004be6:	4b1d      	ldr	r3, [pc, #116]	; (8004c5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004bee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	6892      	ldr	r2, [r2, #8]
 8004bf6:	0211      	lsls	r1, r2, #8
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	6952      	ldr	r2, [r2, #20]
 8004bfc:	0852      	lsrs	r2, r2, #1
 8004bfe:	3a01      	subs	r2, #1
 8004c00:	0652      	lsls	r2, r2, #25
 8004c02:	430a      	orrs	r2, r1
 8004c04:	4915      	ldr	r1, [pc, #84]	; (8004c5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004c0a:	4b14      	ldr	r3, [pc, #80]	; (8004c5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a13      	ldr	r2, [pc, #76]	; (8004c5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c10:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c14:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c16:	f7fd faeb 	bl	80021f0 <HAL_GetTick>
 8004c1a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c1c:	e009      	b.n	8004c32 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c1e:	f7fd fae7 	bl	80021f0 <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d902      	bls.n	8004c32 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	73fb      	strb	r3, [r7, #15]
          break;
 8004c30:	e005      	b.n	8004c3e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c32:	4b0a      	ldr	r3, [pc, #40]	; (8004c5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d0ef      	beq.n	8004c1e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004c3e:	7bfb      	ldrb	r3, [r7, #15]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d106      	bne.n	8004c52 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004c44:	4b05      	ldr	r3, [pc, #20]	; (8004c5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c46:	691a      	ldr	r2, [r3, #16]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	4903      	ldr	r1, [pc, #12]	; (8004c5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3710      	adds	r7, #16
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	40021000 	.word	0x40021000

08004c60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d101      	bne.n	8004c72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e095      	b.n	8004d9e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d108      	bne.n	8004c8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c82:	d009      	beq.n	8004c98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	61da      	str	r2, [r3, #28]
 8004c8a:	e005      	b.n	8004c98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d106      	bne.n	8004cb8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f7fd f90a 	bl	8001ecc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2202      	movs	r2, #2
 8004cbc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cce:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004cd8:	d902      	bls.n	8004ce0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	60fb      	str	r3, [r7, #12]
 8004cde:	e002      	b.n	8004ce6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004ce0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ce4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004cee:	d007      	beq.n	8004d00 <HAL_SPI_Init+0xa0>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004cf8:	d002      	beq.n	8004d00 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004d10:	431a      	orrs	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	431a      	orrs	r2, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	695b      	ldr	r3, [r3, #20]
 8004d20:	f003 0301 	and.w	r3, r3, #1
 8004d24:	431a      	orrs	r2, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	699b      	ldr	r3, [r3, #24]
 8004d2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d2e:	431a      	orrs	r2, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	69db      	ldr	r3, [r3, #28]
 8004d34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d38:	431a      	orrs	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a1b      	ldr	r3, [r3, #32]
 8004d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d42:	ea42 0103 	orr.w	r1, r2, r3
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d4a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	430a      	orrs	r2, r1
 8004d54:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	0c1b      	lsrs	r3, r3, #16
 8004d5c:	f003 0204 	and.w	r2, r3, #4
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d64:	f003 0310 	and.w	r3, r3, #16
 8004d68:	431a      	orrs	r2, r3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d6e:	f003 0308 	and.w	r3, r3, #8
 8004d72:	431a      	orrs	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004d7c:	ea42 0103 	orr.w	r1, r2, r3
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3710      	adds	r7, #16
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004da6:	b580      	push	{r7, lr}
 8004da8:	b082      	sub	sp, #8
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d101      	bne.n	8004db8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e049      	b.n	8004e4c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d106      	bne.n	8004dd2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f000 f841 	bl	8004e54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2202      	movs	r2, #2
 8004dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	3304      	adds	r3, #4
 8004de2:	4619      	mov	r1, r3
 8004de4:	4610      	mov	r0, r2
 8004de6:	f000 f9db 	bl	80051a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2201      	movs	r2, #1
 8004dee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2201      	movs	r2, #1
 8004df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2201      	movs	r2, #1
 8004e06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2201      	movs	r2, #1
 8004e16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2201      	movs	r2, #1
 8004e26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2201      	movs	r2, #1
 8004e36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2201      	movs	r2, #1
 8004e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3708      	adds	r7, #8
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d001      	beq.n	8004e80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e03b      	b.n	8004ef8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2202      	movs	r2, #2
 8004e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68da      	ldr	r2, [r3, #12]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f042 0201 	orr.w	r2, r2, #1
 8004e96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a19      	ldr	r2, [pc, #100]	; (8004f04 <HAL_TIM_Base_Start_IT+0x9c>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d009      	beq.n	8004eb6 <HAL_TIM_Base_Start_IT+0x4e>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eaa:	d004      	beq.n	8004eb6 <HAL_TIM_Base_Start_IT+0x4e>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a15      	ldr	r2, [pc, #84]	; (8004f08 <HAL_TIM_Base_Start_IT+0xa0>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d115      	bne.n	8004ee2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	689a      	ldr	r2, [r3, #8]
 8004ebc:	4b13      	ldr	r3, [pc, #76]	; (8004f0c <HAL_TIM_Base_Start_IT+0xa4>)
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2b06      	cmp	r3, #6
 8004ec6:	d015      	beq.n	8004ef4 <HAL_TIM_Base_Start_IT+0x8c>
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ece:	d011      	beq.n	8004ef4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f042 0201 	orr.w	r2, r2, #1
 8004ede:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ee0:	e008      	b.n	8004ef4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f042 0201 	orr.w	r2, r2, #1
 8004ef0:	601a      	str	r2, [r3, #0]
 8004ef2:	e000      	b.n	8004ef6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ef4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3714      	adds	r7, #20
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr
 8004f04:	40012c00 	.word	0x40012c00
 8004f08:	40014000 	.word	0x40014000
 8004f0c:	00010007 	.word	0x00010007

08004f10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	f003 0302 	and.w	r3, r3, #2
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d122      	bne.n	8004f6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	f003 0302 	and.w	r3, r3, #2
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d11b      	bne.n	8004f6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f06f 0202 	mvn.w	r2, #2
 8004f3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2201      	movs	r2, #1
 8004f42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	f003 0303 	and.w	r3, r3, #3
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d003      	beq.n	8004f5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 f905 	bl	8005162 <HAL_TIM_IC_CaptureCallback>
 8004f58:	e005      	b.n	8004f66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 f8f7 	bl	800514e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f000 f908 	bl	8005176 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	f003 0304 	and.w	r3, r3, #4
 8004f76:	2b04      	cmp	r3, #4
 8004f78:	d122      	bne.n	8004fc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	f003 0304 	and.w	r3, r3, #4
 8004f84:	2b04      	cmp	r3, #4
 8004f86:	d11b      	bne.n	8004fc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f06f 0204 	mvn.w	r2, #4
 8004f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2202      	movs	r2, #2
 8004f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	699b      	ldr	r3, [r3, #24]
 8004f9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d003      	beq.n	8004fae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 f8db 	bl	8005162 <HAL_TIM_IC_CaptureCallback>
 8004fac:	e005      	b.n	8004fba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 f8cd 	bl	800514e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 f8de 	bl	8005176 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	f003 0308 	and.w	r3, r3, #8
 8004fca:	2b08      	cmp	r3, #8
 8004fcc:	d122      	bne.n	8005014 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	f003 0308 	and.w	r3, r3, #8
 8004fd8:	2b08      	cmp	r3, #8
 8004fda:	d11b      	bne.n	8005014 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f06f 0208 	mvn.w	r2, #8
 8004fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2204      	movs	r2, #4
 8004fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	69db      	ldr	r3, [r3, #28]
 8004ff2:	f003 0303 	and.w	r3, r3, #3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d003      	beq.n	8005002 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 f8b1 	bl	8005162 <HAL_TIM_IC_CaptureCallback>
 8005000:	e005      	b.n	800500e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 f8a3 	bl	800514e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 f8b4 	bl	8005176 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	f003 0310 	and.w	r3, r3, #16
 800501e:	2b10      	cmp	r3, #16
 8005020:	d122      	bne.n	8005068 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	f003 0310 	and.w	r3, r3, #16
 800502c:	2b10      	cmp	r3, #16
 800502e:	d11b      	bne.n	8005068 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f06f 0210 	mvn.w	r2, #16
 8005038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2208      	movs	r2, #8
 800503e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	69db      	ldr	r3, [r3, #28]
 8005046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800504a:	2b00      	cmp	r3, #0
 800504c:	d003      	beq.n	8005056 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 f887 	bl	8005162 <HAL_TIM_IC_CaptureCallback>
 8005054:	e005      	b.n	8005062 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 f879 	bl	800514e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f000 f88a 	bl	8005176 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	f003 0301 	and.w	r3, r3, #1
 8005072:	2b01      	cmp	r3, #1
 8005074:	d10e      	bne.n	8005094 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	f003 0301 	and.w	r3, r3, #1
 8005080:	2b01      	cmp	r3, #1
 8005082:	d107      	bne.n	8005094 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f06f 0201 	mvn.w	r2, #1
 800508c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f7fc fc94 	bl	80019bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800509e:	2b80      	cmp	r3, #128	; 0x80
 80050a0:	d10e      	bne.n	80050c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ac:	2b80      	cmp	r3, #128	; 0x80
 80050ae:	d107      	bne.n	80050c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80050b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 f8de 	bl	800527c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050ce:	d10e      	bne.n	80050ee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050da:	2b80      	cmp	r3, #128	; 0x80
 80050dc:	d107      	bne.n	80050ee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80050e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f000 f8d1 	bl	8005290 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f8:	2b40      	cmp	r3, #64	; 0x40
 80050fa:	d10e      	bne.n	800511a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005106:	2b40      	cmp	r3, #64	; 0x40
 8005108:	d107      	bne.n	800511a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005112:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f000 f838 	bl	800518a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	691b      	ldr	r3, [r3, #16]
 8005120:	f003 0320 	and.w	r3, r3, #32
 8005124:	2b20      	cmp	r3, #32
 8005126:	d10e      	bne.n	8005146 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	f003 0320 	and.w	r3, r3, #32
 8005132:	2b20      	cmp	r3, #32
 8005134:	d107      	bne.n	8005146 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f06f 0220 	mvn.w	r2, #32
 800513e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f000 f891 	bl	8005268 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005146:	bf00      	nop
 8005148:	3708      	adds	r7, #8
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800514e:	b480      	push	{r7}
 8005150:	b083      	sub	sp, #12
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005156:	bf00      	nop
 8005158:	370c      	adds	r7, #12
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr

08005162 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005162:	b480      	push	{r7}
 8005164:	b083      	sub	sp, #12
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800516a:	bf00      	nop
 800516c:	370c      	adds	r7, #12
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr

08005176 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005176:	b480      	push	{r7}
 8005178:	b083      	sub	sp, #12
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800517e:	bf00      	nop
 8005180:	370c      	adds	r7, #12
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr

0800518a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800518a:	b480      	push	{r7}
 800518c:	b083      	sub	sp, #12
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005192:	bf00      	nop
 8005194:	370c      	adds	r7, #12
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
	...

080051a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a2a      	ldr	r2, [pc, #168]	; (800525c <TIM_Base_SetConfig+0xbc>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d003      	beq.n	80051c0 <TIM_Base_SetConfig+0x20>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051be:	d108      	bne.n	80051d2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a21      	ldr	r2, [pc, #132]	; (800525c <TIM_Base_SetConfig+0xbc>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d00b      	beq.n	80051f2 <TIM_Base_SetConfig+0x52>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051e0:	d007      	beq.n	80051f2 <TIM_Base_SetConfig+0x52>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a1e      	ldr	r2, [pc, #120]	; (8005260 <TIM_Base_SetConfig+0xc0>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d003      	beq.n	80051f2 <TIM_Base_SetConfig+0x52>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a1d      	ldr	r2, [pc, #116]	; (8005264 <TIM_Base_SetConfig+0xc4>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d108      	bne.n	8005204 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	4313      	orrs	r3, r2
 8005202:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	4313      	orrs	r3, r2
 8005210:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	689a      	ldr	r2, [r3, #8]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a0c      	ldr	r2, [pc, #48]	; (800525c <TIM_Base_SetConfig+0xbc>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d007      	beq.n	8005240 <TIM_Base_SetConfig+0xa0>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a0b      	ldr	r2, [pc, #44]	; (8005260 <TIM_Base_SetConfig+0xc0>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d003      	beq.n	8005240 <TIM_Base_SetConfig+0xa0>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a0a      	ldr	r2, [pc, #40]	; (8005264 <TIM_Base_SetConfig+0xc4>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d103      	bne.n	8005248 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	691a      	ldr	r2, [r3, #16]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	615a      	str	r2, [r3, #20]
}
 800524e:	bf00      	nop
 8005250:	3714      	adds	r7, #20
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	40012c00 	.word	0x40012c00
 8005260:	40014000 	.word	0x40014000
 8005264:	40014400 	.word	0x40014400

08005268 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005270:	bf00      	nop
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005284:	bf00      	nop
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005298:	bf00      	nop
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d101      	bne.n	80052b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e040      	b.n	8005338 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d106      	bne.n	80052cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f7fc fcb0 	bl	8001c2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2224      	movs	r2, #36	; 0x24
 80052d0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f022 0201 	bic.w	r2, r2, #1
 80052e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 f922 	bl	800552c <UART_SetConfig>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d101      	bne.n	80052f2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e022      	b.n	8005338 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d002      	beq.n	8005300 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 fb70 	bl	80059e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	685a      	ldr	r2, [r3, #4]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800530e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	689a      	ldr	r2, [r3, #8]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800531e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f042 0201 	orr.w	r2, r2, #1
 800532e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 fbf7 	bl	8005b24 <UART_CheckIdleState>
 8005336:	4603      	mov	r3, r0
}
 8005338:	4618      	mov	r0, r3
 800533a:	3708      	adds	r7, #8
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b08a      	sub	sp, #40	; 0x28
 8005344:	af02      	add	r7, sp, #8
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	603b      	str	r3, [r7, #0]
 800534c:	4613      	mov	r3, r2
 800534e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005354:	2b20      	cmp	r3, #32
 8005356:	f040 8082 	bne.w	800545e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d002      	beq.n	8005366 <HAL_UART_Transmit+0x26>
 8005360:	88fb      	ldrh	r3, [r7, #6]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d101      	bne.n	800536a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e07a      	b.n	8005460 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005370:	2b01      	cmp	r3, #1
 8005372:	d101      	bne.n	8005378 <HAL_UART_Transmit+0x38>
 8005374:	2302      	movs	r3, #2
 8005376:	e073      	b.n	8005460 <HAL_UART_Transmit+0x120>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2221      	movs	r2, #33	; 0x21
 800538c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800538e:	f7fc ff2f 	bl	80021f0 <HAL_GetTick>
 8005392:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	88fa      	ldrh	r2, [r7, #6]
 8005398:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	88fa      	ldrh	r2, [r7, #6]
 80053a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053ac:	d108      	bne.n	80053c0 <HAL_UART_Transmit+0x80>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d104      	bne.n	80053c0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80053b6:	2300      	movs	r3, #0
 80053b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	61bb      	str	r3, [r7, #24]
 80053be:	e003      	b.n	80053c8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053c4:	2300      	movs	r3, #0
 80053c6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80053d0:	e02d      	b.n	800542e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	9300      	str	r3, [sp, #0]
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	2200      	movs	r2, #0
 80053da:	2180      	movs	r1, #128	; 0x80
 80053dc:	68f8      	ldr	r0, [r7, #12]
 80053de:	f000 fbea 	bl	8005bb6 <UART_WaitOnFlagUntilTimeout>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d001      	beq.n	80053ec <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80053e8:	2303      	movs	r3, #3
 80053ea:	e039      	b.n	8005460 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d10b      	bne.n	800540a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	881a      	ldrh	r2, [r3, #0]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053fe:	b292      	uxth	r2, r2
 8005400:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	3302      	adds	r3, #2
 8005406:	61bb      	str	r3, [r7, #24]
 8005408:	e008      	b.n	800541c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	781a      	ldrb	r2, [r3, #0]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	b292      	uxth	r2, r2
 8005414:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	3301      	adds	r3, #1
 800541a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005422:	b29b      	uxth	r3, r3
 8005424:	3b01      	subs	r3, #1
 8005426:	b29a      	uxth	r2, r3
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005434:	b29b      	uxth	r3, r3
 8005436:	2b00      	cmp	r3, #0
 8005438:	d1cb      	bne.n	80053d2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	9300      	str	r3, [sp, #0]
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	2200      	movs	r2, #0
 8005442:	2140      	movs	r1, #64	; 0x40
 8005444:	68f8      	ldr	r0, [r7, #12]
 8005446:	f000 fbb6 	bl	8005bb6 <UART_WaitOnFlagUntilTimeout>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d001      	beq.n	8005454 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e005      	b.n	8005460 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2220      	movs	r2, #32
 8005458:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800545a:	2300      	movs	r3, #0
 800545c:	e000      	b.n	8005460 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800545e:	2302      	movs	r3, #2
  }
}
 8005460:	4618      	mov	r0, r3
 8005462:	3720      	adds	r7, #32
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b08a      	sub	sp, #40	; 0x28
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	4613      	mov	r3, r2
 8005474:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800547a:	2b20      	cmp	r3, #32
 800547c:	d142      	bne.n	8005504 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d002      	beq.n	800548a <HAL_UART_Receive_IT+0x22>
 8005484:	88fb      	ldrh	r3, [r7, #6]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d101      	bne.n	800548e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e03b      	b.n	8005506 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005494:	2b01      	cmp	r3, #1
 8005496:	d101      	bne.n	800549c <HAL_UART_Receive_IT+0x34>
 8005498:	2302      	movs	r3, #2
 800549a:	e034      	b.n	8005506 <HAL_UART_Receive_IT+0x9e>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2200      	movs	r2, #0
 80054a8:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a18      	ldr	r2, [pc, #96]	; (8005510 <HAL_UART_Receive_IT+0xa8>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d01f      	beq.n	80054f4 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d018      	beq.n	80054f4 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	e853 3f00 	ldrex	r3, [r3]
 80054ce:	613b      	str	r3, [r7, #16]
   return(result);
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80054d6:	627b      	str	r3, [r7, #36]	; 0x24
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	461a      	mov	r2, r3
 80054de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e0:	623b      	str	r3, [r7, #32]
 80054e2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e4:	69f9      	ldr	r1, [r7, #28]
 80054e6:	6a3a      	ldr	r2, [r7, #32]
 80054e8:	e841 2300 	strex	r3, r2, [r1]
 80054ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d1e6      	bne.n	80054c2 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80054f4:	88fb      	ldrh	r3, [r7, #6]
 80054f6:	461a      	mov	r2, r3
 80054f8:	68b9      	ldr	r1, [r7, #8]
 80054fa:	68f8      	ldr	r0, [r7, #12]
 80054fc:	f000 fc20 	bl	8005d40 <UART_Start_Receive_IT>
 8005500:	4603      	mov	r3, r0
 8005502:	e000      	b.n	8005506 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005504:	2302      	movs	r3, #2
  }
}
 8005506:	4618      	mov	r0, r3
 8005508:	3728      	adds	r7, #40	; 0x28
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	40008000 	.word	0x40008000

08005514 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	460b      	mov	r3, r1
 800551e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005520:	bf00      	nop
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800552c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005530:	b08a      	sub	sp, #40	; 0x28
 8005532:	af00      	add	r7, sp, #0
 8005534:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005536:	2300      	movs	r3, #0
 8005538:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	689a      	ldr	r2, [r3, #8]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	691b      	ldr	r3, [r3, #16]
 8005544:	431a      	orrs	r2, r3
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	431a      	orrs	r2, r3
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	69db      	ldr	r3, [r3, #28]
 8005550:	4313      	orrs	r3, r2
 8005552:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	4b9e      	ldr	r3, [pc, #632]	; (80057d4 <UART_SetConfig+0x2a8>)
 800555c:	4013      	ands	r3, r2
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	6812      	ldr	r2, [r2, #0]
 8005562:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005564:	430b      	orrs	r3, r1
 8005566:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	68da      	ldr	r2, [r3, #12]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	430a      	orrs	r2, r1
 800557c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a93      	ldr	r2, [pc, #588]	; (80057d8 <UART_SetConfig+0x2ac>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d004      	beq.n	8005598 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6a1b      	ldr	r3, [r3, #32]
 8005592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005594:	4313      	orrs	r3, r2
 8005596:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055a8:	430a      	orrs	r2, r1
 80055aa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a8a      	ldr	r2, [pc, #552]	; (80057dc <UART_SetConfig+0x2b0>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d126      	bne.n	8005604 <UART_SetConfig+0xd8>
 80055b6:	4b8a      	ldr	r3, [pc, #552]	; (80057e0 <UART_SetConfig+0x2b4>)
 80055b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055bc:	f003 0303 	and.w	r3, r3, #3
 80055c0:	2b03      	cmp	r3, #3
 80055c2:	d81b      	bhi.n	80055fc <UART_SetConfig+0xd0>
 80055c4:	a201      	add	r2, pc, #4	; (adr r2, 80055cc <UART_SetConfig+0xa0>)
 80055c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ca:	bf00      	nop
 80055cc:	080055dd 	.word	0x080055dd
 80055d0:	080055ed 	.word	0x080055ed
 80055d4:	080055e5 	.word	0x080055e5
 80055d8:	080055f5 	.word	0x080055f5
 80055dc:	2301      	movs	r3, #1
 80055de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055e2:	e0ab      	b.n	800573c <UART_SetConfig+0x210>
 80055e4:	2302      	movs	r3, #2
 80055e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055ea:	e0a7      	b.n	800573c <UART_SetConfig+0x210>
 80055ec:	2304      	movs	r3, #4
 80055ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055f2:	e0a3      	b.n	800573c <UART_SetConfig+0x210>
 80055f4:	2308      	movs	r3, #8
 80055f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055fa:	e09f      	b.n	800573c <UART_SetConfig+0x210>
 80055fc:	2310      	movs	r3, #16
 80055fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005602:	e09b      	b.n	800573c <UART_SetConfig+0x210>
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a76      	ldr	r2, [pc, #472]	; (80057e4 <UART_SetConfig+0x2b8>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d138      	bne.n	8005680 <UART_SetConfig+0x154>
 800560e:	4b74      	ldr	r3, [pc, #464]	; (80057e0 <UART_SetConfig+0x2b4>)
 8005610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005614:	f003 030c 	and.w	r3, r3, #12
 8005618:	2b0c      	cmp	r3, #12
 800561a:	d82d      	bhi.n	8005678 <UART_SetConfig+0x14c>
 800561c:	a201      	add	r2, pc, #4	; (adr r2, 8005624 <UART_SetConfig+0xf8>)
 800561e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005622:	bf00      	nop
 8005624:	08005659 	.word	0x08005659
 8005628:	08005679 	.word	0x08005679
 800562c:	08005679 	.word	0x08005679
 8005630:	08005679 	.word	0x08005679
 8005634:	08005669 	.word	0x08005669
 8005638:	08005679 	.word	0x08005679
 800563c:	08005679 	.word	0x08005679
 8005640:	08005679 	.word	0x08005679
 8005644:	08005661 	.word	0x08005661
 8005648:	08005679 	.word	0x08005679
 800564c:	08005679 	.word	0x08005679
 8005650:	08005679 	.word	0x08005679
 8005654:	08005671 	.word	0x08005671
 8005658:	2300      	movs	r3, #0
 800565a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800565e:	e06d      	b.n	800573c <UART_SetConfig+0x210>
 8005660:	2302      	movs	r3, #2
 8005662:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005666:	e069      	b.n	800573c <UART_SetConfig+0x210>
 8005668:	2304      	movs	r3, #4
 800566a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800566e:	e065      	b.n	800573c <UART_SetConfig+0x210>
 8005670:	2308      	movs	r3, #8
 8005672:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005676:	e061      	b.n	800573c <UART_SetConfig+0x210>
 8005678:	2310      	movs	r3, #16
 800567a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800567e:	e05d      	b.n	800573c <UART_SetConfig+0x210>
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a58      	ldr	r2, [pc, #352]	; (80057e8 <UART_SetConfig+0x2bc>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d125      	bne.n	80056d6 <UART_SetConfig+0x1aa>
 800568a:	4b55      	ldr	r3, [pc, #340]	; (80057e0 <UART_SetConfig+0x2b4>)
 800568c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005690:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005694:	2b30      	cmp	r3, #48	; 0x30
 8005696:	d016      	beq.n	80056c6 <UART_SetConfig+0x19a>
 8005698:	2b30      	cmp	r3, #48	; 0x30
 800569a:	d818      	bhi.n	80056ce <UART_SetConfig+0x1a2>
 800569c:	2b20      	cmp	r3, #32
 800569e:	d00a      	beq.n	80056b6 <UART_SetConfig+0x18a>
 80056a0:	2b20      	cmp	r3, #32
 80056a2:	d814      	bhi.n	80056ce <UART_SetConfig+0x1a2>
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d002      	beq.n	80056ae <UART_SetConfig+0x182>
 80056a8:	2b10      	cmp	r3, #16
 80056aa:	d008      	beq.n	80056be <UART_SetConfig+0x192>
 80056ac:	e00f      	b.n	80056ce <UART_SetConfig+0x1a2>
 80056ae:	2300      	movs	r3, #0
 80056b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056b4:	e042      	b.n	800573c <UART_SetConfig+0x210>
 80056b6:	2302      	movs	r3, #2
 80056b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056bc:	e03e      	b.n	800573c <UART_SetConfig+0x210>
 80056be:	2304      	movs	r3, #4
 80056c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056c4:	e03a      	b.n	800573c <UART_SetConfig+0x210>
 80056c6:	2308      	movs	r3, #8
 80056c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056cc:	e036      	b.n	800573c <UART_SetConfig+0x210>
 80056ce:	2310      	movs	r3, #16
 80056d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056d4:	e032      	b.n	800573c <UART_SetConfig+0x210>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a3f      	ldr	r2, [pc, #252]	; (80057d8 <UART_SetConfig+0x2ac>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d12a      	bne.n	8005736 <UART_SetConfig+0x20a>
 80056e0:	4b3f      	ldr	r3, [pc, #252]	; (80057e0 <UART_SetConfig+0x2b4>)
 80056e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056e6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80056ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056ee:	d01a      	beq.n	8005726 <UART_SetConfig+0x1fa>
 80056f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056f4:	d81b      	bhi.n	800572e <UART_SetConfig+0x202>
 80056f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056fa:	d00c      	beq.n	8005716 <UART_SetConfig+0x1ea>
 80056fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005700:	d815      	bhi.n	800572e <UART_SetConfig+0x202>
 8005702:	2b00      	cmp	r3, #0
 8005704:	d003      	beq.n	800570e <UART_SetConfig+0x1e2>
 8005706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800570a:	d008      	beq.n	800571e <UART_SetConfig+0x1f2>
 800570c:	e00f      	b.n	800572e <UART_SetConfig+0x202>
 800570e:	2300      	movs	r3, #0
 8005710:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005714:	e012      	b.n	800573c <UART_SetConfig+0x210>
 8005716:	2302      	movs	r3, #2
 8005718:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800571c:	e00e      	b.n	800573c <UART_SetConfig+0x210>
 800571e:	2304      	movs	r3, #4
 8005720:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005724:	e00a      	b.n	800573c <UART_SetConfig+0x210>
 8005726:	2308      	movs	r3, #8
 8005728:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800572c:	e006      	b.n	800573c <UART_SetConfig+0x210>
 800572e:	2310      	movs	r3, #16
 8005730:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005734:	e002      	b.n	800573c <UART_SetConfig+0x210>
 8005736:	2310      	movs	r3, #16
 8005738:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a25      	ldr	r2, [pc, #148]	; (80057d8 <UART_SetConfig+0x2ac>)
 8005742:	4293      	cmp	r3, r2
 8005744:	f040 808a 	bne.w	800585c <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005748:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800574c:	2b08      	cmp	r3, #8
 800574e:	d824      	bhi.n	800579a <UART_SetConfig+0x26e>
 8005750:	a201      	add	r2, pc, #4	; (adr r2, 8005758 <UART_SetConfig+0x22c>)
 8005752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005756:	bf00      	nop
 8005758:	0800577d 	.word	0x0800577d
 800575c:	0800579b 	.word	0x0800579b
 8005760:	08005785 	.word	0x08005785
 8005764:	0800579b 	.word	0x0800579b
 8005768:	0800578b 	.word	0x0800578b
 800576c:	0800579b 	.word	0x0800579b
 8005770:	0800579b 	.word	0x0800579b
 8005774:	0800579b 	.word	0x0800579b
 8005778:	08005793 	.word	0x08005793
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800577c:	f7fe fea8 	bl	80044d0 <HAL_RCC_GetPCLK1Freq>
 8005780:	61f8      	str	r0, [r7, #28]
        break;
 8005782:	e010      	b.n	80057a6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005784:	4b19      	ldr	r3, [pc, #100]	; (80057ec <UART_SetConfig+0x2c0>)
 8005786:	61fb      	str	r3, [r7, #28]
        break;
 8005788:	e00d      	b.n	80057a6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800578a:	f7fe fe09 	bl	80043a0 <HAL_RCC_GetSysClockFreq>
 800578e:	61f8      	str	r0, [r7, #28]
        break;
 8005790:	e009      	b.n	80057a6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005792:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005796:	61fb      	str	r3, [r7, #28]
        break;
 8005798:	e005      	b.n	80057a6 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800579a:	2300      	movs	r3, #0
 800579c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80057a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	f000 8109 	beq.w	80059c0 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	685a      	ldr	r2, [r3, #4]
 80057b2:	4613      	mov	r3, r2
 80057b4:	005b      	lsls	r3, r3, #1
 80057b6:	4413      	add	r3, r2
 80057b8:	69fa      	ldr	r2, [r7, #28]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d305      	bcc.n	80057ca <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80057c4:	69fa      	ldr	r2, [r7, #28]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d912      	bls.n	80057f0 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80057d0:	e0f6      	b.n	80059c0 <UART_SetConfig+0x494>
 80057d2:	bf00      	nop
 80057d4:	efff69f3 	.word	0xefff69f3
 80057d8:	40008000 	.word	0x40008000
 80057dc:	40013800 	.word	0x40013800
 80057e0:	40021000 	.word	0x40021000
 80057e4:	40004400 	.word	0x40004400
 80057e8:	40004800 	.word	0x40004800
 80057ec:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	2200      	movs	r2, #0
 80057f4:	461c      	mov	r4, r3
 80057f6:	4615      	mov	r5, r2
 80057f8:	f04f 0200 	mov.w	r2, #0
 80057fc:	f04f 0300 	mov.w	r3, #0
 8005800:	022b      	lsls	r3, r5, #8
 8005802:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005806:	0222      	lsls	r2, r4, #8
 8005808:	68f9      	ldr	r1, [r7, #12]
 800580a:	6849      	ldr	r1, [r1, #4]
 800580c:	0849      	lsrs	r1, r1, #1
 800580e:	2000      	movs	r0, #0
 8005810:	4688      	mov	r8, r1
 8005812:	4681      	mov	r9, r0
 8005814:	eb12 0a08 	adds.w	sl, r2, r8
 8005818:	eb43 0b09 	adc.w	fp, r3, r9
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	603b      	str	r3, [r7, #0]
 8005824:	607a      	str	r2, [r7, #4]
 8005826:	e9d7 2300 	ldrd	r2, r3, [r7]
 800582a:	4650      	mov	r0, sl
 800582c:	4659      	mov	r1, fp
 800582e:	f7fa fd37 	bl	80002a0 <__aeabi_uldivmod>
 8005832:	4602      	mov	r2, r0
 8005834:	460b      	mov	r3, r1
 8005836:	4613      	mov	r3, r2
 8005838:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005840:	d308      	bcc.n	8005854 <UART_SetConfig+0x328>
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005848:	d204      	bcs.n	8005854 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	69ba      	ldr	r2, [r7, #24]
 8005850:	60da      	str	r2, [r3, #12]
 8005852:	e0b5      	b.n	80059c0 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800585a:	e0b1      	b.n	80059c0 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	69db      	ldr	r3, [r3, #28]
 8005860:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005864:	d15d      	bne.n	8005922 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8005866:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800586a:	2b08      	cmp	r3, #8
 800586c:	d827      	bhi.n	80058be <UART_SetConfig+0x392>
 800586e:	a201      	add	r2, pc, #4	; (adr r2, 8005874 <UART_SetConfig+0x348>)
 8005870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005874:	08005899 	.word	0x08005899
 8005878:	080058a1 	.word	0x080058a1
 800587c:	080058a9 	.word	0x080058a9
 8005880:	080058bf 	.word	0x080058bf
 8005884:	080058af 	.word	0x080058af
 8005888:	080058bf 	.word	0x080058bf
 800588c:	080058bf 	.word	0x080058bf
 8005890:	080058bf 	.word	0x080058bf
 8005894:	080058b7 	.word	0x080058b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005898:	f7fe fe1a 	bl	80044d0 <HAL_RCC_GetPCLK1Freq>
 800589c:	61f8      	str	r0, [r7, #28]
        break;
 800589e:	e014      	b.n	80058ca <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058a0:	f7fe fe2c 	bl	80044fc <HAL_RCC_GetPCLK2Freq>
 80058a4:	61f8      	str	r0, [r7, #28]
        break;
 80058a6:	e010      	b.n	80058ca <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058a8:	4b4c      	ldr	r3, [pc, #304]	; (80059dc <UART_SetConfig+0x4b0>)
 80058aa:	61fb      	str	r3, [r7, #28]
        break;
 80058ac:	e00d      	b.n	80058ca <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058ae:	f7fe fd77 	bl	80043a0 <HAL_RCC_GetSysClockFreq>
 80058b2:	61f8      	str	r0, [r7, #28]
        break;
 80058b4:	e009      	b.n	80058ca <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058ba:	61fb      	str	r3, [r7, #28]
        break;
 80058bc:	e005      	b.n	80058ca <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80058be:	2300      	movs	r3, #0
 80058c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80058c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d077      	beq.n	80059c0 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	005a      	lsls	r2, r3, #1
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	085b      	lsrs	r3, r3, #1
 80058da:	441a      	add	r2, r3
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058e4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	2b0f      	cmp	r3, #15
 80058ea:	d916      	bls.n	800591a <UART_SetConfig+0x3ee>
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058f2:	d212      	bcs.n	800591a <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	f023 030f 	bic.w	r3, r3, #15
 80058fc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	085b      	lsrs	r3, r3, #1
 8005902:	b29b      	uxth	r3, r3
 8005904:	f003 0307 	and.w	r3, r3, #7
 8005908:	b29a      	uxth	r2, r3
 800590a:	8afb      	ldrh	r3, [r7, #22]
 800590c:	4313      	orrs	r3, r2
 800590e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	8afa      	ldrh	r2, [r7, #22]
 8005916:	60da      	str	r2, [r3, #12]
 8005918:	e052      	b.n	80059c0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005920:	e04e      	b.n	80059c0 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005922:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005926:	2b08      	cmp	r3, #8
 8005928:	d827      	bhi.n	800597a <UART_SetConfig+0x44e>
 800592a:	a201      	add	r2, pc, #4	; (adr r2, 8005930 <UART_SetConfig+0x404>)
 800592c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005930:	08005955 	.word	0x08005955
 8005934:	0800595d 	.word	0x0800595d
 8005938:	08005965 	.word	0x08005965
 800593c:	0800597b 	.word	0x0800597b
 8005940:	0800596b 	.word	0x0800596b
 8005944:	0800597b 	.word	0x0800597b
 8005948:	0800597b 	.word	0x0800597b
 800594c:	0800597b 	.word	0x0800597b
 8005950:	08005973 	.word	0x08005973
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005954:	f7fe fdbc 	bl	80044d0 <HAL_RCC_GetPCLK1Freq>
 8005958:	61f8      	str	r0, [r7, #28]
        break;
 800595a:	e014      	b.n	8005986 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800595c:	f7fe fdce 	bl	80044fc <HAL_RCC_GetPCLK2Freq>
 8005960:	61f8      	str	r0, [r7, #28]
        break;
 8005962:	e010      	b.n	8005986 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005964:	4b1d      	ldr	r3, [pc, #116]	; (80059dc <UART_SetConfig+0x4b0>)
 8005966:	61fb      	str	r3, [r7, #28]
        break;
 8005968:	e00d      	b.n	8005986 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800596a:	f7fe fd19 	bl	80043a0 <HAL_RCC_GetSysClockFreq>
 800596e:	61f8      	str	r0, [r7, #28]
        break;
 8005970:	e009      	b.n	8005986 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005972:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005976:	61fb      	str	r3, [r7, #28]
        break;
 8005978:	e005      	b.n	8005986 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800597a:	2300      	movs	r3, #0
 800597c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005984:	bf00      	nop
    }

    if (pclk != 0U)
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d019      	beq.n	80059c0 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	085a      	lsrs	r2, r3, #1
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	441a      	add	r2, r3
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	fbb2 f3f3 	udiv	r3, r2, r3
 800599e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	2b0f      	cmp	r3, #15
 80059a4:	d909      	bls.n	80059ba <UART_SetConfig+0x48e>
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059ac:	d205      	bcs.n	80059ba <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	b29a      	uxth	r2, r3
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	60da      	str	r2, [r3, #12]
 80059b8:	e002      	b.n	80059c0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2200      	movs	r2, #0
 80059c4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2200      	movs	r2, #0
 80059ca:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80059cc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3728      	adds	r7, #40	; 0x28
 80059d4:	46bd      	mov	sp, r7
 80059d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059da:	bf00      	nop
 80059dc:	00f42400 	.word	0x00f42400

080059e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ec:	f003 0301 	and.w	r3, r3, #1
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00a      	beq.n	8005a0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	430a      	orrs	r2, r1
 8005a08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0e:	f003 0302 	and.w	r3, r3, #2
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00a      	beq.n	8005a2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	430a      	orrs	r2, r1
 8005a2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a30:	f003 0304 	and.w	r3, r3, #4
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d00a      	beq.n	8005a4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	430a      	orrs	r2, r1
 8005a4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a52:	f003 0308 	and.w	r3, r3, #8
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00a      	beq.n	8005a70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	430a      	orrs	r2, r1
 8005a6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a74:	f003 0310 	and.w	r3, r3, #16
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d00a      	beq.n	8005a92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	430a      	orrs	r2, r1
 8005a90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a96:	f003 0320 	and.w	r3, r3, #32
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d00a      	beq.n	8005ab4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	430a      	orrs	r2, r1
 8005ab2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d01a      	beq.n	8005af6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	430a      	orrs	r2, r1
 8005ad4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ada:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ade:	d10a      	bne.n	8005af6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	430a      	orrs	r2, r1
 8005af4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00a      	beq.n	8005b18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	430a      	orrs	r2, r1
 8005b16:	605a      	str	r2, [r3, #4]
  }
}
 8005b18:	bf00      	nop
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b086      	sub	sp, #24
 8005b28:	af02      	add	r7, sp, #8
 8005b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b34:	f7fc fb5c 	bl	80021f0 <HAL_GetTick>
 8005b38:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 0308 	and.w	r3, r3, #8
 8005b44:	2b08      	cmp	r3, #8
 8005b46:	d10e      	bne.n	8005b66 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b4c:	9300      	str	r3, [sp, #0]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 f82d 	bl	8005bb6 <UART_WaitOnFlagUntilTimeout>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d001      	beq.n	8005b66 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b62:	2303      	movs	r3, #3
 8005b64:	e023      	b.n	8005bae <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 0304 	and.w	r3, r3, #4
 8005b70:	2b04      	cmp	r3, #4
 8005b72:	d10e      	bne.n	8005b92 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b78:	9300      	str	r3, [sp, #0]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 f817 	bl	8005bb6 <UART_WaitOnFlagUntilTimeout>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d001      	beq.n	8005b92 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e00d      	b.n	8005bae <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2220      	movs	r2, #32
 8005b96:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2220      	movs	r2, #32
 8005b9c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3710      	adds	r7, #16
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}

08005bb6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005bb6:	b580      	push	{r7, lr}
 8005bb8:	b09c      	sub	sp, #112	; 0x70
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	60f8      	str	r0, [r7, #12]
 8005bbe:	60b9      	str	r1, [r7, #8]
 8005bc0:	603b      	str	r3, [r7, #0]
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bc6:	e0a5      	b.n	8005d14 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bce:	f000 80a1 	beq.w	8005d14 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bd2:	f7fc fb0d 	bl	80021f0 <HAL_GetTick>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	1ad3      	subs	r3, r2, r3
 8005bdc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d302      	bcc.n	8005be8 <UART_WaitOnFlagUntilTimeout+0x32>
 8005be2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d13e      	bne.n	8005c66 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bf0:	e853 3f00 	ldrex	r3, [r3]
 8005bf4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005bf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bf8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005bfc:	667b      	str	r3, [r7, #100]	; 0x64
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	461a      	mov	r2, r3
 8005c04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c08:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c0a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005c0c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005c0e:	e841 2300 	strex	r3, r2, [r1]
 8005c12:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005c14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d1e6      	bne.n	8005be8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	3308      	adds	r3, #8
 8005c20:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c24:	e853 3f00 	ldrex	r3, [r3]
 8005c28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c2c:	f023 0301 	bic.w	r3, r3, #1
 8005c30:	663b      	str	r3, [r7, #96]	; 0x60
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	3308      	adds	r3, #8
 8005c38:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005c3a:	64ba      	str	r2, [r7, #72]	; 0x48
 8005c3c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c3e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005c40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c42:	e841 2300 	strex	r3, r2, [r1]
 8005c46:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005c48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d1e5      	bne.n	8005c1a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2220      	movs	r2, #32
 8005c52:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2220      	movs	r2, #32
 8005c58:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	e067      	b.n	8005d36 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 0304 	and.w	r3, r3, #4
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d04f      	beq.n	8005d14 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	69db      	ldr	r3, [r3, #28]
 8005c7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c82:	d147      	bne.n	8005d14 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c8c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c96:	e853 3f00 	ldrex	r3, [r3]
 8005c9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ca2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	461a      	mov	r2, r3
 8005caa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cac:	637b      	str	r3, [r7, #52]	; 0x34
 8005cae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005cb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cb4:	e841 2300 	strex	r3, r2, [r1]
 8005cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d1e6      	bne.n	8005c8e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	3308      	adds	r3, #8
 8005cc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	e853 3f00 	ldrex	r3, [r3]
 8005cce:	613b      	str	r3, [r7, #16]
   return(result);
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	f023 0301 	bic.w	r3, r3, #1
 8005cd6:	66bb      	str	r3, [r7, #104]	; 0x68
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	3308      	adds	r3, #8
 8005cde:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005ce0:	623a      	str	r2, [r7, #32]
 8005ce2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce4:	69f9      	ldr	r1, [r7, #28]
 8005ce6:	6a3a      	ldr	r2, [r7, #32]
 8005ce8:	e841 2300 	strex	r3, r2, [r1]
 8005cec:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d1e5      	bne.n	8005cc0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2220      	movs	r2, #32
 8005cf8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2220      	movs	r2, #32
 8005cfe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2220      	movs	r2, #32
 8005d04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005d10:	2303      	movs	r3, #3
 8005d12:	e010      	b.n	8005d36 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	69da      	ldr	r2, [r3, #28]
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	68ba      	ldr	r2, [r7, #8]
 8005d20:	429a      	cmp	r2, r3
 8005d22:	bf0c      	ite	eq
 8005d24:	2301      	moveq	r3, #1
 8005d26:	2300      	movne	r3, #0
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	79fb      	ldrb	r3, [r7, #7]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	f43f af4a 	beq.w	8005bc8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3770      	adds	r7, #112	; 0x70
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
	...

08005d40 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b097      	sub	sp, #92	; 0x5c
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	68ba      	ldr	r2, [r7, #8]
 8005d52:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	88fa      	ldrh	r2, [r7, #6]
 8005d58:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	88fa      	ldrh	r2, [r7, #6]
 8005d60:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2200      	movs	r2, #0
 8005d68:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d72:	d10e      	bne.n	8005d92 <UART_Start_Receive_IT+0x52>
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	691b      	ldr	r3, [r3, #16]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d105      	bne.n	8005d88 <UART_Start_Receive_IT+0x48>
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005d82:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d86:	e02d      	b.n	8005de4 <UART_Start_Receive_IT+0xa4>
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	22ff      	movs	r2, #255	; 0xff
 8005d8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d90:	e028      	b.n	8005de4 <UART_Start_Receive_IT+0xa4>
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d10d      	bne.n	8005db6 <UART_Start_Receive_IT+0x76>
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d104      	bne.n	8005dac <UART_Start_Receive_IT+0x6c>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	22ff      	movs	r2, #255	; 0xff
 8005da6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005daa:	e01b      	b.n	8005de4 <UART_Start_Receive_IT+0xa4>
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	227f      	movs	r2, #127	; 0x7f
 8005db0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005db4:	e016      	b.n	8005de4 <UART_Start_Receive_IT+0xa4>
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005dbe:	d10d      	bne.n	8005ddc <UART_Start_Receive_IT+0x9c>
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d104      	bne.n	8005dd2 <UART_Start_Receive_IT+0x92>
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	227f      	movs	r2, #127	; 0x7f
 8005dcc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005dd0:	e008      	b.n	8005de4 <UART_Start_Receive_IT+0xa4>
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	223f      	movs	r2, #63	; 0x3f
 8005dd6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005dda:	e003      	b.n	8005de4 <UART_Start_Receive_IT+0xa4>
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2222      	movs	r2, #34	; 0x22
 8005df0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	3308      	adds	r3, #8
 8005df8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dfc:	e853 3f00 	ldrex	r3, [r3]
 8005e00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e04:	f043 0301 	orr.w	r3, r3, #1
 8005e08:	657b      	str	r3, [r7, #84]	; 0x54
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	3308      	adds	r3, #8
 8005e10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005e12:	64ba      	str	r2, [r7, #72]	; 0x48
 8005e14:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005e18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e1a:	e841 2300 	strex	r3, r2, [r1]
 8005e1e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005e20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1e5      	bne.n	8005df2 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e2e:	d107      	bne.n	8005e40 <UART_Start_Receive_IT+0x100>
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d103      	bne.n	8005e40 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	4a24      	ldr	r2, [pc, #144]	; (8005ecc <UART_Start_Receive_IT+0x18c>)
 8005e3c:	665a      	str	r2, [r3, #100]	; 0x64
 8005e3e:	e002      	b.n	8005e46 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	4a23      	ldr	r2, [pc, #140]	; (8005ed0 <UART_Start_Receive_IT+0x190>)
 8005e44:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d019      	beq.n	8005e8a <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e5e:	e853 3f00 	ldrex	r3, [r3]
 8005e62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e66:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	461a      	mov	r2, r3
 8005e72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e74:	637b      	str	r3, [r7, #52]	; 0x34
 8005e76:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e7c:	e841 2300 	strex	r3, r2, [r1]
 8005e80:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d1e6      	bne.n	8005e56 <UART_Start_Receive_IT+0x116>
 8005e88:	e018      	b.n	8005ebc <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	e853 3f00 	ldrex	r3, [r3]
 8005e96:	613b      	str	r3, [r7, #16]
   return(result);
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	f043 0320 	orr.w	r3, r3, #32
 8005e9e:	653b      	str	r3, [r7, #80]	; 0x50
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ea8:	623b      	str	r3, [r7, #32]
 8005eaa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eac:	69f9      	ldr	r1, [r7, #28]
 8005eae:	6a3a      	ldr	r2, [r7, #32]
 8005eb0:	e841 2300 	strex	r3, r2, [r1]
 8005eb4:	61bb      	str	r3, [r7, #24]
   return(result);
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d1e6      	bne.n	8005e8a <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	375c      	adds	r7, #92	; 0x5c
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop
 8005ecc:	08006035 	.word	0x08006035
 8005ed0:	08005ed5 	.word	0x08005ed5

08005ed4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b096      	sub	sp, #88	; 0x58
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005ee2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005eea:	2b22      	cmp	r3, #34	; 0x22
 8005eec:	f040 8094 	bne.w	8006018 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005ef6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005efa:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005efe:	b2d9      	uxtb	r1, r3
 8005f00:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005f04:	b2da      	uxtb	r2, r3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f0a:	400a      	ands	r2, r1
 8005f0c:	b2d2      	uxtb	r2, r2
 8005f0e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f14:	1c5a      	adds	r2, r3, #1
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	3b01      	subs	r3, #1
 8005f24:	b29a      	uxth	r2, r3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d179      	bne.n	800602c <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f40:	e853 3f00 	ldrex	r3, [r3]
 8005f44:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f4c:	653b      	str	r3, [r7, #80]	; 0x50
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	461a      	mov	r2, r3
 8005f54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f56:	647b      	str	r3, [r7, #68]	; 0x44
 8005f58:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f5a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f5e:	e841 2300 	strex	r3, r2, [r1]
 8005f62:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d1e6      	bne.n	8005f38 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	3308      	adds	r3, #8
 8005f70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f74:	e853 3f00 	ldrex	r3, [r3]
 8005f78:	623b      	str	r3, [r7, #32]
   return(result);
 8005f7a:	6a3b      	ldr	r3, [r7, #32]
 8005f7c:	f023 0301 	bic.w	r3, r3, #1
 8005f80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	3308      	adds	r3, #8
 8005f88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f8a:	633a      	str	r2, [r7, #48]	; 0x30
 8005f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f92:	e841 2300 	strex	r3, r2, [r1]
 8005f96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d1e5      	bne.n	8005f6a <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2220      	movs	r2, #32
 8005fa2:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d12e      	bne.n	8006010 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	e853 3f00 	ldrex	r3, [r3]
 8005fc4:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f023 0310 	bic.w	r3, r3, #16
 8005fcc:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fd6:	61fb      	str	r3, [r7, #28]
 8005fd8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fda:	69b9      	ldr	r1, [r7, #24]
 8005fdc:	69fa      	ldr	r2, [r7, #28]
 8005fde:	e841 2300 	strex	r3, r2, [r1]
 8005fe2:	617b      	str	r3, [r7, #20]
   return(result);
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d1e6      	bne.n	8005fb8 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	69db      	ldr	r3, [r3, #28]
 8005ff0:	f003 0310 	and.w	r3, r3, #16
 8005ff4:	2b10      	cmp	r3, #16
 8005ff6:	d103      	bne.n	8006000 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2210      	movs	r2, #16
 8005ffe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006006:	4619      	mov	r1, r3
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f7ff fa83 	bl	8005514 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800600e:	e00d      	b.n	800602c <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f7fa feeb 	bl	8000dec <HAL_UART_RxCpltCallback>
}
 8006016:	e009      	b.n	800602c <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	8b1b      	ldrh	r3, [r3, #24]
 800601e:	b29a      	uxth	r2, r3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f042 0208 	orr.w	r2, r2, #8
 8006028:	b292      	uxth	r2, r2
 800602a:	831a      	strh	r2, [r3, #24]
}
 800602c:	bf00      	nop
 800602e:	3758      	adds	r7, #88	; 0x58
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b096      	sub	sp, #88	; 0x58
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006042:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800604a:	2b22      	cmp	r3, #34	; 0x22
 800604c:	f040 8094 	bne.w	8006178 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006056:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800605e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006060:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006064:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006068:	4013      	ands	r3, r2
 800606a:	b29a      	uxth	r2, r3
 800606c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800606e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006074:	1c9a      	adds	r2, r3, #2
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006080:	b29b      	uxth	r3, r3
 8006082:	3b01      	subs	r3, #1
 8006084:	b29a      	uxth	r2, r3
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006092:	b29b      	uxth	r3, r3
 8006094:	2b00      	cmp	r3, #0
 8006096:	d179      	bne.n	800618c <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800609e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060a0:	e853 3f00 	ldrex	r3, [r3]
 80060a4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80060a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	461a      	mov	r2, r3
 80060b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060b6:	643b      	str	r3, [r7, #64]	; 0x40
 80060b8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80060bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80060be:	e841 2300 	strex	r3, r2, [r1]
 80060c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80060c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d1e6      	bne.n	8006098 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	3308      	adds	r3, #8
 80060d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d2:	6a3b      	ldr	r3, [r7, #32]
 80060d4:	e853 3f00 	ldrex	r3, [r3]
 80060d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80060da:	69fb      	ldr	r3, [r7, #28]
 80060dc:	f023 0301 	bic.w	r3, r3, #1
 80060e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	3308      	adds	r3, #8
 80060e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060f2:	e841 2300 	strex	r3, r2, [r1]
 80060f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d1e5      	bne.n	80060ca <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2220      	movs	r2, #32
 8006102:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800610e:	2b01      	cmp	r3, #1
 8006110:	d12e      	bne.n	8006170 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	e853 3f00 	ldrex	r3, [r3]
 8006124:	60bb      	str	r3, [r7, #8]
   return(result);
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	f023 0310 	bic.w	r3, r3, #16
 800612c:	647b      	str	r3, [r7, #68]	; 0x44
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	461a      	mov	r2, r3
 8006134:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006136:	61bb      	str	r3, [r7, #24]
 8006138:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613a:	6979      	ldr	r1, [r7, #20]
 800613c:	69ba      	ldr	r2, [r7, #24]
 800613e:	e841 2300 	strex	r3, r2, [r1]
 8006142:	613b      	str	r3, [r7, #16]
   return(result);
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d1e6      	bne.n	8006118 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	69db      	ldr	r3, [r3, #28]
 8006150:	f003 0310 	and.w	r3, r3, #16
 8006154:	2b10      	cmp	r3, #16
 8006156:	d103      	bne.n	8006160 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2210      	movs	r2, #16
 800615e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006166:	4619      	mov	r1, r3
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f7ff f9d3 	bl	8005514 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800616e:	e00d      	b.n	800618c <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f7fa fe3b 	bl	8000dec <HAL_UART_RxCpltCallback>
}
 8006176:	e009      	b.n	800618c <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	8b1b      	ldrh	r3, [r3, #24]
 800617e:	b29a      	uxth	r2, r3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f042 0208 	orr.w	r2, r2, #8
 8006188:	b292      	uxth	r2, r2
 800618a:	831a      	strh	r2, [r3, #24]
}
 800618c:	bf00      	nop
 800618e:	3758      	adds	r7, #88	; 0x58
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b086      	sub	sp, #24
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	607a      	str	r2, [r7, #4]
 80061a0:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d101      	bne.n	80061ac <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e056      	b.n	800625a <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d106      	bne.n	80061c2 <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	f7fb fd35 	bl	8001c2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2224      	movs	r2, #36	; 0x24
 80061c6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f022 0201 	bic.w	r2, r2, #1
 80061d6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80061d8:	68f8      	ldr	r0, [r7, #12]
 80061da:	f7ff f9a7 	bl	800552c <UART_SetConfig>
 80061de:	4603      	mov	r3, r0
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d101      	bne.n	80061e8 <HAL_RS485Ex_Init+0x54>
  {
    return HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	e038      	b.n	800625a <HAL_RS485Ex_Init+0xc6>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d002      	beq.n	80061f6 <HAL_RS485Ex_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	f7ff fbf5 	bl	80059e0 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	689a      	ldr	r2, [r3, #8]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006204:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	68ba      	ldr	r2, [r7, #8]
 8006216:	430a      	orrs	r2, r1
 8006218:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	055b      	lsls	r3, r3, #21
 800621e:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	041b      	lsls	r3, r3, #16
 8006224:	697a      	ldr	r2, [r7, #20]
 8006226:	4313      	orrs	r3, r2
 8006228:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 8006234:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8006238:	68fa      	ldr	r2, [r7, #12]
 800623a:	6812      	ldr	r2, [r2, #0]
 800623c:	6979      	ldr	r1, [r7, #20]
 800623e:	430b      	orrs	r3, r1
 8006240:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f042 0201 	orr.w	r2, r2, #1
 8006250:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006252:	68f8      	ldr	r0, [r7, #12]
 8006254:	f7ff fc66 	bl	8005b24 <UART_CheckIdleState>
 8006258:	4603      	mov	r3, r0
}
 800625a:	4618      	mov	r0, r3
 800625c:	3718      	adds	r7, #24
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}

08006262 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006262:	b580      	push	{r7, lr}
 8006264:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006266:	f001 f899 	bl	800739c <vTaskStartScheduler>
  
  return osOK;
 800626a:	2300      	movs	r3, #0
}
 800626c:	4618      	mov	r0, r3
 800626e:	bd80      	pop	{r7, pc}

08006270 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d001      	beq.n	8006286 <osDelay+0x16>
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	e000      	b.n	8006288 <osDelay+0x18>
 8006286:	2301      	movs	r3, #1
 8006288:	4618      	mov	r0, r3
 800628a:	f001 f853 	bl	8007334 <vTaskDelay>
  
  return osOK;
 800628e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006290:	4618      	mov	r0, r3
 8006292:	3710      	adds	r7, #16
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f103 0208 	add.w	r2, r3, #8
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f04f 32ff 	mov.w	r2, #4294967295
 80062b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f103 0208 	add.w	r2, r3, #8
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f103 0208 	add.w	r2, r3, #8
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80062cc:	bf00      	nop
 80062ce:	370c      	adds	r7, #12
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr

080062d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80062e6:	bf00      	nop
 80062e8:	370c      	adds	r7, #12
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr

080062f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80062f2:	b480      	push	{r7}
 80062f4:	b085      	sub	sp, #20
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
 80062fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	68fa      	ldr	r2, [r7, #12]
 8006306:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	689a      	ldr	r2, [r3, #8]
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	683a      	ldr	r2, [r7, #0]
 8006316:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	683a      	ldr	r2, [r7, #0]
 800631c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	1c5a      	adds	r2, r3, #1
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	601a      	str	r2, [r3, #0]
}
 800632e:	bf00      	nop
 8006330:	3714      	adds	r7, #20
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr

0800633a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800633a:	b480      	push	{r7}
 800633c:	b085      	sub	sp, #20
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
 8006342:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006350:	d103      	bne.n	800635a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	60fb      	str	r3, [r7, #12]
 8006358:	e00c      	b.n	8006374 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	3308      	adds	r3, #8
 800635e:	60fb      	str	r3, [r7, #12]
 8006360:	e002      	b.n	8006368 <vListInsert+0x2e>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	60fb      	str	r3, [r7, #12]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	68ba      	ldr	r2, [r7, #8]
 8006370:	429a      	cmp	r2, r3
 8006372:	d2f6      	bcs.n	8006362 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	685a      	ldr	r2, [r3, #4]
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	683a      	ldr	r2, [r7, #0]
 8006382:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	68fa      	ldr	r2, [r7, #12]
 8006388:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	683a      	ldr	r2, [r7, #0]
 800638e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	1c5a      	adds	r2, r3, #1
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	601a      	str	r2, [r3, #0]
}
 80063a0:	bf00      	nop
 80063a2:	3714      	adds	r7, #20
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80063ac:	b480      	push	{r7}
 80063ae:	b085      	sub	sp, #20
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	691b      	ldr	r3, [r3, #16]
 80063b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	6892      	ldr	r2, [r2, #8]
 80063c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	687a      	ldr	r2, [r7, #4]
 80063ca:	6852      	ldr	r2, [r2, #4]
 80063cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d103      	bne.n	80063e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	689a      	ldr	r2, [r3, #8]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	1e5a      	subs	r2, r3, #1
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3714      	adds	r7, #20
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d10a      	bne.n	800642a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006418:	f383 8811 	msr	BASEPRI, r3
 800641c:	f3bf 8f6f 	isb	sy
 8006420:	f3bf 8f4f 	dsb	sy
 8006424:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006426:	bf00      	nop
 8006428:	e7fe      	b.n	8006428 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800642a:	f001 ff2b 	bl	8008284 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006436:	68f9      	ldr	r1, [r7, #12]
 8006438:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800643a:	fb01 f303 	mul.w	r3, r1, r3
 800643e:	441a      	add	r2, r3
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2200      	movs	r2, #0
 8006448:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800645a:	3b01      	subs	r3, #1
 800645c:	68f9      	ldr	r1, [r7, #12]
 800645e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006460:	fb01 f303 	mul.w	r3, r1, r3
 8006464:	441a      	add	r2, r3
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	22ff      	movs	r2, #255	; 0xff
 800646e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	22ff      	movs	r2, #255	; 0xff
 8006476:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d114      	bne.n	80064aa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d01a      	beq.n	80064be <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	3310      	adds	r3, #16
 800648c:	4618      	mov	r0, r3
 800648e:	f001 f9e7 	bl	8007860 <xTaskRemoveFromEventList>
 8006492:	4603      	mov	r3, r0
 8006494:	2b00      	cmp	r3, #0
 8006496:	d012      	beq.n	80064be <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006498:	4b0c      	ldr	r3, [pc, #48]	; (80064cc <xQueueGenericReset+0xcc>)
 800649a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800649e:	601a      	str	r2, [r3, #0]
 80064a0:	f3bf 8f4f 	dsb	sy
 80064a4:	f3bf 8f6f 	isb	sy
 80064a8:	e009      	b.n	80064be <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	3310      	adds	r3, #16
 80064ae:	4618      	mov	r0, r3
 80064b0:	f7ff fef2 	bl	8006298 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	3324      	adds	r3, #36	; 0x24
 80064b8:	4618      	mov	r0, r3
 80064ba:	f7ff feed 	bl	8006298 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80064be:	f001 ff11 	bl	80082e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80064c2:	2301      	movs	r3, #1
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3710      	adds	r7, #16
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	e000ed04 	.word	0xe000ed04

080064d0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b08a      	sub	sp, #40	; 0x28
 80064d4:	af02      	add	r7, sp, #8
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	60b9      	str	r1, [r7, #8]
 80064da:	4613      	mov	r3, r2
 80064dc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d10a      	bne.n	80064fa <xQueueGenericCreate+0x2a>
	__asm volatile
 80064e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e8:	f383 8811 	msr	BASEPRI, r3
 80064ec:	f3bf 8f6f 	isb	sy
 80064f0:	f3bf 8f4f 	dsb	sy
 80064f4:	613b      	str	r3, [r7, #16]
}
 80064f6:	bf00      	nop
 80064f8:	e7fe      	b.n	80064f8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	68ba      	ldr	r2, [r7, #8]
 80064fe:	fb02 f303 	mul.w	r3, r2, r3
 8006502:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	3348      	adds	r3, #72	; 0x48
 8006508:	4618      	mov	r0, r3
 800650a:	f001 ffdd 	bl	80084c8 <pvPortMalloc>
 800650e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d011      	beq.n	800653a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	3348      	adds	r3, #72	; 0x48
 800651e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	2200      	movs	r2, #0
 8006524:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006528:	79fa      	ldrb	r2, [r7, #7]
 800652a:	69bb      	ldr	r3, [r7, #24]
 800652c:	9300      	str	r3, [sp, #0]
 800652e:	4613      	mov	r3, r2
 8006530:	697a      	ldr	r2, [r7, #20]
 8006532:	68b9      	ldr	r1, [r7, #8]
 8006534:	68f8      	ldr	r0, [r7, #12]
 8006536:	f000 f805 	bl	8006544 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800653a:	69bb      	ldr	r3, [r7, #24]
	}
 800653c:	4618      	mov	r0, r3
 800653e:	3720      	adds	r7, #32
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	607a      	str	r2, [r7, #4]
 8006550:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d103      	bne.n	8006560 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	69ba      	ldr	r2, [r7, #24]
 800655c:	601a      	str	r2, [r3, #0]
 800655e:	e002      	b.n	8006566 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800656c:	69bb      	ldr	r3, [r7, #24]
 800656e:	68ba      	ldr	r2, [r7, #8]
 8006570:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006572:	2101      	movs	r1, #1
 8006574:	69b8      	ldr	r0, [r7, #24]
 8006576:	f7ff ff43 	bl	8006400 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800657a:	bf00      	nop
 800657c:	3710      	adds	r7, #16
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}

08006582 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006582:	b580      	push	{r7, lr}
 8006584:	b082      	sub	sp, #8
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d00e      	beq.n	80065ae <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2200      	movs	r2, #0
 800659a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80065a2:	2300      	movs	r3, #0
 80065a4:	2200      	movs	r2, #0
 80065a6:	2100      	movs	r1, #0
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f000 f81d 	bl	80065e8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80065ae:	bf00      	nop
 80065b0:	3708      	adds	r7, #8
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}

080065b6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80065b6:	b580      	push	{r7, lr}
 80065b8:	b086      	sub	sp, #24
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	4603      	mov	r3, r0
 80065be:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80065c0:	2301      	movs	r3, #1
 80065c2:	617b      	str	r3, [r7, #20]
 80065c4:	2300      	movs	r3, #0
 80065c6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80065c8:	79fb      	ldrb	r3, [r7, #7]
 80065ca:	461a      	mov	r2, r3
 80065cc:	6939      	ldr	r1, [r7, #16]
 80065ce:	6978      	ldr	r0, [r7, #20]
 80065d0:	f7ff ff7e 	bl	80064d0 <xQueueGenericCreate>
 80065d4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80065d6:	68f8      	ldr	r0, [r7, #12]
 80065d8:	f7ff ffd3 	bl	8006582 <prvInitialiseMutex>

		return xNewQueue;
 80065dc:	68fb      	ldr	r3, [r7, #12]
	}
 80065de:	4618      	mov	r0, r3
 80065e0:	3718      	adds	r7, #24
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
	...

080065e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b08e      	sub	sp, #56	; 0x38
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	60b9      	str	r1, [r7, #8]
 80065f2:	607a      	str	r2, [r7, #4]
 80065f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80065f6:	2300      	movs	r3, #0
 80065f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80065fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006600:	2b00      	cmp	r3, #0
 8006602:	d10a      	bne.n	800661a <xQueueGenericSend+0x32>
	__asm volatile
 8006604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006608:	f383 8811 	msr	BASEPRI, r3
 800660c:	f3bf 8f6f 	isb	sy
 8006610:	f3bf 8f4f 	dsb	sy
 8006614:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006616:	bf00      	nop
 8006618:	e7fe      	b.n	8006618 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d103      	bne.n	8006628 <xQueueGenericSend+0x40>
 8006620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006624:	2b00      	cmp	r3, #0
 8006626:	d101      	bne.n	800662c <xQueueGenericSend+0x44>
 8006628:	2301      	movs	r3, #1
 800662a:	e000      	b.n	800662e <xQueueGenericSend+0x46>
 800662c:	2300      	movs	r3, #0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d10a      	bne.n	8006648 <xQueueGenericSend+0x60>
	__asm volatile
 8006632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006636:	f383 8811 	msr	BASEPRI, r3
 800663a:	f3bf 8f6f 	isb	sy
 800663e:	f3bf 8f4f 	dsb	sy
 8006642:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006644:	bf00      	nop
 8006646:	e7fe      	b.n	8006646 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	2b02      	cmp	r3, #2
 800664c:	d103      	bne.n	8006656 <xQueueGenericSend+0x6e>
 800664e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006652:	2b01      	cmp	r3, #1
 8006654:	d101      	bne.n	800665a <xQueueGenericSend+0x72>
 8006656:	2301      	movs	r3, #1
 8006658:	e000      	b.n	800665c <xQueueGenericSend+0x74>
 800665a:	2300      	movs	r3, #0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d10a      	bne.n	8006676 <xQueueGenericSend+0x8e>
	__asm volatile
 8006660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006664:	f383 8811 	msr	BASEPRI, r3
 8006668:	f3bf 8f6f 	isb	sy
 800666c:	f3bf 8f4f 	dsb	sy
 8006670:	623b      	str	r3, [r7, #32]
}
 8006672:	bf00      	nop
 8006674:	e7fe      	b.n	8006674 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006676:	f001 fab3 	bl	8007be0 <xTaskGetSchedulerState>
 800667a:	4603      	mov	r3, r0
 800667c:	2b00      	cmp	r3, #0
 800667e:	d102      	bne.n	8006686 <xQueueGenericSend+0x9e>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d101      	bne.n	800668a <xQueueGenericSend+0xa2>
 8006686:	2301      	movs	r3, #1
 8006688:	e000      	b.n	800668c <xQueueGenericSend+0xa4>
 800668a:	2300      	movs	r3, #0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d10a      	bne.n	80066a6 <xQueueGenericSend+0xbe>
	__asm volatile
 8006690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006694:	f383 8811 	msr	BASEPRI, r3
 8006698:	f3bf 8f6f 	isb	sy
 800669c:	f3bf 8f4f 	dsb	sy
 80066a0:	61fb      	str	r3, [r7, #28]
}
 80066a2:	bf00      	nop
 80066a4:	e7fe      	b.n	80066a4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80066a6:	f001 fded 	bl	8008284 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80066aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d302      	bcc.n	80066bc <xQueueGenericSend+0xd4>
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	2b02      	cmp	r3, #2
 80066ba:	d129      	bne.n	8006710 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80066bc:	683a      	ldr	r2, [r7, #0]
 80066be:	68b9      	ldr	r1, [r7, #8]
 80066c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066c2:	f000 fb52 	bl	8006d6a <prvCopyDataToQueue>
 80066c6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80066c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d010      	beq.n	80066f2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80066d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d2:	3324      	adds	r3, #36	; 0x24
 80066d4:	4618      	mov	r0, r3
 80066d6:	f001 f8c3 	bl	8007860 <xTaskRemoveFromEventList>
 80066da:	4603      	mov	r3, r0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d013      	beq.n	8006708 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80066e0:	4b3f      	ldr	r3, [pc, #252]	; (80067e0 <xQueueGenericSend+0x1f8>)
 80066e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066e6:	601a      	str	r2, [r3, #0]
 80066e8:	f3bf 8f4f 	dsb	sy
 80066ec:	f3bf 8f6f 	isb	sy
 80066f0:	e00a      	b.n	8006708 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80066f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d007      	beq.n	8006708 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80066f8:	4b39      	ldr	r3, [pc, #228]	; (80067e0 <xQueueGenericSend+0x1f8>)
 80066fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066fe:	601a      	str	r2, [r3, #0]
 8006700:	f3bf 8f4f 	dsb	sy
 8006704:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006708:	f001 fdec 	bl	80082e4 <vPortExitCritical>
				return pdPASS;
 800670c:	2301      	movs	r3, #1
 800670e:	e063      	b.n	80067d8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d103      	bne.n	800671e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006716:	f001 fde5 	bl	80082e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800671a:	2300      	movs	r3, #0
 800671c:	e05c      	b.n	80067d8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800671e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006720:	2b00      	cmp	r3, #0
 8006722:	d106      	bne.n	8006732 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006724:	f107 0314 	add.w	r3, r7, #20
 8006728:	4618      	mov	r0, r3
 800672a:	f001 f8fb 	bl	8007924 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800672e:	2301      	movs	r3, #1
 8006730:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006732:	f001 fdd7 	bl	80082e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006736:	f000 fe9b 	bl	8007470 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800673a:	f001 fda3 	bl	8008284 <vPortEnterCritical>
 800673e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006740:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006744:	b25b      	sxtb	r3, r3
 8006746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800674a:	d103      	bne.n	8006754 <xQueueGenericSend+0x16c>
 800674c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800674e:	2200      	movs	r2, #0
 8006750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006756:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800675a:	b25b      	sxtb	r3, r3
 800675c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006760:	d103      	bne.n	800676a <xQueueGenericSend+0x182>
 8006762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006764:	2200      	movs	r2, #0
 8006766:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800676a:	f001 fdbb 	bl	80082e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800676e:	1d3a      	adds	r2, r7, #4
 8006770:	f107 0314 	add.w	r3, r7, #20
 8006774:	4611      	mov	r1, r2
 8006776:	4618      	mov	r0, r3
 8006778:	f001 f8ea 	bl	8007950 <xTaskCheckForTimeOut>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d124      	bne.n	80067cc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006782:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006784:	f000 fbe9 	bl	8006f5a <prvIsQueueFull>
 8006788:	4603      	mov	r3, r0
 800678a:	2b00      	cmp	r3, #0
 800678c:	d018      	beq.n	80067c0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800678e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006790:	3310      	adds	r3, #16
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	4611      	mov	r1, r2
 8006796:	4618      	mov	r0, r3
 8006798:	f001 f83e 	bl	8007818 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800679c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800679e:	f000 fb74 	bl	8006e8a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80067a2:	f000 fe73 	bl	800748c <xTaskResumeAll>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	f47f af7c 	bne.w	80066a6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80067ae:	4b0c      	ldr	r3, [pc, #48]	; (80067e0 <xQueueGenericSend+0x1f8>)
 80067b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067b4:	601a      	str	r2, [r3, #0]
 80067b6:	f3bf 8f4f 	dsb	sy
 80067ba:	f3bf 8f6f 	isb	sy
 80067be:	e772      	b.n	80066a6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80067c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067c2:	f000 fb62 	bl	8006e8a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80067c6:	f000 fe61 	bl	800748c <xTaskResumeAll>
 80067ca:	e76c      	b.n	80066a6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80067cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067ce:	f000 fb5c 	bl	8006e8a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80067d2:	f000 fe5b 	bl	800748c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80067d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3738      	adds	r7, #56	; 0x38
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	e000ed04 	.word	0xe000ed04

080067e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b090      	sub	sp, #64	; 0x40
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	60b9      	str	r1, [r7, #8]
 80067ee:	607a      	str	r2, [r7, #4]
 80067f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80067f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d10a      	bne.n	8006812 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80067fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006800:	f383 8811 	msr	BASEPRI, r3
 8006804:	f3bf 8f6f 	isb	sy
 8006808:	f3bf 8f4f 	dsb	sy
 800680c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800680e:	bf00      	nop
 8006810:	e7fe      	b.n	8006810 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d103      	bne.n	8006820 <xQueueGenericSendFromISR+0x3c>
 8006818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800681a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681c:	2b00      	cmp	r3, #0
 800681e:	d101      	bne.n	8006824 <xQueueGenericSendFromISR+0x40>
 8006820:	2301      	movs	r3, #1
 8006822:	e000      	b.n	8006826 <xQueueGenericSendFromISR+0x42>
 8006824:	2300      	movs	r3, #0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d10a      	bne.n	8006840 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800682a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800682e:	f383 8811 	msr	BASEPRI, r3
 8006832:	f3bf 8f6f 	isb	sy
 8006836:	f3bf 8f4f 	dsb	sy
 800683a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800683c:	bf00      	nop
 800683e:	e7fe      	b.n	800683e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	2b02      	cmp	r3, #2
 8006844:	d103      	bne.n	800684e <xQueueGenericSendFromISR+0x6a>
 8006846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800684a:	2b01      	cmp	r3, #1
 800684c:	d101      	bne.n	8006852 <xQueueGenericSendFromISR+0x6e>
 800684e:	2301      	movs	r3, #1
 8006850:	e000      	b.n	8006854 <xQueueGenericSendFromISR+0x70>
 8006852:	2300      	movs	r3, #0
 8006854:	2b00      	cmp	r3, #0
 8006856:	d10a      	bne.n	800686e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800685c:	f383 8811 	msr	BASEPRI, r3
 8006860:	f3bf 8f6f 	isb	sy
 8006864:	f3bf 8f4f 	dsb	sy
 8006868:	623b      	str	r3, [r7, #32]
}
 800686a:	bf00      	nop
 800686c:	e7fe      	b.n	800686c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800686e:	f001 fdeb 	bl	8008448 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006872:	f3ef 8211 	mrs	r2, BASEPRI
 8006876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800687a:	f383 8811 	msr	BASEPRI, r3
 800687e:	f3bf 8f6f 	isb	sy
 8006882:	f3bf 8f4f 	dsb	sy
 8006886:	61fa      	str	r2, [r7, #28]
 8006888:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800688a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800688c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800688e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006890:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006896:	429a      	cmp	r2, r3
 8006898:	d302      	bcc.n	80068a0 <xQueueGenericSendFromISR+0xbc>
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	2b02      	cmp	r3, #2
 800689e:	d12f      	bne.n	8006900 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80068a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ae:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80068b0:	683a      	ldr	r2, [r7, #0]
 80068b2:	68b9      	ldr	r1, [r7, #8]
 80068b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80068b6:	f000 fa58 	bl	8006d6a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80068ba:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80068be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068c2:	d112      	bne.n	80068ea <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d016      	beq.n	80068fa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ce:	3324      	adds	r3, #36	; 0x24
 80068d0:	4618      	mov	r0, r3
 80068d2:	f000 ffc5 	bl	8007860 <xTaskRemoveFromEventList>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d00e      	beq.n	80068fa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d00b      	beq.n	80068fa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2201      	movs	r2, #1
 80068e6:	601a      	str	r2, [r3, #0]
 80068e8:	e007      	b.n	80068fa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80068ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80068ee:	3301      	adds	r3, #1
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	b25a      	sxtb	r2, r3
 80068f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80068fa:	2301      	movs	r3, #1
 80068fc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80068fe:	e001      	b.n	8006904 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006900:	2300      	movs	r3, #0
 8006902:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006906:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800690e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006912:	4618      	mov	r0, r3
 8006914:	3740      	adds	r7, #64	; 0x40
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
	...

0800691c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b08c      	sub	sp, #48	; 0x30
 8006920:	af00      	add	r7, sp, #0
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006928:	2300      	movs	r3, #0
 800692a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006932:	2b00      	cmp	r3, #0
 8006934:	d10a      	bne.n	800694c <xQueueReceive+0x30>
	__asm volatile
 8006936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800693a:	f383 8811 	msr	BASEPRI, r3
 800693e:	f3bf 8f6f 	isb	sy
 8006942:	f3bf 8f4f 	dsb	sy
 8006946:	623b      	str	r3, [r7, #32]
}
 8006948:	bf00      	nop
 800694a:	e7fe      	b.n	800694a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d103      	bne.n	800695a <xQueueReceive+0x3e>
 8006952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006956:	2b00      	cmp	r3, #0
 8006958:	d101      	bne.n	800695e <xQueueReceive+0x42>
 800695a:	2301      	movs	r3, #1
 800695c:	e000      	b.n	8006960 <xQueueReceive+0x44>
 800695e:	2300      	movs	r3, #0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d10a      	bne.n	800697a <xQueueReceive+0x5e>
	__asm volatile
 8006964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006968:	f383 8811 	msr	BASEPRI, r3
 800696c:	f3bf 8f6f 	isb	sy
 8006970:	f3bf 8f4f 	dsb	sy
 8006974:	61fb      	str	r3, [r7, #28]
}
 8006976:	bf00      	nop
 8006978:	e7fe      	b.n	8006978 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800697a:	f001 f931 	bl	8007be0 <xTaskGetSchedulerState>
 800697e:	4603      	mov	r3, r0
 8006980:	2b00      	cmp	r3, #0
 8006982:	d102      	bne.n	800698a <xQueueReceive+0x6e>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d101      	bne.n	800698e <xQueueReceive+0x72>
 800698a:	2301      	movs	r3, #1
 800698c:	e000      	b.n	8006990 <xQueueReceive+0x74>
 800698e:	2300      	movs	r3, #0
 8006990:	2b00      	cmp	r3, #0
 8006992:	d10a      	bne.n	80069aa <xQueueReceive+0x8e>
	__asm volatile
 8006994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006998:	f383 8811 	msr	BASEPRI, r3
 800699c:	f3bf 8f6f 	isb	sy
 80069a0:	f3bf 8f4f 	dsb	sy
 80069a4:	61bb      	str	r3, [r7, #24]
}
 80069a6:	bf00      	nop
 80069a8:	e7fe      	b.n	80069a8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80069aa:	f001 fc6b 	bl	8008284 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80069ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80069b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d01f      	beq.n	80069fa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80069ba:	68b9      	ldr	r1, [r7, #8]
 80069bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069be:	f000 fa3e 	bl	8006e3e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80069c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c4:	1e5a      	subs	r2, r3, #1
 80069c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d00f      	beq.n	80069f2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d4:	3310      	adds	r3, #16
 80069d6:	4618      	mov	r0, r3
 80069d8:	f000 ff42 	bl	8007860 <xTaskRemoveFromEventList>
 80069dc:	4603      	mov	r3, r0
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d007      	beq.n	80069f2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80069e2:	4b3d      	ldr	r3, [pc, #244]	; (8006ad8 <xQueueReceive+0x1bc>)
 80069e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069e8:	601a      	str	r2, [r3, #0]
 80069ea:	f3bf 8f4f 	dsb	sy
 80069ee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80069f2:	f001 fc77 	bl	80082e4 <vPortExitCritical>
				return pdPASS;
 80069f6:	2301      	movs	r3, #1
 80069f8:	e069      	b.n	8006ace <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d103      	bne.n	8006a08 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a00:	f001 fc70 	bl	80082e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006a04:	2300      	movs	r3, #0
 8006a06:	e062      	b.n	8006ace <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d106      	bne.n	8006a1c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a0e:	f107 0310 	add.w	r3, r7, #16
 8006a12:	4618      	mov	r0, r3
 8006a14:	f000 ff86 	bl	8007924 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a1c:	f001 fc62 	bl	80082e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a20:	f000 fd26 	bl	8007470 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a24:	f001 fc2e 	bl	8008284 <vPortEnterCritical>
 8006a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a2e:	b25b      	sxtb	r3, r3
 8006a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a34:	d103      	bne.n	8006a3e <xQueueReceive+0x122>
 8006a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a44:	b25b      	sxtb	r3, r3
 8006a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a4a:	d103      	bne.n	8006a54 <xQueueReceive+0x138>
 8006a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a54:	f001 fc46 	bl	80082e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a58:	1d3a      	adds	r2, r7, #4
 8006a5a:	f107 0310 	add.w	r3, r7, #16
 8006a5e:	4611      	mov	r1, r2
 8006a60:	4618      	mov	r0, r3
 8006a62:	f000 ff75 	bl	8007950 <xTaskCheckForTimeOut>
 8006a66:	4603      	mov	r3, r0
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d123      	bne.n	8006ab4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a6e:	f000 fa5e 	bl	8006f2e <prvIsQueueEmpty>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d017      	beq.n	8006aa8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a7a:	3324      	adds	r3, #36	; 0x24
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	4611      	mov	r1, r2
 8006a80:	4618      	mov	r0, r3
 8006a82:	f000 fec9 	bl	8007818 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006a86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a88:	f000 f9ff 	bl	8006e8a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006a8c:	f000 fcfe 	bl	800748c <xTaskResumeAll>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d189      	bne.n	80069aa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006a96:	4b10      	ldr	r3, [pc, #64]	; (8006ad8 <xQueueReceive+0x1bc>)
 8006a98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a9c:	601a      	str	r2, [r3, #0]
 8006a9e:	f3bf 8f4f 	dsb	sy
 8006aa2:	f3bf 8f6f 	isb	sy
 8006aa6:	e780      	b.n	80069aa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006aa8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006aaa:	f000 f9ee 	bl	8006e8a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006aae:	f000 fced 	bl	800748c <xTaskResumeAll>
 8006ab2:	e77a      	b.n	80069aa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006ab4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ab6:	f000 f9e8 	bl	8006e8a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006aba:	f000 fce7 	bl	800748c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006abe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ac0:	f000 fa35 	bl	8006f2e <prvIsQueueEmpty>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	f43f af6f 	beq.w	80069aa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006acc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3730      	adds	r7, #48	; 0x30
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	e000ed04 	.word	0xe000ed04

08006adc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b08e      	sub	sp, #56	; 0x38
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006aee:	2300      	movs	r3, #0
 8006af0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d10a      	bne.n	8006b0e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afc:	f383 8811 	msr	BASEPRI, r3
 8006b00:	f3bf 8f6f 	isb	sy
 8006b04:	f3bf 8f4f 	dsb	sy
 8006b08:	623b      	str	r3, [r7, #32]
}
 8006b0a:	bf00      	nop
 8006b0c:	e7fe      	b.n	8006b0c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00a      	beq.n	8006b2c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b1a:	f383 8811 	msr	BASEPRI, r3
 8006b1e:	f3bf 8f6f 	isb	sy
 8006b22:	f3bf 8f4f 	dsb	sy
 8006b26:	61fb      	str	r3, [r7, #28]
}
 8006b28:	bf00      	nop
 8006b2a:	e7fe      	b.n	8006b2a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b2c:	f001 f858 	bl	8007be0 <xTaskGetSchedulerState>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d102      	bne.n	8006b3c <xQueueSemaphoreTake+0x60>
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d101      	bne.n	8006b40 <xQueueSemaphoreTake+0x64>
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e000      	b.n	8006b42 <xQueueSemaphoreTake+0x66>
 8006b40:	2300      	movs	r3, #0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d10a      	bne.n	8006b5c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b4a:	f383 8811 	msr	BASEPRI, r3
 8006b4e:	f3bf 8f6f 	isb	sy
 8006b52:	f3bf 8f4f 	dsb	sy
 8006b56:	61bb      	str	r3, [r7, #24]
}
 8006b58:	bf00      	nop
 8006b5a:	e7fe      	b.n	8006b5a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b5c:	f001 fb92 	bl	8008284 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b64:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d024      	beq.n	8006bb6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b6e:	1e5a      	subs	r2, r3, #1
 8006b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b72:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d104      	bne.n	8006b86 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006b7c:	f001 f9d8 	bl	8007f30 <pvTaskIncrementMutexHeldCount>
 8006b80:	4602      	mov	r2, r0
 8006b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b84:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b88:	691b      	ldr	r3, [r3, #16]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d00f      	beq.n	8006bae <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b90:	3310      	adds	r3, #16
 8006b92:	4618      	mov	r0, r3
 8006b94:	f000 fe64 	bl	8007860 <xTaskRemoveFromEventList>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d007      	beq.n	8006bae <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006b9e:	4b54      	ldr	r3, [pc, #336]	; (8006cf0 <xQueueSemaphoreTake+0x214>)
 8006ba0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ba4:	601a      	str	r2, [r3, #0]
 8006ba6:	f3bf 8f4f 	dsb	sy
 8006baa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006bae:	f001 fb99 	bl	80082e4 <vPortExitCritical>
				return pdPASS;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e097      	b.n	8006ce6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d111      	bne.n	8006be0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d00a      	beq.n	8006bd8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc6:	f383 8811 	msr	BASEPRI, r3
 8006bca:	f3bf 8f6f 	isb	sy
 8006bce:	f3bf 8f4f 	dsb	sy
 8006bd2:	617b      	str	r3, [r7, #20]
}
 8006bd4:	bf00      	nop
 8006bd6:	e7fe      	b.n	8006bd6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006bd8:	f001 fb84 	bl	80082e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	e082      	b.n	8006ce6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d106      	bne.n	8006bf4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006be6:	f107 030c 	add.w	r3, r7, #12
 8006bea:	4618      	mov	r0, r3
 8006bec:	f000 fe9a 	bl	8007924 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006bf4:	f001 fb76 	bl	80082e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006bf8:	f000 fc3a 	bl	8007470 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006bfc:	f001 fb42 	bl	8008284 <vPortEnterCritical>
 8006c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c06:	b25b      	sxtb	r3, r3
 8006c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c0c:	d103      	bne.n	8006c16 <xQueueSemaphoreTake+0x13a>
 8006c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c10:	2200      	movs	r2, #0
 8006c12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c1c:	b25b      	sxtb	r3, r3
 8006c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c22:	d103      	bne.n	8006c2c <xQueueSemaphoreTake+0x150>
 8006c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c26:	2200      	movs	r2, #0
 8006c28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c2c:	f001 fb5a 	bl	80082e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c30:	463a      	mov	r2, r7
 8006c32:	f107 030c 	add.w	r3, r7, #12
 8006c36:	4611      	mov	r1, r2
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f000 fe89 	bl	8007950 <xTaskCheckForTimeOut>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d132      	bne.n	8006caa <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c46:	f000 f972 	bl	8006f2e <prvIsQueueEmpty>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d026      	beq.n	8006c9e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d109      	bne.n	8006c6c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006c58:	f001 fb14 	bl	8008284 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	4618      	mov	r0, r3
 8006c62:	f000 ffdb 	bl	8007c1c <xTaskPriorityInherit>
 8006c66:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006c68:	f001 fb3c 	bl	80082e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c6e:	3324      	adds	r3, #36	; 0x24
 8006c70:	683a      	ldr	r2, [r7, #0]
 8006c72:	4611      	mov	r1, r2
 8006c74:	4618      	mov	r0, r3
 8006c76:	f000 fdcf 	bl	8007818 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006c7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c7c:	f000 f905 	bl	8006e8a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006c80:	f000 fc04 	bl	800748c <xTaskResumeAll>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	f47f af68 	bne.w	8006b5c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006c8c:	4b18      	ldr	r3, [pc, #96]	; (8006cf0 <xQueueSemaphoreTake+0x214>)
 8006c8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c92:	601a      	str	r2, [r3, #0]
 8006c94:	f3bf 8f4f 	dsb	sy
 8006c98:	f3bf 8f6f 	isb	sy
 8006c9c:	e75e      	b.n	8006b5c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006c9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ca0:	f000 f8f3 	bl	8006e8a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ca4:	f000 fbf2 	bl	800748c <xTaskResumeAll>
 8006ca8:	e758      	b.n	8006b5c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006caa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006cac:	f000 f8ed 	bl	8006e8a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006cb0:	f000 fbec 	bl	800748c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006cb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006cb6:	f000 f93a 	bl	8006f2e <prvIsQueueEmpty>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	f43f af4d 	beq.w	8006b5c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d00d      	beq.n	8006ce4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006cc8:	f001 fadc 	bl	8008284 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006ccc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006cce:	f000 f834 	bl	8006d3a <prvGetDisinheritPriorityAfterTimeout>
 8006cd2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f001 f89a 	bl	8007e14 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006ce0:	f001 fb00 	bl	80082e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006ce4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3738      	adds	r7, #56	; 0x38
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	e000ed04 	.word	0xe000ed04

08006cf4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d10a      	bne.n	8006d1c <vQueueDelete+0x28>
	__asm volatile
 8006d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d0a:	f383 8811 	msr	BASEPRI, r3
 8006d0e:	f3bf 8f6f 	isb	sy
 8006d12:	f3bf 8f4f 	dsb	sy
 8006d16:	60bb      	str	r3, [r7, #8]
}
 8006d18:	bf00      	nop
 8006d1a:	e7fe      	b.n	8006d1a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006d1c:	68f8      	ldr	r0, [r7, #12]
 8006d1e:	f000 f935 	bl	8006f8c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d102      	bne.n	8006d32 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8006d2c:	68f8      	ldr	r0, [r7, #12]
 8006d2e:	f001 fc97 	bl	8008660 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006d32:	bf00      	nop
 8006d34:	3710      	adds	r7, #16
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}

08006d3a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006d3a:	b480      	push	{r7}
 8006d3c:	b085      	sub	sp, #20
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d006      	beq.n	8006d58 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f1c3 0307 	rsb	r3, r3, #7
 8006d54:	60fb      	str	r3, [r7, #12]
 8006d56:	e001      	b.n	8006d5c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
	}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3714      	adds	r7, #20
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr

08006d6a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b086      	sub	sp, #24
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	60f8      	str	r0, [r7, #12]
 8006d72:	60b9      	str	r1, [r7, #8]
 8006d74:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006d76:	2300      	movs	r3, #0
 8006d78:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d7e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d10d      	bne.n	8006da4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d14d      	bne.n	8006e2c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	4618      	mov	r0, r3
 8006d96:	f000 ffb7 	bl	8007d08 <xTaskPriorityDisinherit>
 8006d9a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	609a      	str	r2, [r3, #8]
 8006da2:	e043      	b.n	8006e2c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d119      	bne.n	8006dde <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	6858      	ldr	r0, [r3, #4]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db2:	461a      	mov	r2, r3
 8006db4:	68b9      	ldr	r1, [r7, #8]
 8006db6:	f001 fded 	bl	8008994 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	685a      	ldr	r2, [r3, #4]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc2:	441a      	add	r2, r3
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	685a      	ldr	r2, [r3, #4]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d32b      	bcc.n	8006e2c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	605a      	str	r2, [r3, #4]
 8006ddc:	e026      	b.n	8006e2c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	68d8      	ldr	r0, [r3, #12]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de6:	461a      	mov	r2, r3
 8006de8:	68b9      	ldr	r1, [r7, #8]
 8006dea:	f001 fdd3 	bl	8008994 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	68da      	ldr	r2, [r3, #12]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df6:	425b      	negs	r3, r3
 8006df8:	441a      	add	r2, r3
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	68da      	ldr	r2, [r3, #12]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d207      	bcs.n	8006e1a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	689a      	ldr	r2, [r3, #8]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e12:	425b      	negs	r3, r3
 8006e14:	441a      	add	r2, r3
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2b02      	cmp	r3, #2
 8006e1e:	d105      	bne.n	8006e2c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d002      	beq.n	8006e2c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	3b01      	subs	r3, #1
 8006e2a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	1c5a      	adds	r2, r3, #1
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006e34:	697b      	ldr	r3, [r7, #20]
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3718      	adds	r7, #24
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b082      	sub	sp, #8
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
 8006e46:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d018      	beq.n	8006e82 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	68da      	ldr	r2, [r3, #12]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e58:	441a      	add	r2, r3
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	68da      	ldr	r2, [r3, #12]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d303      	bcc.n	8006e72 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	68d9      	ldr	r1, [r3, #12]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	6838      	ldr	r0, [r7, #0]
 8006e7e:	f001 fd89 	bl	8008994 <memcpy>
	}
}
 8006e82:	bf00      	nop
 8006e84:	3708      	adds	r7, #8
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}

08006e8a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006e8a:	b580      	push	{r7, lr}
 8006e8c:	b084      	sub	sp, #16
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006e92:	f001 f9f7 	bl	8008284 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e9c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e9e:	e011      	b.n	8006ec4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d012      	beq.n	8006ece <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	3324      	adds	r3, #36	; 0x24
 8006eac:	4618      	mov	r0, r3
 8006eae:	f000 fcd7 	bl	8007860 <xTaskRemoveFromEventList>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d001      	beq.n	8006ebc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006eb8:	f000 fdac 	bl	8007a14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006ebc:	7bfb      	ldrb	r3, [r7, #15]
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006ec4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	dce9      	bgt.n	8006ea0 <prvUnlockQueue+0x16>
 8006ecc:	e000      	b.n	8006ed0 <prvUnlockQueue+0x46>
					break;
 8006ece:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	22ff      	movs	r2, #255	; 0xff
 8006ed4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006ed8:	f001 fa04 	bl	80082e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006edc:	f001 f9d2 	bl	8008284 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ee6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006ee8:	e011      	b.n	8006f0e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	691b      	ldr	r3, [r3, #16]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d012      	beq.n	8006f18 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	3310      	adds	r3, #16
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f000 fcb2 	bl	8007860 <xTaskRemoveFromEventList>
 8006efc:	4603      	mov	r3, r0
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d001      	beq.n	8006f06 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006f02:	f000 fd87 	bl	8007a14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006f06:	7bbb      	ldrb	r3, [r7, #14]
 8006f08:	3b01      	subs	r3, #1
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006f0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	dce9      	bgt.n	8006eea <prvUnlockQueue+0x60>
 8006f16:	e000      	b.n	8006f1a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006f18:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	22ff      	movs	r2, #255	; 0xff
 8006f1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006f22:	f001 f9df 	bl	80082e4 <vPortExitCritical>
}
 8006f26:	bf00      	nop
 8006f28:	3710      	adds	r7, #16
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}

08006f2e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006f2e:	b580      	push	{r7, lr}
 8006f30:	b084      	sub	sp, #16
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006f36:	f001 f9a5 	bl	8008284 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d102      	bne.n	8006f48 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006f42:	2301      	movs	r3, #1
 8006f44:	60fb      	str	r3, [r7, #12]
 8006f46:	e001      	b.n	8006f4c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f4c:	f001 f9ca 	bl	80082e4 <vPortExitCritical>

	return xReturn;
 8006f50:	68fb      	ldr	r3, [r7, #12]
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3710      	adds	r7, #16
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}

08006f5a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006f5a:	b580      	push	{r7, lr}
 8006f5c:	b084      	sub	sp, #16
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006f62:	f001 f98f 	bl	8008284 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d102      	bne.n	8006f78 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006f72:	2301      	movs	r3, #1
 8006f74:	60fb      	str	r3, [r7, #12]
 8006f76:	e001      	b.n	8006f7c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f7c:	f001 f9b2 	bl	80082e4 <vPortExitCritical>

	return xReturn;
 8006f80:	68fb      	ldr	r3, [r7, #12]
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3710      	adds	r7, #16
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
	...

08006f8c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b085      	sub	sp, #20
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f94:	2300      	movs	r3, #0
 8006f96:	60fb      	str	r3, [r7, #12]
 8006f98:	e016      	b.n	8006fc8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006f9a:	4a10      	ldr	r2, [pc, #64]	; (8006fdc <vQueueUnregisterQueue+0x50>)
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	00db      	lsls	r3, r3, #3
 8006fa0:	4413      	add	r3, r2
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d10b      	bne.n	8006fc2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006faa:	4a0c      	ldr	r2, [pc, #48]	; (8006fdc <vQueueUnregisterQueue+0x50>)
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2100      	movs	r1, #0
 8006fb0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006fb4:	4a09      	ldr	r2, [pc, #36]	; (8006fdc <vQueueUnregisterQueue+0x50>)
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	00db      	lsls	r3, r3, #3
 8006fba:	4413      	add	r3, r2
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	605a      	str	r2, [r3, #4]
				break;
 8006fc0:	e006      	b.n	8006fd0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	60fb      	str	r3, [r7, #12]
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2b07      	cmp	r3, #7
 8006fcc:	d9e5      	bls.n	8006f9a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006fce:	bf00      	nop
 8006fd0:	bf00      	nop
 8006fd2:	3714      	adds	r7, #20
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr
 8006fdc:	20000728 	.word	0x20000728

08006fe0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b08e      	sub	sp, #56	; 0x38
 8006fe4:	af04      	add	r7, sp, #16
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	60b9      	str	r1, [r7, #8]
 8006fea:	607a      	str	r2, [r7, #4]
 8006fec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d10a      	bne.n	800700a <xTaskCreateStatic+0x2a>
	__asm volatile
 8006ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff8:	f383 8811 	msr	BASEPRI, r3
 8006ffc:	f3bf 8f6f 	isb	sy
 8007000:	f3bf 8f4f 	dsb	sy
 8007004:	623b      	str	r3, [r7, #32]
}
 8007006:	bf00      	nop
 8007008:	e7fe      	b.n	8007008 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800700a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800700c:	2b00      	cmp	r3, #0
 800700e:	d10a      	bne.n	8007026 <xTaskCreateStatic+0x46>
	__asm volatile
 8007010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007014:	f383 8811 	msr	BASEPRI, r3
 8007018:	f3bf 8f6f 	isb	sy
 800701c:	f3bf 8f4f 	dsb	sy
 8007020:	61fb      	str	r3, [r7, #28]
}
 8007022:	bf00      	nop
 8007024:	e7fe      	b.n	8007024 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007026:	23b4      	movs	r3, #180	; 0xb4
 8007028:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	2bb4      	cmp	r3, #180	; 0xb4
 800702e:	d00a      	beq.n	8007046 <xTaskCreateStatic+0x66>
	__asm volatile
 8007030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007034:	f383 8811 	msr	BASEPRI, r3
 8007038:	f3bf 8f6f 	isb	sy
 800703c:	f3bf 8f4f 	dsb	sy
 8007040:	61bb      	str	r3, [r7, #24]
}
 8007042:	bf00      	nop
 8007044:	e7fe      	b.n	8007044 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007046:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800704a:	2b00      	cmp	r3, #0
 800704c:	d01e      	beq.n	800708c <xTaskCreateStatic+0xac>
 800704e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007050:	2b00      	cmp	r3, #0
 8007052:	d01b      	beq.n	800708c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007056:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800705c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800705e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007060:	2202      	movs	r2, #2
 8007062:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007066:	2300      	movs	r3, #0
 8007068:	9303      	str	r3, [sp, #12]
 800706a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706c:	9302      	str	r3, [sp, #8]
 800706e:	f107 0314 	add.w	r3, r7, #20
 8007072:	9301      	str	r3, [sp, #4]
 8007074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007076:	9300      	str	r3, [sp, #0]
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	68b9      	ldr	r1, [r7, #8]
 800707e:	68f8      	ldr	r0, [r7, #12]
 8007080:	f000 f850 	bl	8007124 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007084:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007086:	f000 f8eb 	bl	8007260 <prvAddNewTaskToReadyList>
 800708a:	e001      	b.n	8007090 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800708c:	2300      	movs	r3, #0
 800708e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007090:	697b      	ldr	r3, [r7, #20]
	}
 8007092:	4618      	mov	r0, r3
 8007094:	3728      	adds	r7, #40	; 0x28
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}

0800709a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800709a:	b580      	push	{r7, lr}
 800709c:	b08c      	sub	sp, #48	; 0x30
 800709e:	af04      	add	r7, sp, #16
 80070a0:	60f8      	str	r0, [r7, #12]
 80070a2:	60b9      	str	r1, [r7, #8]
 80070a4:	603b      	str	r3, [r7, #0]
 80070a6:	4613      	mov	r3, r2
 80070a8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80070aa:	88fb      	ldrh	r3, [r7, #6]
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	4618      	mov	r0, r3
 80070b0:	f001 fa0a 	bl	80084c8 <pvPortMalloc>
 80070b4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d00e      	beq.n	80070da <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80070bc:	20b4      	movs	r0, #180	; 0xb4
 80070be:	f001 fa03 	bl	80084c8 <pvPortMalloc>
 80070c2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d003      	beq.n	80070d2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	697a      	ldr	r2, [r7, #20]
 80070ce:	631a      	str	r2, [r3, #48]	; 0x30
 80070d0:	e005      	b.n	80070de <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80070d2:	6978      	ldr	r0, [r7, #20]
 80070d4:	f001 fac4 	bl	8008660 <vPortFree>
 80070d8:	e001      	b.n	80070de <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80070da:	2300      	movs	r3, #0
 80070dc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80070de:	69fb      	ldr	r3, [r7, #28]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d017      	beq.n	8007114 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80070e4:	69fb      	ldr	r3, [r7, #28]
 80070e6:	2200      	movs	r2, #0
 80070e8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80070ec:	88fa      	ldrh	r2, [r7, #6]
 80070ee:	2300      	movs	r3, #0
 80070f0:	9303      	str	r3, [sp, #12]
 80070f2:	69fb      	ldr	r3, [r7, #28]
 80070f4:	9302      	str	r3, [sp, #8]
 80070f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f8:	9301      	str	r3, [sp, #4]
 80070fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070fc:	9300      	str	r3, [sp, #0]
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	68b9      	ldr	r1, [r7, #8]
 8007102:	68f8      	ldr	r0, [r7, #12]
 8007104:	f000 f80e 	bl	8007124 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007108:	69f8      	ldr	r0, [r7, #28]
 800710a:	f000 f8a9 	bl	8007260 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800710e:	2301      	movs	r3, #1
 8007110:	61bb      	str	r3, [r7, #24]
 8007112:	e002      	b.n	800711a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007114:	f04f 33ff 	mov.w	r3, #4294967295
 8007118:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800711a:	69bb      	ldr	r3, [r7, #24]
	}
 800711c:	4618      	mov	r0, r3
 800711e:	3720      	adds	r7, #32
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b088      	sub	sp, #32
 8007128:	af00      	add	r7, sp, #0
 800712a:	60f8      	str	r0, [r7, #12]
 800712c:	60b9      	str	r1, [r7, #8]
 800712e:	607a      	str	r2, [r7, #4]
 8007130:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007134:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800713c:	3b01      	subs	r3, #1
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	4413      	add	r3, r2
 8007142:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007144:	69bb      	ldr	r3, [r7, #24]
 8007146:	f023 0307 	bic.w	r3, r3, #7
 800714a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800714c:	69bb      	ldr	r3, [r7, #24]
 800714e:	f003 0307 	and.w	r3, r3, #7
 8007152:	2b00      	cmp	r3, #0
 8007154:	d00a      	beq.n	800716c <prvInitialiseNewTask+0x48>
	__asm volatile
 8007156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800715a:	f383 8811 	msr	BASEPRI, r3
 800715e:	f3bf 8f6f 	isb	sy
 8007162:	f3bf 8f4f 	dsb	sy
 8007166:	617b      	str	r3, [r7, #20]
}
 8007168:	bf00      	nop
 800716a:	e7fe      	b.n	800716a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d01f      	beq.n	80071b2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007172:	2300      	movs	r3, #0
 8007174:	61fb      	str	r3, [r7, #28]
 8007176:	e012      	b.n	800719e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007178:	68ba      	ldr	r2, [r7, #8]
 800717a:	69fb      	ldr	r3, [r7, #28]
 800717c:	4413      	add	r3, r2
 800717e:	7819      	ldrb	r1, [r3, #0]
 8007180:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007182:	69fb      	ldr	r3, [r7, #28]
 8007184:	4413      	add	r3, r2
 8007186:	3334      	adds	r3, #52	; 0x34
 8007188:	460a      	mov	r2, r1
 800718a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800718c:	68ba      	ldr	r2, [r7, #8]
 800718e:	69fb      	ldr	r3, [r7, #28]
 8007190:	4413      	add	r3, r2
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d006      	beq.n	80071a6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007198:	69fb      	ldr	r3, [r7, #28]
 800719a:	3301      	adds	r3, #1
 800719c:	61fb      	str	r3, [r7, #28]
 800719e:	69fb      	ldr	r3, [r7, #28]
 80071a0:	2b0f      	cmp	r3, #15
 80071a2:	d9e9      	bls.n	8007178 <prvInitialiseNewTask+0x54>
 80071a4:	e000      	b.n	80071a8 <prvInitialiseNewTask+0x84>
			{
				break;
 80071a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80071a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071aa:	2200      	movs	r2, #0
 80071ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80071b0:	e003      	b.n	80071ba <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80071b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b4:	2200      	movs	r2, #0
 80071b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80071ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071bc:	2b06      	cmp	r3, #6
 80071be:	d901      	bls.n	80071c4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80071c0:	2306      	movs	r3, #6
 80071c2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80071c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80071ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071ce:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80071d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d2:	2200      	movs	r2, #0
 80071d4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80071d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d8:	3304      	adds	r3, #4
 80071da:	4618      	mov	r0, r3
 80071dc:	f7ff f87c 	bl	80062d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80071e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e2:	3318      	adds	r3, #24
 80071e4:	4618      	mov	r0, r3
 80071e6:	f7ff f877 	bl	80062d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80071ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f2:	f1c3 0207 	rsb	r2, r3, #7
 80071f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80071fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007202:	2200      	movs	r2, #0
 8007204:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800720a:	2200      	movs	r2, #0
 800720c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007212:	334c      	adds	r3, #76	; 0x4c
 8007214:	2260      	movs	r2, #96	; 0x60
 8007216:	2100      	movs	r1, #0
 8007218:	4618      	mov	r0, r3
 800721a:	f001 fbc9 	bl	80089b0 <memset>
 800721e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007220:	4a0c      	ldr	r2, [pc, #48]	; (8007254 <prvInitialiseNewTask+0x130>)
 8007222:	651a      	str	r2, [r3, #80]	; 0x50
 8007224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007226:	4a0c      	ldr	r2, [pc, #48]	; (8007258 <prvInitialiseNewTask+0x134>)
 8007228:	655a      	str	r2, [r3, #84]	; 0x54
 800722a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800722c:	4a0b      	ldr	r2, [pc, #44]	; (800725c <prvInitialiseNewTask+0x138>)
 800722e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007230:	683a      	ldr	r2, [r7, #0]
 8007232:	68f9      	ldr	r1, [r7, #12]
 8007234:	69b8      	ldr	r0, [r7, #24]
 8007236:	f000 fef5 	bl	8008024 <pxPortInitialiseStack>
 800723a:	4602      	mov	r2, r0
 800723c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800723e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007242:	2b00      	cmp	r3, #0
 8007244:	d002      	beq.n	800724c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007248:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800724a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800724c:	bf00      	nop
 800724e:	3720      	adds	r7, #32
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}
 8007254:	08009b10 	.word	0x08009b10
 8007258:	08009b30 	.word	0x08009b30
 800725c:	08009af0 	.word	0x08009af0

08007260 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007268:	f001 f80c 	bl	8008284 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800726c:	4b2a      	ldr	r3, [pc, #168]	; (8007318 <prvAddNewTaskToReadyList+0xb8>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	3301      	adds	r3, #1
 8007272:	4a29      	ldr	r2, [pc, #164]	; (8007318 <prvAddNewTaskToReadyList+0xb8>)
 8007274:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007276:	4b29      	ldr	r3, [pc, #164]	; (800731c <prvAddNewTaskToReadyList+0xbc>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d109      	bne.n	8007292 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800727e:	4a27      	ldr	r2, [pc, #156]	; (800731c <prvAddNewTaskToReadyList+0xbc>)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007284:	4b24      	ldr	r3, [pc, #144]	; (8007318 <prvAddNewTaskToReadyList+0xb8>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	2b01      	cmp	r3, #1
 800728a:	d110      	bne.n	80072ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800728c:	f000 fbe6 	bl	8007a5c <prvInitialiseTaskLists>
 8007290:	e00d      	b.n	80072ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007292:	4b23      	ldr	r3, [pc, #140]	; (8007320 <prvAddNewTaskToReadyList+0xc0>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d109      	bne.n	80072ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800729a:	4b20      	ldr	r3, [pc, #128]	; (800731c <prvAddNewTaskToReadyList+0xbc>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d802      	bhi.n	80072ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80072a8:	4a1c      	ldr	r2, [pc, #112]	; (800731c <prvAddNewTaskToReadyList+0xbc>)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80072ae:	4b1d      	ldr	r3, [pc, #116]	; (8007324 <prvAddNewTaskToReadyList+0xc4>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	3301      	adds	r3, #1
 80072b4:	4a1b      	ldr	r2, [pc, #108]	; (8007324 <prvAddNewTaskToReadyList+0xc4>)
 80072b6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072bc:	2201      	movs	r2, #1
 80072be:	409a      	lsls	r2, r3
 80072c0:	4b19      	ldr	r3, [pc, #100]	; (8007328 <prvAddNewTaskToReadyList+0xc8>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4313      	orrs	r3, r2
 80072c6:	4a18      	ldr	r2, [pc, #96]	; (8007328 <prvAddNewTaskToReadyList+0xc8>)
 80072c8:	6013      	str	r3, [r2, #0]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ce:	4613      	mov	r3, r2
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	4413      	add	r3, r2
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	4a15      	ldr	r2, [pc, #84]	; (800732c <prvAddNewTaskToReadyList+0xcc>)
 80072d8:	441a      	add	r2, r3
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	3304      	adds	r3, #4
 80072de:	4619      	mov	r1, r3
 80072e0:	4610      	mov	r0, r2
 80072e2:	f7ff f806 	bl	80062f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80072e6:	f000 fffd 	bl	80082e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80072ea:	4b0d      	ldr	r3, [pc, #52]	; (8007320 <prvAddNewTaskToReadyList+0xc0>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d00e      	beq.n	8007310 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80072f2:	4b0a      	ldr	r3, [pc, #40]	; (800731c <prvAddNewTaskToReadyList+0xbc>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d207      	bcs.n	8007310 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007300:	4b0b      	ldr	r3, [pc, #44]	; (8007330 <prvAddNewTaskToReadyList+0xd0>)
 8007302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007306:	601a      	str	r2, [r3, #0]
 8007308:	f3bf 8f4f 	dsb	sy
 800730c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007310:	bf00      	nop
 8007312:	3708      	adds	r7, #8
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}
 8007318:	20000868 	.word	0x20000868
 800731c:	20000768 	.word	0x20000768
 8007320:	20000874 	.word	0x20000874
 8007324:	20000884 	.word	0x20000884
 8007328:	20000870 	.word	0x20000870
 800732c:	2000076c 	.word	0x2000076c
 8007330:	e000ed04 	.word	0xe000ed04

08007334 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800733c:	2300      	movs	r3, #0
 800733e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d017      	beq.n	8007376 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007346:	4b13      	ldr	r3, [pc, #76]	; (8007394 <vTaskDelay+0x60>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d00a      	beq.n	8007364 <vTaskDelay+0x30>
	__asm volatile
 800734e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007352:	f383 8811 	msr	BASEPRI, r3
 8007356:	f3bf 8f6f 	isb	sy
 800735a:	f3bf 8f4f 	dsb	sy
 800735e:	60bb      	str	r3, [r7, #8]
}
 8007360:	bf00      	nop
 8007362:	e7fe      	b.n	8007362 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007364:	f000 f884 	bl	8007470 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007368:	2100      	movs	r1, #0
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 fdf4 	bl	8007f58 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007370:	f000 f88c 	bl	800748c <xTaskResumeAll>
 8007374:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d107      	bne.n	800738c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800737c:	4b06      	ldr	r3, [pc, #24]	; (8007398 <vTaskDelay+0x64>)
 800737e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007382:	601a      	str	r2, [r3, #0]
 8007384:	f3bf 8f4f 	dsb	sy
 8007388:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800738c:	bf00      	nop
 800738e:	3710      	adds	r7, #16
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}
 8007394:	20000890 	.word	0x20000890
 8007398:	e000ed04 	.word	0xe000ed04

0800739c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b08a      	sub	sp, #40	; 0x28
 80073a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80073a2:	2300      	movs	r3, #0
 80073a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80073a6:	2300      	movs	r3, #0
 80073a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80073aa:	463a      	mov	r2, r7
 80073ac:	1d39      	adds	r1, r7, #4
 80073ae:	f107 0308 	add.w	r3, r7, #8
 80073b2:	4618      	mov	r0, r3
 80073b4:	f7fa f830 	bl	8001418 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80073b8:	6839      	ldr	r1, [r7, #0]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	68ba      	ldr	r2, [r7, #8]
 80073be:	9202      	str	r2, [sp, #8]
 80073c0:	9301      	str	r3, [sp, #4]
 80073c2:	2300      	movs	r3, #0
 80073c4:	9300      	str	r3, [sp, #0]
 80073c6:	2300      	movs	r3, #0
 80073c8:	460a      	mov	r2, r1
 80073ca:	4921      	ldr	r1, [pc, #132]	; (8007450 <vTaskStartScheduler+0xb4>)
 80073cc:	4821      	ldr	r0, [pc, #132]	; (8007454 <vTaskStartScheduler+0xb8>)
 80073ce:	f7ff fe07 	bl	8006fe0 <xTaskCreateStatic>
 80073d2:	4603      	mov	r3, r0
 80073d4:	4a20      	ldr	r2, [pc, #128]	; (8007458 <vTaskStartScheduler+0xbc>)
 80073d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80073d8:	4b1f      	ldr	r3, [pc, #124]	; (8007458 <vTaskStartScheduler+0xbc>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d002      	beq.n	80073e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80073e0:	2301      	movs	r3, #1
 80073e2:	617b      	str	r3, [r7, #20]
 80073e4:	e001      	b.n	80073ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80073e6:	2300      	movs	r3, #0
 80073e8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d11b      	bne.n	8007428 <vTaskStartScheduler+0x8c>
	__asm volatile
 80073f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f4:	f383 8811 	msr	BASEPRI, r3
 80073f8:	f3bf 8f6f 	isb	sy
 80073fc:	f3bf 8f4f 	dsb	sy
 8007400:	613b      	str	r3, [r7, #16]
}
 8007402:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007404:	4b15      	ldr	r3, [pc, #84]	; (800745c <vTaskStartScheduler+0xc0>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	334c      	adds	r3, #76	; 0x4c
 800740a:	4a15      	ldr	r2, [pc, #84]	; (8007460 <vTaskStartScheduler+0xc4>)
 800740c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800740e:	4b15      	ldr	r3, [pc, #84]	; (8007464 <vTaskStartScheduler+0xc8>)
 8007410:	f04f 32ff 	mov.w	r2, #4294967295
 8007414:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007416:	4b14      	ldr	r3, [pc, #80]	; (8007468 <vTaskStartScheduler+0xcc>)
 8007418:	2201      	movs	r2, #1
 800741a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800741c:	4b13      	ldr	r3, [pc, #76]	; (800746c <vTaskStartScheduler+0xd0>)
 800741e:	2200      	movs	r2, #0
 8007420:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007422:	f000 fe8d 	bl	8008140 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007426:	e00e      	b.n	8007446 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800742e:	d10a      	bne.n	8007446 <vTaskStartScheduler+0xaa>
	__asm volatile
 8007430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007434:	f383 8811 	msr	BASEPRI, r3
 8007438:	f3bf 8f6f 	isb	sy
 800743c:	f3bf 8f4f 	dsb	sy
 8007440:	60fb      	str	r3, [r7, #12]
}
 8007442:	bf00      	nop
 8007444:	e7fe      	b.n	8007444 <vTaskStartScheduler+0xa8>
}
 8007446:	bf00      	nop
 8007448:	3718      	adds	r7, #24
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop
 8007450:	08009aa0 	.word	0x08009aa0
 8007454:	08007a2d 	.word	0x08007a2d
 8007458:	2000088c 	.word	0x2000088c
 800745c:	20000768 	.word	0x20000768
 8007460:	20000010 	.word	0x20000010
 8007464:	20000888 	.word	0x20000888
 8007468:	20000874 	.word	0x20000874
 800746c:	2000086c 	.word	0x2000086c

08007470 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007470:	b480      	push	{r7}
 8007472:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007474:	4b04      	ldr	r3, [pc, #16]	; (8007488 <vTaskSuspendAll+0x18>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	3301      	adds	r3, #1
 800747a:	4a03      	ldr	r2, [pc, #12]	; (8007488 <vTaskSuspendAll+0x18>)
 800747c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800747e:	bf00      	nop
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr
 8007488:	20000890 	.word	0x20000890

0800748c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007492:	2300      	movs	r3, #0
 8007494:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007496:	2300      	movs	r3, #0
 8007498:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800749a:	4b41      	ldr	r3, [pc, #260]	; (80075a0 <xTaskResumeAll+0x114>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d10a      	bne.n	80074b8 <xTaskResumeAll+0x2c>
	__asm volatile
 80074a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a6:	f383 8811 	msr	BASEPRI, r3
 80074aa:	f3bf 8f6f 	isb	sy
 80074ae:	f3bf 8f4f 	dsb	sy
 80074b2:	603b      	str	r3, [r7, #0]
}
 80074b4:	bf00      	nop
 80074b6:	e7fe      	b.n	80074b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80074b8:	f000 fee4 	bl	8008284 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80074bc:	4b38      	ldr	r3, [pc, #224]	; (80075a0 <xTaskResumeAll+0x114>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	3b01      	subs	r3, #1
 80074c2:	4a37      	ldr	r2, [pc, #220]	; (80075a0 <xTaskResumeAll+0x114>)
 80074c4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074c6:	4b36      	ldr	r3, [pc, #216]	; (80075a0 <xTaskResumeAll+0x114>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d161      	bne.n	8007592 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80074ce:	4b35      	ldr	r3, [pc, #212]	; (80075a4 <xTaskResumeAll+0x118>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d05d      	beq.n	8007592 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80074d6:	e02e      	b.n	8007536 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074d8:	4b33      	ldr	r3, [pc, #204]	; (80075a8 <xTaskResumeAll+0x11c>)
 80074da:	68db      	ldr	r3, [r3, #12]
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	3318      	adds	r3, #24
 80074e4:	4618      	mov	r0, r3
 80074e6:	f7fe ff61 	bl	80063ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	3304      	adds	r3, #4
 80074ee:	4618      	mov	r0, r3
 80074f0:	f7fe ff5c 	bl	80063ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f8:	2201      	movs	r2, #1
 80074fa:	409a      	lsls	r2, r3
 80074fc:	4b2b      	ldr	r3, [pc, #172]	; (80075ac <xTaskResumeAll+0x120>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4313      	orrs	r3, r2
 8007502:	4a2a      	ldr	r2, [pc, #168]	; (80075ac <xTaskResumeAll+0x120>)
 8007504:	6013      	str	r3, [r2, #0]
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800750a:	4613      	mov	r3, r2
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	4413      	add	r3, r2
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	4a27      	ldr	r2, [pc, #156]	; (80075b0 <xTaskResumeAll+0x124>)
 8007514:	441a      	add	r2, r3
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	3304      	adds	r3, #4
 800751a:	4619      	mov	r1, r3
 800751c:	4610      	mov	r0, r2
 800751e:	f7fe fee8 	bl	80062f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007526:	4b23      	ldr	r3, [pc, #140]	; (80075b4 <xTaskResumeAll+0x128>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800752c:	429a      	cmp	r2, r3
 800752e:	d302      	bcc.n	8007536 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007530:	4b21      	ldr	r3, [pc, #132]	; (80075b8 <xTaskResumeAll+0x12c>)
 8007532:	2201      	movs	r2, #1
 8007534:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007536:	4b1c      	ldr	r3, [pc, #112]	; (80075a8 <xTaskResumeAll+0x11c>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d1cc      	bne.n	80074d8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d001      	beq.n	8007548 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007544:	f000 fb2c 	bl	8007ba0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007548:	4b1c      	ldr	r3, [pc, #112]	; (80075bc <xTaskResumeAll+0x130>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d010      	beq.n	8007576 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007554:	f000 f846 	bl	80075e4 <xTaskIncrementTick>
 8007558:	4603      	mov	r3, r0
 800755a:	2b00      	cmp	r3, #0
 800755c:	d002      	beq.n	8007564 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800755e:	4b16      	ldr	r3, [pc, #88]	; (80075b8 <xTaskResumeAll+0x12c>)
 8007560:	2201      	movs	r2, #1
 8007562:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	3b01      	subs	r3, #1
 8007568:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d1f1      	bne.n	8007554 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007570:	4b12      	ldr	r3, [pc, #72]	; (80075bc <xTaskResumeAll+0x130>)
 8007572:	2200      	movs	r2, #0
 8007574:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007576:	4b10      	ldr	r3, [pc, #64]	; (80075b8 <xTaskResumeAll+0x12c>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d009      	beq.n	8007592 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800757e:	2301      	movs	r3, #1
 8007580:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007582:	4b0f      	ldr	r3, [pc, #60]	; (80075c0 <xTaskResumeAll+0x134>)
 8007584:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007588:	601a      	str	r2, [r3, #0]
 800758a:	f3bf 8f4f 	dsb	sy
 800758e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007592:	f000 fea7 	bl	80082e4 <vPortExitCritical>

	return xAlreadyYielded;
 8007596:	68bb      	ldr	r3, [r7, #8]
}
 8007598:	4618      	mov	r0, r3
 800759a:	3710      	adds	r7, #16
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}
 80075a0:	20000890 	.word	0x20000890
 80075a4:	20000868 	.word	0x20000868
 80075a8:	20000828 	.word	0x20000828
 80075ac:	20000870 	.word	0x20000870
 80075b0:	2000076c 	.word	0x2000076c
 80075b4:	20000768 	.word	0x20000768
 80075b8:	2000087c 	.word	0x2000087c
 80075bc:	20000878 	.word	0x20000878
 80075c0:	e000ed04 	.word	0xe000ed04

080075c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80075ca:	4b05      	ldr	r3, [pc, #20]	; (80075e0 <xTaskGetTickCount+0x1c>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80075d0:	687b      	ldr	r3, [r7, #4]
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	370c      	adds	r7, #12
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr
 80075de:	bf00      	nop
 80075e0:	2000086c 	.word	0x2000086c

080075e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b086      	sub	sp, #24
 80075e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80075ea:	2300      	movs	r3, #0
 80075ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075ee:	4b4e      	ldr	r3, [pc, #312]	; (8007728 <xTaskIncrementTick+0x144>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	f040 808e 	bne.w	8007714 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80075f8:	4b4c      	ldr	r3, [pc, #304]	; (800772c <xTaskIncrementTick+0x148>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	3301      	adds	r3, #1
 80075fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007600:	4a4a      	ldr	r2, [pc, #296]	; (800772c <xTaskIncrementTick+0x148>)
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d120      	bne.n	800764e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800760c:	4b48      	ldr	r3, [pc, #288]	; (8007730 <xTaskIncrementTick+0x14c>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d00a      	beq.n	800762c <xTaskIncrementTick+0x48>
	__asm volatile
 8007616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800761a:	f383 8811 	msr	BASEPRI, r3
 800761e:	f3bf 8f6f 	isb	sy
 8007622:	f3bf 8f4f 	dsb	sy
 8007626:	603b      	str	r3, [r7, #0]
}
 8007628:	bf00      	nop
 800762a:	e7fe      	b.n	800762a <xTaskIncrementTick+0x46>
 800762c:	4b40      	ldr	r3, [pc, #256]	; (8007730 <xTaskIncrementTick+0x14c>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	60fb      	str	r3, [r7, #12]
 8007632:	4b40      	ldr	r3, [pc, #256]	; (8007734 <xTaskIncrementTick+0x150>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a3e      	ldr	r2, [pc, #248]	; (8007730 <xTaskIncrementTick+0x14c>)
 8007638:	6013      	str	r3, [r2, #0]
 800763a:	4a3e      	ldr	r2, [pc, #248]	; (8007734 <xTaskIncrementTick+0x150>)
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	6013      	str	r3, [r2, #0]
 8007640:	4b3d      	ldr	r3, [pc, #244]	; (8007738 <xTaskIncrementTick+0x154>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	3301      	adds	r3, #1
 8007646:	4a3c      	ldr	r2, [pc, #240]	; (8007738 <xTaskIncrementTick+0x154>)
 8007648:	6013      	str	r3, [r2, #0]
 800764a:	f000 faa9 	bl	8007ba0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800764e:	4b3b      	ldr	r3, [pc, #236]	; (800773c <xTaskIncrementTick+0x158>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	693a      	ldr	r2, [r7, #16]
 8007654:	429a      	cmp	r2, r3
 8007656:	d348      	bcc.n	80076ea <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007658:	4b35      	ldr	r3, [pc, #212]	; (8007730 <xTaskIncrementTick+0x14c>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d104      	bne.n	800766c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007662:	4b36      	ldr	r3, [pc, #216]	; (800773c <xTaskIncrementTick+0x158>)
 8007664:	f04f 32ff 	mov.w	r2, #4294967295
 8007668:	601a      	str	r2, [r3, #0]
					break;
 800766a:	e03e      	b.n	80076ea <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800766c:	4b30      	ldr	r3, [pc, #192]	; (8007730 <xTaskIncrementTick+0x14c>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800767c:	693a      	ldr	r2, [r7, #16]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	429a      	cmp	r2, r3
 8007682:	d203      	bcs.n	800768c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007684:	4a2d      	ldr	r2, [pc, #180]	; (800773c <xTaskIncrementTick+0x158>)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800768a:	e02e      	b.n	80076ea <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	3304      	adds	r3, #4
 8007690:	4618      	mov	r0, r3
 8007692:	f7fe fe8b 	bl	80063ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800769a:	2b00      	cmp	r3, #0
 800769c:	d004      	beq.n	80076a8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	3318      	adds	r3, #24
 80076a2:	4618      	mov	r0, r3
 80076a4:	f7fe fe82 	bl	80063ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ac:	2201      	movs	r2, #1
 80076ae:	409a      	lsls	r2, r3
 80076b0:	4b23      	ldr	r3, [pc, #140]	; (8007740 <xTaskIncrementTick+0x15c>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4313      	orrs	r3, r2
 80076b6:	4a22      	ldr	r2, [pc, #136]	; (8007740 <xTaskIncrementTick+0x15c>)
 80076b8:	6013      	str	r3, [r2, #0]
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076be:	4613      	mov	r3, r2
 80076c0:	009b      	lsls	r3, r3, #2
 80076c2:	4413      	add	r3, r2
 80076c4:	009b      	lsls	r3, r3, #2
 80076c6:	4a1f      	ldr	r2, [pc, #124]	; (8007744 <xTaskIncrementTick+0x160>)
 80076c8:	441a      	add	r2, r3
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	3304      	adds	r3, #4
 80076ce:	4619      	mov	r1, r3
 80076d0:	4610      	mov	r0, r2
 80076d2:	f7fe fe0e 	bl	80062f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076da:	4b1b      	ldr	r3, [pc, #108]	; (8007748 <xTaskIncrementTick+0x164>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d3b9      	bcc.n	8007658 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80076e4:	2301      	movs	r3, #1
 80076e6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076e8:	e7b6      	b.n	8007658 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80076ea:	4b17      	ldr	r3, [pc, #92]	; (8007748 <xTaskIncrementTick+0x164>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076f0:	4914      	ldr	r1, [pc, #80]	; (8007744 <xTaskIncrementTick+0x160>)
 80076f2:	4613      	mov	r3, r2
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	4413      	add	r3, r2
 80076f8:	009b      	lsls	r3, r3, #2
 80076fa:	440b      	add	r3, r1
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d901      	bls.n	8007706 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007702:	2301      	movs	r3, #1
 8007704:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007706:	4b11      	ldr	r3, [pc, #68]	; (800774c <xTaskIncrementTick+0x168>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d007      	beq.n	800771e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800770e:	2301      	movs	r3, #1
 8007710:	617b      	str	r3, [r7, #20]
 8007712:	e004      	b.n	800771e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007714:	4b0e      	ldr	r3, [pc, #56]	; (8007750 <xTaskIncrementTick+0x16c>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	3301      	adds	r3, #1
 800771a:	4a0d      	ldr	r2, [pc, #52]	; (8007750 <xTaskIncrementTick+0x16c>)
 800771c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800771e:	697b      	ldr	r3, [r7, #20]
}
 8007720:	4618      	mov	r0, r3
 8007722:	3718      	adds	r7, #24
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}
 8007728:	20000890 	.word	0x20000890
 800772c:	2000086c 	.word	0x2000086c
 8007730:	20000820 	.word	0x20000820
 8007734:	20000824 	.word	0x20000824
 8007738:	20000880 	.word	0x20000880
 800773c:	20000888 	.word	0x20000888
 8007740:	20000870 	.word	0x20000870
 8007744:	2000076c 	.word	0x2000076c
 8007748:	20000768 	.word	0x20000768
 800774c:	2000087c 	.word	0x2000087c
 8007750:	20000878 	.word	0x20000878

08007754 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007754:	b480      	push	{r7}
 8007756:	b087      	sub	sp, #28
 8007758:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800775a:	4b29      	ldr	r3, [pc, #164]	; (8007800 <vTaskSwitchContext+0xac>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d003      	beq.n	800776a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007762:	4b28      	ldr	r3, [pc, #160]	; (8007804 <vTaskSwitchContext+0xb0>)
 8007764:	2201      	movs	r2, #1
 8007766:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007768:	e044      	b.n	80077f4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800776a:	4b26      	ldr	r3, [pc, #152]	; (8007804 <vTaskSwitchContext+0xb0>)
 800776c:	2200      	movs	r2, #0
 800776e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007770:	4b25      	ldr	r3, [pc, #148]	; (8007808 <vTaskSwitchContext+0xb4>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	fab3 f383 	clz	r3, r3
 800777c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800777e:	7afb      	ldrb	r3, [r7, #11]
 8007780:	f1c3 031f 	rsb	r3, r3, #31
 8007784:	617b      	str	r3, [r7, #20]
 8007786:	4921      	ldr	r1, [pc, #132]	; (800780c <vTaskSwitchContext+0xb8>)
 8007788:	697a      	ldr	r2, [r7, #20]
 800778a:	4613      	mov	r3, r2
 800778c:	009b      	lsls	r3, r3, #2
 800778e:	4413      	add	r3, r2
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	440b      	add	r3, r1
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d10a      	bne.n	80077b0 <vTaskSwitchContext+0x5c>
	__asm volatile
 800779a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800779e:	f383 8811 	msr	BASEPRI, r3
 80077a2:	f3bf 8f6f 	isb	sy
 80077a6:	f3bf 8f4f 	dsb	sy
 80077aa:	607b      	str	r3, [r7, #4]
}
 80077ac:	bf00      	nop
 80077ae:	e7fe      	b.n	80077ae <vTaskSwitchContext+0x5a>
 80077b0:	697a      	ldr	r2, [r7, #20]
 80077b2:	4613      	mov	r3, r2
 80077b4:	009b      	lsls	r3, r3, #2
 80077b6:	4413      	add	r3, r2
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	4a14      	ldr	r2, [pc, #80]	; (800780c <vTaskSwitchContext+0xb8>)
 80077bc:	4413      	add	r3, r2
 80077be:	613b      	str	r3, [r7, #16]
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	685a      	ldr	r2, [r3, #4]
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	605a      	str	r2, [r3, #4]
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	685a      	ldr	r2, [r3, #4]
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	3308      	adds	r3, #8
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d104      	bne.n	80077e0 <vTaskSwitchContext+0x8c>
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	685a      	ldr	r2, [r3, #4]
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	605a      	str	r2, [r3, #4]
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	68db      	ldr	r3, [r3, #12]
 80077e6:	4a0a      	ldr	r2, [pc, #40]	; (8007810 <vTaskSwitchContext+0xbc>)
 80077e8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80077ea:	4b09      	ldr	r3, [pc, #36]	; (8007810 <vTaskSwitchContext+0xbc>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	334c      	adds	r3, #76	; 0x4c
 80077f0:	4a08      	ldr	r2, [pc, #32]	; (8007814 <vTaskSwitchContext+0xc0>)
 80077f2:	6013      	str	r3, [r2, #0]
}
 80077f4:	bf00      	nop
 80077f6:	371c      	adds	r7, #28
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr
 8007800:	20000890 	.word	0x20000890
 8007804:	2000087c 	.word	0x2000087c
 8007808:	20000870 	.word	0x20000870
 800780c:	2000076c 	.word	0x2000076c
 8007810:	20000768 	.word	0x20000768
 8007814:	20000010 	.word	0x20000010

08007818 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d10a      	bne.n	800783e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800782c:	f383 8811 	msr	BASEPRI, r3
 8007830:	f3bf 8f6f 	isb	sy
 8007834:	f3bf 8f4f 	dsb	sy
 8007838:	60fb      	str	r3, [r7, #12]
}
 800783a:	bf00      	nop
 800783c:	e7fe      	b.n	800783c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800783e:	4b07      	ldr	r3, [pc, #28]	; (800785c <vTaskPlaceOnEventList+0x44>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	3318      	adds	r3, #24
 8007844:	4619      	mov	r1, r3
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f7fe fd77 	bl	800633a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800784c:	2101      	movs	r1, #1
 800784e:	6838      	ldr	r0, [r7, #0]
 8007850:	f000 fb82 	bl	8007f58 <prvAddCurrentTaskToDelayedList>
}
 8007854:	bf00      	nop
 8007856:	3710      	adds	r7, #16
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}
 800785c:	20000768 	.word	0x20000768

08007860 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b086      	sub	sp, #24
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	68db      	ldr	r3, [r3, #12]
 800786e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d10a      	bne.n	800788c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800787a:	f383 8811 	msr	BASEPRI, r3
 800787e:	f3bf 8f6f 	isb	sy
 8007882:	f3bf 8f4f 	dsb	sy
 8007886:	60fb      	str	r3, [r7, #12]
}
 8007888:	bf00      	nop
 800788a:	e7fe      	b.n	800788a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	3318      	adds	r3, #24
 8007890:	4618      	mov	r0, r3
 8007892:	f7fe fd8b 	bl	80063ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007896:	4b1d      	ldr	r3, [pc, #116]	; (800790c <xTaskRemoveFromEventList+0xac>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d11c      	bne.n	80078d8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	3304      	adds	r3, #4
 80078a2:	4618      	mov	r0, r3
 80078a4:	f7fe fd82 	bl	80063ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ac:	2201      	movs	r2, #1
 80078ae:	409a      	lsls	r2, r3
 80078b0:	4b17      	ldr	r3, [pc, #92]	; (8007910 <xTaskRemoveFromEventList+0xb0>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4313      	orrs	r3, r2
 80078b6:	4a16      	ldr	r2, [pc, #88]	; (8007910 <xTaskRemoveFromEventList+0xb0>)
 80078b8:	6013      	str	r3, [r2, #0]
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078be:	4613      	mov	r3, r2
 80078c0:	009b      	lsls	r3, r3, #2
 80078c2:	4413      	add	r3, r2
 80078c4:	009b      	lsls	r3, r3, #2
 80078c6:	4a13      	ldr	r2, [pc, #76]	; (8007914 <xTaskRemoveFromEventList+0xb4>)
 80078c8:	441a      	add	r2, r3
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	3304      	adds	r3, #4
 80078ce:	4619      	mov	r1, r3
 80078d0:	4610      	mov	r0, r2
 80078d2:	f7fe fd0e 	bl	80062f2 <vListInsertEnd>
 80078d6:	e005      	b.n	80078e4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	3318      	adds	r3, #24
 80078dc:	4619      	mov	r1, r3
 80078de:	480e      	ldr	r0, [pc, #56]	; (8007918 <xTaskRemoveFromEventList+0xb8>)
 80078e0:	f7fe fd07 	bl	80062f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078e8:	4b0c      	ldr	r3, [pc, #48]	; (800791c <xTaskRemoveFromEventList+0xbc>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d905      	bls.n	80078fe <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80078f2:	2301      	movs	r3, #1
 80078f4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80078f6:	4b0a      	ldr	r3, [pc, #40]	; (8007920 <xTaskRemoveFromEventList+0xc0>)
 80078f8:	2201      	movs	r2, #1
 80078fa:	601a      	str	r2, [r3, #0]
 80078fc:	e001      	b.n	8007902 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80078fe:	2300      	movs	r3, #0
 8007900:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007902:	697b      	ldr	r3, [r7, #20]
}
 8007904:	4618      	mov	r0, r3
 8007906:	3718      	adds	r7, #24
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}
 800790c:	20000890 	.word	0x20000890
 8007910:	20000870 	.word	0x20000870
 8007914:	2000076c 	.word	0x2000076c
 8007918:	20000828 	.word	0x20000828
 800791c:	20000768 	.word	0x20000768
 8007920:	2000087c 	.word	0x2000087c

08007924 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007924:	b480      	push	{r7}
 8007926:	b083      	sub	sp, #12
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800792c:	4b06      	ldr	r3, [pc, #24]	; (8007948 <vTaskInternalSetTimeOutState+0x24>)
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007934:	4b05      	ldr	r3, [pc, #20]	; (800794c <vTaskInternalSetTimeOutState+0x28>)
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	605a      	str	r2, [r3, #4]
}
 800793c:	bf00      	nop
 800793e:	370c      	adds	r7, #12
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr
 8007948:	20000880 	.word	0x20000880
 800794c:	2000086c 	.word	0x2000086c

08007950 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b088      	sub	sp, #32
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d10a      	bne.n	8007976 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007964:	f383 8811 	msr	BASEPRI, r3
 8007968:	f3bf 8f6f 	isb	sy
 800796c:	f3bf 8f4f 	dsb	sy
 8007970:	613b      	str	r3, [r7, #16]
}
 8007972:	bf00      	nop
 8007974:	e7fe      	b.n	8007974 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d10a      	bne.n	8007992 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800797c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007980:	f383 8811 	msr	BASEPRI, r3
 8007984:	f3bf 8f6f 	isb	sy
 8007988:	f3bf 8f4f 	dsb	sy
 800798c:	60fb      	str	r3, [r7, #12]
}
 800798e:	bf00      	nop
 8007990:	e7fe      	b.n	8007990 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007992:	f000 fc77 	bl	8008284 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007996:	4b1d      	ldr	r3, [pc, #116]	; (8007a0c <xTaskCheckForTimeOut+0xbc>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	69ba      	ldr	r2, [r7, #24]
 80079a2:	1ad3      	subs	r3, r2, r3
 80079a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ae:	d102      	bne.n	80079b6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80079b0:	2300      	movs	r3, #0
 80079b2:	61fb      	str	r3, [r7, #28]
 80079b4:	e023      	b.n	80079fe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	4b15      	ldr	r3, [pc, #84]	; (8007a10 <xTaskCheckForTimeOut+0xc0>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	429a      	cmp	r2, r3
 80079c0:	d007      	beq.n	80079d2 <xTaskCheckForTimeOut+0x82>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	69ba      	ldr	r2, [r7, #24]
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d302      	bcc.n	80079d2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80079cc:	2301      	movs	r3, #1
 80079ce:	61fb      	str	r3, [r7, #28]
 80079d0:	e015      	b.n	80079fe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	697a      	ldr	r2, [r7, #20]
 80079d8:	429a      	cmp	r2, r3
 80079da:	d20b      	bcs.n	80079f4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	681a      	ldr	r2, [r3, #0]
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	1ad2      	subs	r2, r2, r3
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f7ff ff9b 	bl	8007924 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80079ee:	2300      	movs	r3, #0
 80079f0:	61fb      	str	r3, [r7, #28]
 80079f2:	e004      	b.n	80079fe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	2200      	movs	r2, #0
 80079f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80079fa:	2301      	movs	r3, #1
 80079fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80079fe:	f000 fc71 	bl	80082e4 <vPortExitCritical>

	return xReturn;
 8007a02:	69fb      	ldr	r3, [r7, #28]
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3720      	adds	r7, #32
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}
 8007a0c:	2000086c 	.word	0x2000086c
 8007a10:	20000880 	.word	0x20000880

08007a14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007a14:	b480      	push	{r7}
 8007a16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007a18:	4b03      	ldr	r3, [pc, #12]	; (8007a28 <vTaskMissedYield+0x14>)
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	601a      	str	r2, [r3, #0]
}
 8007a1e:	bf00      	nop
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr
 8007a28:	2000087c 	.word	0x2000087c

08007a2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b082      	sub	sp, #8
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007a34:	f000 f852 	bl	8007adc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007a38:	4b06      	ldr	r3, [pc, #24]	; (8007a54 <prvIdleTask+0x28>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d9f9      	bls.n	8007a34 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007a40:	4b05      	ldr	r3, [pc, #20]	; (8007a58 <prvIdleTask+0x2c>)
 8007a42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a46:	601a      	str	r2, [r3, #0]
 8007a48:	f3bf 8f4f 	dsb	sy
 8007a4c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007a50:	e7f0      	b.n	8007a34 <prvIdleTask+0x8>
 8007a52:	bf00      	nop
 8007a54:	2000076c 	.word	0x2000076c
 8007a58:	e000ed04 	.word	0xe000ed04

08007a5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b082      	sub	sp, #8
 8007a60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a62:	2300      	movs	r3, #0
 8007a64:	607b      	str	r3, [r7, #4]
 8007a66:	e00c      	b.n	8007a82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	4613      	mov	r3, r2
 8007a6c:	009b      	lsls	r3, r3, #2
 8007a6e:	4413      	add	r3, r2
 8007a70:	009b      	lsls	r3, r3, #2
 8007a72:	4a12      	ldr	r2, [pc, #72]	; (8007abc <prvInitialiseTaskLists+0x60>)
 8007a74:	4413      	add	r3, r2
 8007a76:	4618      	mov	r0, r3
 8007a78:	f7fe fc0e 	bl	8006298 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	3301      	adds	r3, #1
 8007a80:	607b      	str	r3, [r7, #4]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2b06      	cmp	r3, #6
 8007a86:	d9ef      	bls.n	8007a68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007a88:	480d      	ldr	r0, [pc, #52]	; (8007ac0 <prvInitialiseTaskLists+0x64>)
 8007a8a:	f7fe fc05 	bl	8006298 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007a8e:	480d      	ldr	r0, [pc, #52]	; (8007ac4 <prvInitialiseTaskLists+0x68>)
 8007a90:	f7fe fc02 	bl	8006298 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007a94:	480c      	ldr	r0, [pc, #48]	; (8007ac8 <prvInitialiseTaskLists+0x6c>)
 8007a96:	f7fe fbff 	bl	8006298 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007a9a:	480c      	ldr	r0, [pc, #48]	; (8007acc <prvInitialiseTaskLists+0x70>)
 8007a9c:	f7fe fbfc 	bl	8006298 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007aa0:	480b      	ldr	r0, [pc, #44]	; (8007ad0 <prvInitialiseTaskLists+0x74>)
 8007aa2:	f7fe fbf9 	bl	8006298 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007aa6:	4b0b      	ldr	r3, [pc, #44]	; (8007ad4 <prvInitialiseTaskLists+0x78>)
 8007aa8:	4a05      	ldr	r2, [pc, #20]	; (8007ac0 <prvInitialiseTaskLists+0x64>)
 8007aaa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007aac:	4b0a      	ldr	r3, [pc, #40]	; (8007ad8 <prvInitialiseTaskLists+0x7c>)
 8007aae:	4a05      	ldr	r2, [pc, #20]	; (8007ac4 <prvInitialiseTaskLists+0x68>)
 8007ab0:	601a      	str	r2, [r3, #0]
}
 8007ab2:	bf00      	nop
 8007ab4:	3708      	adds	r7, #8
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
 8007aba:	bf00      	nop
 8007abc:	2000076c 	.word	0x2000076c
 8007ac0:	200007f8 	.word	0x200007f8
 8007ac4:	2000080c 	.word	0x2000080c
 8007ac8:	20000828 	.word	0x20000828
 8007acc:	2000083c 	.word	0x2000083c
 8007ad0:	20000854 	.word	0x20000854
 8007ad4:	20000820 	.word	0x20000820
 8007ad8:	20000824 	.word	0x20000824

08007adc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b082      	sub	sp, #8
 8007ae0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ae2:	e019      	b.n	8007b18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007ae4:	f000 fbce 	bl	8008284 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ae8:	4b10      	ldr	r3, [pc, #64]	; (8007b2c <prvCheckTasksWaitingTermination+0x50>)
 8007aea:	68db      	ldr	r3, [r3, #12]
 8007aec:	68db      	ldr	r3, [r3, #12]
 8007aee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	3304      	adds	r3, #4
 8007af4:	4618      	mov	r0, r3
 8007af6:	f7fe fc59 	bl	80063ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007afa:	4b0d      	ldr	r3, [pc, #52]	; (8007b30 <prvCheckTasksWaitingTermination+0x54>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	3b01      	subs	r3, #1
 8007b00:	4a0b      	ldr	r2, [pc, #44]	; (8007b30 <prvCheckTasksWaitingTermination+0x54>)
 8007b02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007b04:	4b0b      	ldr	r3, [pc, #44]	; (8007b34 <prvCheckTasksWaitingTermination+0x58>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	3b01      	subs	r3, #1
 8007b0a:	4a0a      	ldr	r2, [pc, #40]	; (8007b34 <prvCheckTasksWaitingTermination+0x58>)
 8007b0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007b0e:	f000 fbe9 	bl	80082e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 f810 	bl	8007b38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b18:	4b06      	ldr	r3, [pc, #24]	; (8007b34 <prvCheckTasksWaitingTermination+0x58>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d1e1      	bne.n	8007ae4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007b20:	bf00      	nop
 8007b22:	bf00      	nop
 8007b24:	3708      	adds	r7, #8
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}
 8007b2a:	bf00      	nop
 8007b2c:	2000083c 	.word	0x2000083c
 8007b30:	20000868 	.word	0x20000868
 8007b34:	20000850 	.word	0x20000850

08007b38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b084      	sub	sp, #16
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	334c      	adds	r3, #76	; 0x4c
 8007b44:	4618      	mov	r0, r3
 8007b46:	f001 f829 	bl	8008b9c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d108      	bne.n	8007b66 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f000 fd81 	bl	8008660 <vPortFree>
				vPortFree( pxTCB );
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 fd7e 	bl	8008660 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007b64:	e018      	b.n	8007b98 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	d103      	bne.n	8007b78 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 fd75 	bl	8008660 <vPortFree>
	}
 8007b76:	e00f      	b.n	8007b98 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007b7e:	2b02      	cmp	r3, #2
 8007b80:	d00a      	beq.n	8007b98 <prvDeleteTCB+0x60>
	__asm volatile
 8007b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b86:	f383 8811 	msr	BASEPRI, r3
 8007b8a:	f3bf 8f6f 	isb	sy
 8007b8e:	f3bf 8f4f 	dsb	sy
 8007b92:	60fb      	str	r3, [r7, #12]
}
 8007b94:	bf00      	nop
 8007b96:	e7fe      	b.n	8007b96 <prvDeleteTCB+0x5e>
	}
 8007b98:	bf00      	nop
 8007b9a:	3710      	adds	r7, #16
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b083      	sub	sp, #12
 8007ba4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ba6:	4b0c      	ldr	r3, [pc, #48]	; (8007bd8 <prvResetNextTaskUnblockTime+0x38>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d104      	bne.n	8007bba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007bb0:	4b0a      	ldr	r3, [pc, #40]	; (8007bdc <prvResetNextTaskUnblockTime+0x3c>)
 8007bb2:	f04f 32ff 	mov.w	r2, #4294967295
 8007bb6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007bb8:	e008      	b.n	8007bcc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bba:	4b07      	ldr	r3, [pc, #28]	; (8007bd8 <prvResetNextTaskUnblockTime+0x38>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	68db      	ldr	r3, [r3, #12]
 8007bc0:	68db      	ldr	r3, [r3, #12]
 8007bc2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	4a04      	ldr	r2, [pc, #16]	; (8007bdc <prvResetNextTaskUnblockTime+0x3c>)
 8007bca:	6013      	str	r3, [r2, #0]
}
 8007bcc:	bf00      	nop
 8007bce:	370c      	adds	r7, #12
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr
 8007bd8:	20000820 	.word	0x20000820
 8007bdc:	20000888 	.word	0x20000888

08007be0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007be0:	b480      	push	{r7}
 8007be2:	b083      	sub	sp, #12
 8007be4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007be6:	4b0b      	ldr	r3, [pc, #44]	; (8007c14 <xTaskGetSchedulerState+0x34>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d102      	bne.n	8007bf4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	607b      	str	r3, [r7, #4]
 8007bf2:	e008      	b.n	8007c06 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bf4:	4b08      	ldr	r3, [pc, #32]	; (8007c18 <xTaskGetSchedulerState+0x38>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d102      	bne.n	8007c02 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007bfc:	2302      	movs	r3, #2
 8007bfe:	607b      	str	r3, [r7, #4]
 8007c00:	e001      	b.n	8007c06 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007c02:	2300      	movs	r3, #0
 8007c04:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007c06:	687b      	ldr	r3, [r7, #4]
	}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	370c      	adds	r7, #12
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr
 8007c14:	20000874 	.word	0x20000874
 8007c18:	20000890 	.word	0x20000890

08007c1c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b084      	sub	sp, #16
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d05e      	beq.n	8007cf0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c36:	4b31      	ldr	r3, [pc, #196]	; (8007cfc <xTaskPriorityInherit+0xe0>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d24e      	bcs.n	8007cde <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	699b      	ldr	r3, [r3, #24]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	db06      	blt.n	8007c56 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c48:	4b2c      	ldr	r3, [pc, #176]	; (8007cfc <xTaskPriorityInherit+0xe0>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c4e:	f1c3 0207 	rsb	r2, r3, #7
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	6959      	ldr	r1, [r3, #20]
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c5e:	4613      	mov	r3, r2
 8007c60:	009b      	lsls	r3, r3, #2
 8007c62:	4413      	add	r3, r2
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	4a26      	ldr	r2, [pc, #152]	; (8007d00 <xTaskPriorityInherit+0xe4>)
 8007c68:	4413      	add	r3, r2
 8007c6a:	4299      	cmp	r1, r3
 8007c6c:	d12f      	bne.n	8007cce <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	3304      	adds	r3, #4
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7fe fb9a 	bl	80063ac <uxListRemove>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d10a      	bne.n	8007c94 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c82:	2201      	movs	r2, #1
 8007c84:	fa02 f303 	lsl.w	r3, r2, r3
 8007c88:	43da      	mvns	r2, r3
 8007c8a:	4b1e      	ldr	r3, [pc, #120]	; (8007d04 <xTaskPriorityInherit+0xe8>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4013      	ands	r3, r2
 8007c90:	4a1c      	ldr	r2, [pc, #112]	; (8007d04 <xTaskPriorityInherit+0xe8>)
 8007c92:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007c94:	4b19      	ldr	r3, [pc, #100]	; (8007cfc <xTaskPriorityInherit+0xe0>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	409a      	lsls	r2, r3
 8007ca6:	4b17      	ldr	r3, [pc, #92]	; (8007d04 <xTaskPriorityInherit+0xe8>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4313      	orrs	r3, r2
 8007cac:	4a15      	ldr	r2, [pc, #84]	; (8007d04 <xTaskPriorityInherit+0xe8>)
 8007cae:	6013      	str	r3, [r2, #0]
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cb4:	4613      	mov	r3, r2
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	4413      	add	r3, r2
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	4a10      	ldr	r2, [pc, #64]	; (8007d00 <xTaskPriorityInherit+0xe4>)
 8007cbe:	441a      	add	r2, r3
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	3304      	adds	r3, #4
 8007cc4:	4619      	mov	r1, r3
 8007cc6:	4610      	mov	r0, r2
 8007cc8:	f7fe fb13 	bl	80062f2 <vListInsertEnd>
 8007ccc:	e004      	b.n	8007cd8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007cce:	4b0b      	ldr	r3, [pc, #44]	; (8007cfc <xTaskPriorityInherit+0xe0>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	60fb      	str	r3, [r7, #12]
 8007cdc:	e008      	b.n	8007cf0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ce2:	4b06      	ldr	r3, [pc, #24]	; (8007cfc <xTaskPriorityInherit+0xe0>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d201      	bcs.n	8007cf0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007cec:	2301      	movs	r3, #1
 8007cee:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
	}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3710      	adds	r7, #16
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
 8007cfa:	bf00      	nop
 8007cfc:	20000768 	.word	0x20000768
 8007d00:	2000076c 	.word	0x2000076c
 8007d04:	20000870 	.word	0x20000870

08007d08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b086      	sub	sp, #24
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007d14:	2300      	movs	r3, #0
 8007d16:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d06e      	beq.n	8007dfc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007d1e:	4b3a      	ldr	r3, [pc, #232]	; (8007e08 <xTaskPriorityDisinherit+0x100>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	693a      	ldr	r2, [r7, #16]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d00a      	beq.n	8007d3e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d2c:	f383 8811 	msr	BASEPRI, r3
 8007d30:	f3bf 8f6f 	isb	sy
 8007d34:	f3bf 8f4f 	dsb	sy
 8007d38:	60fb      	str	r3, [r7, #12]
}
 8007d3a:	bf00      	nop
 8007d3c:	e7fe      	b.n	8007d3c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d10a      	bne.n	8007d5c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d4a:	f383 8811 	msr	BASEPRI, r3
 8007d4e:	f3bf 8f6f 	isb	sy
 8007d52:	f3bf 8f4f 	dsb	sy
 8007d56:	60bb      	str	r3, [r7, #8]
}
 8007d58:	bf00      	nop
 8007d5a:	e7fe      	b.n	8007d5a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d60:	1e5a      	subs	r2, r3, #1
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d6e:	429a      	cmp	r2, r3
 8007d70:	d044      	beq.n	8007dfc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d140      	bne.n	8007dfc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	3304      	adds	r3, #4
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f7fe fb14 	bl	80063ac <uxListRemove>
 8007d84:	4603      	mov	r3, r0
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d115      	bne.n	8007db6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d8e:	491f      	ldr	r1, [pc, #124]	; (8007e0c <xTaskPriorityDisinherit+0x104>)
 8007d90:	4613      	mov	r3, r2
 8007d92:	009b      	lsls	r3, r3, #2
 8007d94:	4413      	add	r3, r2
 8007d96:	009b      	lsls	r3, r3, #2
 8007d98:	440b      	add	r3, r1
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d10a      	bne.n	8007db6 <xTaskPriorityDisinherit+0xae>
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da4:	2201      	movs	r2, #1
 8007da6:	fa02 f303 	lsl.w	r3, r2, r3
 8007daa:	43da      	mvns	r2, r3
 8007dac:	4b18      	ldr	r3, [pc, #96]	; (8007e10 <xTaskPriorityDisinherit+0x108>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4013      	ands	r3, r2
 8007db2:	4a17      	ldr	r2, [pc, #92]	; (8007e10 <xTaskPriorityDisinherit+0x108>)
 8007db4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc2:	f1c3 0207 	rsb	r2, r3, #7
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dce:	2201      	movs	r2, #1
 8007dd0:	409a      	lsls	r2, r3
 8007dd2:	4b0f      	ldr	r3, [pc, #60]	; (8007e10 <xTaskPriorityDisinherit+0x108>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	4a0d      	ldr	r2, [pc, #52]	; (8007e10 <xTaskPriorityDisinherit+0x108>)
 8007dda:	6013      	str	r3, [r2, #0]
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007de0:	4613      	mov	r3, r2
 8007de2:	009b      	lsls	r3, r3, #2
 8007de4:	4413      	add	r3, r2
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	4a08      	ldr	r2, [pc, #32]	; (8007e0c <xTaskPriorityDisinherit+0x104>)
 8007dea:	441a      	add	r2, r3
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	3304      	adds	r3, #4
 8007df0:	4619      	mov	r1, r3
 8007df2:	4610      	mov	r0, r2
 8007df4:	f7fe fa7d 	bl	80062f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007dfc:	697b      	ldr	r3, [r7, #20]
	}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3718      	adds	r7, #24
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	20000768 	.word	0x20000768
 8007e0c:	2000076c 	.word	0x2000076c
 8007e10:	20000870 	.word	0x20000870

08007e14 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b088      	sub	sp, #32
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007e22:	2301      	movs	r3, #1
 8007e24:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d077      	beq.n	8007f1c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007e2c:	69bb      	ldr	r3, [r7, #24]
 8007e2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d10a      	bne.n	8007e4a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e38:	f383 8811 	msr	BASEPRI, r3
 8007e3c:	f3bf 8f6f 	isb	sy
 8007e40:	f3bf 8f4f 	dsb	sy
 8007e44:	60fb      	str	r3, [r7, #12]
}
 8007e46:	bf00      	nop
 8007e48:	e7fe      	b.n	8007e48 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007e4a:	69bb      	ldr	r3, [r7, #24]
 8007e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e4e:	683a      	ldr	r2, [r7, #0]
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d902      	bls.n	8007e5a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	61fb      	str	r3, [r7, #28]
 8007e58:	e002      	b.n	8007e60 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007e5a:	69bb      	ldr	r3, [r7, #24]
 8007e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e5e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007e60:	69bb      	ldr	r3, [r7, #24]
 8007e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e64:	69fa      	ldr	r2, [r7, #28]
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d058      	beq.n	8007f1c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007e6a:	69bb      	ldr	r3, [r7, #24]
 8007e6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e6e:	697a      	ldr	r2, [r7, #20]
 8007e70:	429a      	cmp	r2, r3
 8007e72:	d153      	bne.n	8007f1c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007e74:	4b2b      	ldr	r3, [pc, #172]	; (8007f24 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	69ba      	ldr	r2, [r7, #24]
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	d10a      	bne.n	8007e94 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e82:	f383 8811 	msr	BASEPRI, r3
 8007e86:	f3bf 8f6f 	isb	sy
 8007e8a:	f3bf 8f4f 	dsb	sy
 8007e8e:	60bb      	str	r3, [r7, #8]
}
 8007e90:	bf00      	nop
 8007e92:	e7fe      	b.n	8007e92 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007e94:	69bb      	ldr	r3, [r7, #24]
 8007e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e98:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007e9a:	69bb      	ldr	r3, [r7, #24]
 8007e9c:	69fa      	ldr	r2, [r7, #28]
 8007e9e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007ea0:	69bb      	ldr	r3, [r7, #24]
 8007ea2:	699b      	ldr	r3, [r3, #24]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	db04      	blt.n	8007eb2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ea8:	69fb      	ldr	r3, [r7, #28]
 8007eaa:	f1c3 0207 	rsb	r2, r3, #7
 8007eae:	69bb      	ldr	r3, [r7, #24]
 8007eb0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007eb2:	69bb      	ldr	r3, [r7, #24]
 8007eb4:	6959      	ldr	r1, [r3, #20]
 8007eb6:	693a      	ldr	r2, [r7, #16]
 8007eb8:	4613      	mov	r3, r2
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	4413      	add	r3, r2
 8007ebe:	009b      	lsls	r3, r3, #2
 8007ec0:	4a19      	ldr	r2, [pc, #100]	; (8007f28 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007ec2:	4413      	add	r3, r2
 8007ec4:	4299      	cmp	r1, r3
 8007ec6:	d129      	bne.n	8007f1c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ec8:	69bb      	ldr	r3, [r7, #24]
 8007eca:	3304      	adds	r3, #4
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f7fe fa6d 	bl	80063ac <uxListRemove>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d10a      	bne.n	8007eee <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007ed8:	69bb      	ldr	r3, [r7, #24]
 8007eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007edc:	2201      	movs	r2, #1
 8007ede:	fa02 f303 	lsl.w	r3, r2, r3
 8007ee2:	43da      	mvns	r2, r3
 8007ee4:	4b11      	ldr	r3, [pc, #68]	; (8007f2c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4013      	ands	r3, r2
 8007eea:	4a10      	ldr	r2, [pc, #64]	; (8007f2c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007eec:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007eee:	69bb      	ldr	r3, [r7, #24]
 8007ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	409a      	lsls	r2, r3
 8007ef6:	4b0d      	ldr	r3, [pc, #52]	; (8007f2c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4313      	orrs	r3, r2
 8007efc:	4a0b      	ldr	r2, [pc, #44]	; (8007f2c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007efe:	6013      	str	r3, [r2, #0]
 8007f00:	69bb      	ldr	r3, [r7, #24]
 8007f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f04:	4613      	mov	r3, r2
 8007f06:	009b      	lsls	r3, r3, #2
 8007f08:	4413      	add	r3, r2
 8007f0a:	009b      	lsls	r3, r3, #2
 8007f0c:	4a06      	ldr	r2, [pc, #24]	; (8007f28 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007f0e:	441a      	add	r2, r3
 8007f10:	69bb      	ldr	r3, [r7, #24]
 8007f12:	3304      	adds	r3, #4
 8007f14:	4619      	mov	r1, r3
 8007f16:	4610      	mov	r0, r2
 8007f18:	f7fe f9eb 	bl	80062f2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007f1c:	bf00      	nop
 8007f1e:	3720      	adds	r7, #32
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}
 8007f24:	20000768 	.word	0x20000768
 8007f28:	2000076c 	.word	0x2000076c
 8007f2c:	20000870 	.word	0x20000870

08007f30 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007f30:	b480      	push	{r7}
 8007f32:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007f34:	4b07      	ldr	r3, [pc, #28]	; (8007f54 <pvTaskIncrementMutexHeldCount+0x24>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d004      	beq.n	8007f46 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007f3c:	4b05      	ldr	r3, [pc, #20]	; (8007f54 <pvTaskIncrementMutexHeldCount+0x24>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007f42:	3201      	adds	r2, #1
 8007f44:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8007f46:	4b03      	ldr	r3, [pc, #12]	; (8007f54 <pvTaskIncrementMutexHeldCount+0x24>)
 8007f48:	681b      	ldr	r3, [r3, #0]
	}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr
 8007f54:	20000768 	.word	0x20000768

08007f58 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b084      	sub	sp, #16
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007f62:	4b29      	ldr	r3, [pc, #164]	; (8008008 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f68:	4b28      	ldr	r3, [pc, #160]	; (800800c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	3304      	adds	r3, #4
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f7fe fa1c 	bl	80063ac <uxListRemove>
 8007f74:	4603      	mov	r3, r0
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d10b      	bne.n	8007f92 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007f7a:	4b24      	ldr	r3, [pc, #144]	; (800800c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f80:	2201      	movs	r2, #1
 8007f82:	fa02 f303 	lsl.w	r3, r2, r3
 8007f86:	43da      	mvns	r2, r3
 8007f88:	4b21      	ldr	r3, [pc, #132]	; (8008010 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4013      	ands	r3, r2
 8007f8e:	4a20      	ldr	r2, [pc, #128]	; (8008010 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007f90:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f98:	d10a      	bne.n	8007fb0 <prvAddCurrentTaskToDelayedList+0x58>
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d007      	beq.n	8007fb0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007fa0:	4b1a      	ldr	r3, [pc, #104]	; (800800c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	3304      	adds	r3, #4
 8007fa6:	4619      	mov	r1, r3
 8007fa8:	481a      	ldr	r0, [pc, #104]	; (8008014 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007faa:	f7fe f9a2 	bl	80062f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007fae:	e026      	b.n	8007ffe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007fb0:	68fa      	ldr	r2, [r7, #12]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	4413      	add	r3, r2
 8007fb6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007fb8:	4b14      	ldr	r3, [pc, #80]	; (800800c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	68ba      	ldr	r2, [r7, #8]
 8007fbe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007fc0:	68ba      	ldr	r2, [r7, #8]
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d209      	bcs.n	8007fdc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007fc8:	4b13      	ldr	r3, [pc, #76]	; (8008018 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007fca:	681a      	ldr	r2, [r3, #0]
 8007fcc:	4b0f      	ldr	r3, [pc, #60]	; (800800c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	3304      	adds	r3, #4
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	4610      	mov	r0, r2
 8007fd6:	f7fe f9b0 	bl	800633a <vListInsert>
}
 8007fda:	e010      	b.n	8007ffe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007fdc:	4b0f      	ldr	r3, [pc, #60]	; (800801c <prvAddCurrentTaskToDelayedList+0xc4>)
 8007fde:	681a      	ldr	r2, [r3, #0]
 8007fe0:	4b0a      	ldr	r3, [pc, #40]	; (800800c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	3304      	adds	r3, #4
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	4610      	mov	r0, r2
 8007fea:	f7fe f9a6 	bl	800633a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007fee:	4b0c      	ldr	r3, [pc, #48]	; (8008020 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	68ba      	ldr	r2, [r7, #8]
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d202      	bcs.n	8007ffe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007ff8:	4a09      	ldr	r2, [pc, #36]	; (8008020 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	6013      	str	r3, [r2, #0]
}
 8007ffe:	bf00      	nop
 8008000:	3710      	adds	r7, #16
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
 8008006:	bf00      	nop
 8008008:	2000086c 	.word	0x2000086c
 800800c:	20000768 	.word	0x20000768
 8008010:	20000870 	.word	0x20000870
 8008014:	20000854 	.word	0x20000854
 8008018:	20000824 	.word	0x20000824
 800801c:	20000820 	.word	0x20000820
 8008020:	20000888 	.word	0x20000888

08008024 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008024:	b480      	push	{r7}
 8008026:	b085      	sub	sp, #20
 8008028:	af00      	add	r7, sp, #0
 800802a:	60f8      	str	r0, [r7, #12]
 800802c:	60b9      	str	r1, [r7, #8]
 800802e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	3b04      	subs	r3, #4
 8008034:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800803c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	3b04      	subs	r3, #4
 8008042:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	f023 0201 	bic.w	r2, r3, #1
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	3b04      	subs	r3, #4
 8008052:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008054:	4a0c      	ldr	r2, [pc, #48]	; (8008088 <pxPortInitialiseStack+0x64>)
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	3b14      	subs	r3, #20
 800805e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	3b04      	subs	r3, #4
 800806a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f06f 0202 	mvn.w	r2, #2
 8008072:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	3b20      	subs	r3, #32
 8008078:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800807a:	68fb      	ldr	r3, [r7, #12]
}
 800807c:	4618      	mov	r0, r3
 800807e:	3714      	adds	r7, #20
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr
 8008088:	0800808d 	.word	0x0800808d

0800808c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800808c:	b480      	push	{r7}
 800808e:	b085      	sub	sp, #20
 8008090:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008092:	2300      	movs	r3, #0
 8008094:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008096:	4b12      	ldr	r3, [pc, #72]	; (80080e0 <prvTaskExitError+0x54>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800809e:	d00a      	beq.n	80080b6 <prvTaskExitError+0x2a>
	__asm volatile
 80080a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a4:	f383 8811 	msr	BASEPRI, r3
 80080a8:	f3bf 8f6f 	isb	sy
 80080ac:	f3bf 8f4f 	dsb	sy
 80080b0:	60fb      	str	r3, [r7, #12]
}
 80080b2:	bf00      	nop
 80080b4:	e7fe      	b.n	80080b4 <prvTaskExitError+0x28>
	__asm volatile
 80080b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ba:	f383 8811 	msr	BASEPRI, r3
 80080be:	f3bf 8f6f 	isb	sy
 80080c2:	f3bf 8f4f 	dsb	sy
 80080c6:	60bb      	str	r3, [r7, #8]
}
 80080c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80080ca:	bf00      	nop
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d0fc      	beq.n	80080cc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80080d2:	bf00      	nop
 80080d4:	bf00      	nop
 80080d6:	3714      	adds	r7, #20
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr
 80080e0:	2000000c 	.word	0x2000000c
	...

080080f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80080f0:	4b07      	ldr	r3, [pc, #28]	; (8008110 <pxCurrentTCBConst2>)
 80080f2:	6819      	ldr	r1, [r3, #0]
 80080f4:	6808      	ldr	r0, [r1, #0]
 80080f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080fa:	f380 8809 	msr	PSP, r0
 80080fe:	f3bf 8f6f 	isb	sy
 8008102:	f04f 0000 	mov.w	r0, #0
 8008106:	f380 8811 	msr	BASEPRI, r0
 800810a:	4770      	bx	lr
 800810c:	f3af 8000 	nop.w

08008110 <pxCurrentTCBConst2>:
 8008110:	20000768 	.word	0x20000768
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008114:	bf00      	nop
 8008116:	bf00      	nop

08008118 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008118:	4808      	ldr	r0, [pc, #32]	; (800813c <prvPortStartFirstTask+0x24>)
 800811a:	6800      	ldr	r0, [r0, #0]
 800811c:	6800      	ldr	r0, [r0, #0]
 800811e:	f380 8808 	msr	MSP, r0
 8008122:	f04f 0000 	mov.w	r0, #0
 8008126:	f380 8814 	msr	CONTROL, r0
 800812a:	b662      	cpsie	i
 800812c:	b661      	cpsie	f
 800812e:	f3bf 8f4f 	dsb	sy
 8008132:	f3bf 8f6f 	isb	sy
 8008136:	df00      	svc	0
 8008138:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800813a:	bf00      	nop
 800813c:	e000ed08 	.word	0xe000ed08

08008140 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b086      	sub	sp, #24
 8008144:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008146:	4b46      	ldr	r3, [pc, #280]	; (8008260 <xPortStartScheduler+0x120>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a46      	ldr	r2, [pc, #280]	; (8008264 <xPortStartScheduler+0x124>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d10a      	bne.n	8008166 <xPortStartScheduler+0x26>
	__asm volatile
 8008150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008154:	f383 8811 	msr	BASEPRI, r3
 8008158:	f3bf 8f6f 	isb	sy
 800815c:	f3bf 8f4f 	dsb	sy
 8008160:	613b      	str	r3, [r7, #16]
}
 8008162:	bf00      	nop
 8008164:	e7fe      	b.n	8008164 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008166:	4b3e      	ldr	r3, [pc, #248]	; (8008260 <xPortStartScheduler+0x120>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a3f      	ldr	r2, [pc, #252]	; (8008268 <xPortStartScheduler+0x128>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d10a      	bne.n	8008186 <xPortStartScheduler+0x46>
	__asm volatile
 8008170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008174:	f383 8811 	msr	BASEPRI, r3
 8008178:	f3bf 8f6f 	isb	sy
 800817c:	f3bf 8f4f 	dsb	sy
 8008180:	60fb      	str	r3, [r7, #12]
}
 8008182:	bf00      	nop
 8008184:	e7fe      	b.n	8008184 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008186:	4b39      	ldr	r3, [pc, #228]	; (800826c <xPortStartScheduler+0x12c>)
 8008188:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	b2db      	uxtb	r3, r3
 8008190:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	22ff      	movs	r2, #255	; 0xff
 8008196:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	b2db      	uxtb	r3, r3
 800819e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80081a0:	78fb      	ldrb	r3, [r7, #3]
 80081a2:	b2db      	uxtb	r3, r3
 80081a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80081a8:	b2da      	uxtb	r2, r3
 80081aa:	4b31      	ldr	r3, [pc, #196]	; (8008270 <xPortStartScheduler+0x130>)
 80081ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80081ae:	4b31      	ldr	r3, [pc, #196]	; (8008274 <xPortStartScheduler+0x134>)
 80081b0:	2207      	movs	r2, #7
 80081b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80081b4:	e009      	b.n	80081ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80081b6:	4b2f      	ldr	r3, [pc, #188]	; (8008274 <xPortStartScheduler+0x134>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	3b01      	subs	r3, #1
 80081bc:	4a2d      	ldr	r2, [pc, #180]	; (8008274 <xPortStartScheduler+0x134>)
 80081be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80081c0:	78fb      	ldrb	r3, [r7, #3]
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	005b      	lsls	r3, r3, #1
 80081c6:	b2db      	uxtb	r3, r3
 80081c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80081ca:	78fb      	ldrb	r3, [r7, #3]
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081d2:	2b80      	cmp	r3, #128	; 0x80
 80081d4:	d0ef      	beq.n	80081b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80081d6:	4b27      	ldr	r3, [pc, #156]	; (8008274 <xPortStartScheduler+0x134>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f1c3 0307 	rsb	r3, r3, #7
 80081de:	2b04      	cmp	r3, #4
 80081e0:	d00a      	beq.n	80081f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80081e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e6:	f383 8811 	msr	BASEPRI, r3
 80081ea:	f3bf 8f6f 	isb	sy
 80081ee:	f3bf 8f4f 	dsb	sy
 80081f2:	60bb      	str	r3, [r7, #8]
}
 80081f4:	bf00      	nop
 80081f6:	e7fe      	b.n	80081f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80081f8:	4b1e      	ldr	r3, [pc, #120]	; (8008274 <xPortStartScheduler+0x134>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	021b      	lsls	r3, r3, #8
 80081fe:	4a1d      	ldr	r2, [pc, #116]	; (8008274 <xPortStartScheduler+0x134>)
 8008200:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008202:	4b1c      	ldr	r3, [pc, #112]	; (8008274 <xPortStartScheduler+0x134>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800820a:	4a1a      	ldr	r2, [pc, #104]	; (8008274 <xPortStartScheduler+0x134>)
 800820c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	b2da      	uxtb	r2, r3
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008216:	4b18      	ldr	r3, [pc, #96]	; (8008278 <xPortStartScheduler+0x138>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a17      	ldr	r2, [pc, #92]	; (8008278 <xPortStartScheduler+0x138>)
 800821c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008220:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008222:	4b15      	ldr	r3, [pc, #84]	; (8008278 <xPortStartScheduler+0x138>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a14      	ldr	r2, [pc, #80]	; (8008278 <xPortStartScheduler+0x138>)
 8008228:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800822c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800822e:	f000 f8dd 	bl	80083ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008232:	4b12      	ldr	r3, [pc, #72]	; (800827c <xPortStartScheduler+0x13c>)
 8008234:	2200      	movs	r2, #0
 8008236:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008238:	f000 f8fc 	bl	8008434 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800823c:	4b10      	ldr	r3, [pc, #64]	; (8008280 <xPortStartScheduler+0x140>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a0f      	ldr	r2, [pc, #60]	; (8008280 <xPortStartScheduler+0x140>)
 8008242:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008246:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008248:	f7ff ff66 	bl	8008118 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800824c:	f7ff fa82 	bl	8007754 <vTaskSwitchContext>
	prvTaskExitError();
 8008250:	f7ff ff1c 	bl	800808c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008254:	2300      	movs	r3, #0
}
 8008256:	4618      	mov	r0, r3
 8008258:	3718      	adds	r7, #24
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}
 800825e:	bf00      	nop
 8008260:	e000ed00 	.word	0xe000ed00
 8008264:	410fc271 	.word	0x410fc271
 8008268:	410fc270 	.word	0x410fc270
 800826c:	e000e400 	.word	0xe000e400
 8008270:	20000894 	.word	0x20000894
 8008274:	20000898 	.word	0x20000898
 8008278:	e000ed20 	.word	0xe000ed20
 800827c:	2000000c 	.word	0x2000000c
 8008280:	e000ef34 	.word	0xe000ef34

08008284 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008284:	b480      	push	{r7}
 8008286:	b083      	sub	sp, #12
 8008288:	af00      	add	r7, sp, #0
	__asm volatile
 800828a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800828e:	f383 8811 	msr	BASEPRI, r3
 8008292:	f3bf 8f6f 	isb	sy
 8008296:	f3bf 8f4f 	dsb	sy
 800829a:	607b      	str	r3, [r7, #4]
}
 800829c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800829e:	4b0f      	ldr	r3, [pc, #60]	; (80082dc <vPortEnterCritical+0x58>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	3301      	adds	r3, #1
 80082a4:	4a0d      	ldr	r2, [pc, #52]	; (80082dc <vPortEnterCritical+0x58>)
 80082a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80082a8:	4b0c      	ldr	r3, [pc, #48]	; (80082dc <vPortEnterCritical+0x58>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d10f      	bne.n	80082d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80082b0:	4b0b      	ldr	r3, [pc, #44]	; (80082e0 <vPortEnterCritical+0x5c>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d00a      	beq.n	80082d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80082ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082be:	f383 8811 	msr	BASEPRI, r3
 80082c2:	f3bf 8f6f 	isb	sy
 80082c6:	f3bf 8f4f 	dsb	sy
 80082ca:	603b      	str	r3, [r7, #0]
}
 80082cc:	bf00      	nop
 80082ce:	e7fe      	b.n	80082ce <vPortEnterCritical+0x4a>
	}
}
 80082d0:	bf00      	nop
 80082d2:	370c      	adds	r7, #12
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr
 80082dc:	2000000c 	.word	0x2000000c
 80082e0:	e000ed04 	.word	0xe000ed04

080082e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80082e4:	b480      	push	{r7}
 80082e6:	b083      	sub	sp, #12
 80082e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80082ea:	4b12      	ldr	r3, [pc, #72]	; (8008334 <vPortExitCritical+0x50>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d10a      	bne.n	8008308 <vPortExitCritical+0x24>
	__asm volatile
 80082f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f6:	f383 8811 	msr	BASEPRI, r3
 80082fa:	f3bf 8f6f 	isb	sy
 80082fe:	f3bf 8f4f 	dsb	sy
 8008302:	607b      	str	r3, [r7, #4]
}
 8008304:	bf00      	nop
 8008306:	e7fe      	b.n	8008306 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008308:	4b0a      	ldr	r3, [pc, #40]	; (8008334 <vPortExitCritical+0x50>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	3b01      	subs	r3, #1
 800830e:	4a09      	ldr	r2, [pc, #36]	; (8008334 <vPortExitCritical+0x50>)
 8008310:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008312:	4b08      	ldr	r3, [pc, #32]	; (8008334 <vPortExitCritical+0x50>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d105      	bne.n	8008326 <vPortExitCritical+0x42>
 800831a:	2300      	movs	r3, #0
 800831c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	f383 8811 	msr	BASEPRI, r3
}
 8008324:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008326:	bf00      	nop
 8008328:	370c      	adds	r7, #12
 800832a:	46bd      	mov	sp, r7
 800832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008330:	4770      	bx	lr
 8008332:	bf00      	nop
 8008334:	2000000c 	.word	0x2000000c
	...

08008340 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008340:	f3ef 8009 	mrs	r0, PSP
 8008344:	f3bf 8f6f 	isb	sy
 8008348:	4b15      	ldr	r3, [pc, #84]	; (80083a0 <pxCurrentTCBConst>)
 800834a:	681a      	ldr	r2, [r3, #0]
 800834c:	f01e 0f10 	tst.w	lr, #16
 8008350:	bf08      	it	eq
 8008352:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008356:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800835a:	6010      	str	r0, [r2, #0]
 800835c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008360:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008364:	f380 8811 	msr	BASEPRI, r0
 8008368:	f3bf 8f4f 	dsb	sy
 800836c:	f3bf 8f6f 	isb	sy
 8008370:	f7ff f9f0 	bl	8007754 <vTaskSwitchContext>
 8008374:	f04f 0000 	mov.w	r0, #0
 8008378:	f380 8811 	msr	BASEPRI, r0
 800837c:	bc09      	pop	{r0, r3}
 800837e:	6819      	ldr	r1, [r3, #0]
 8008380:	6808      	ldr	r0, [r1, #0]
 8008382:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008386:	f01e 0f10 	tst.w	lr, #16
 800838a:	bf08      	it	eq
 800838c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008390:	f380 8809 	msr	PSP, r0
 8008394:	f3bf 8f6f 	isb	sy
 8008398:	4770      	bx	lr
 800839a:	bf00      	nop
 800839c:	f3af 8000 	nop.w

080083a0 <pxCurrentTCBConst>:
 80083a0:	20000768 	.word	0x20000768
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80083a4:	bf00      	nop
 80083a6:	bf00      	nop

080083a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b082      	sub	sp, #8
 80083ac:	af00      	add	r7, sp, #0
	__asm volatile
 80083ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b2:	f383 8811 	msr	BASEPRI, r3
 80083b6:	f3bf 8f6f 	isb	sy
 80083ba:	f3bf 8f4f 	dsb	sy
 80083be:	607b      	str	r3, [r7, #4]
}
 80083c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80083c2:	f7ff f90f 	bl	80075e4 <xTaskIncrementTick>
 80083c6:	4603      	mov	r3, r0
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d003      	beq.n	80083d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80083cc:	4b06      	ldr	r3, [pc, #24]	; (80083e8 <SysTick_Handler+0x40>)
 80083ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083d2:	601a      	str	r2, [r3, #0]
 80083d4:	2300      	movs	r3, #0
 80083d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	f383 8811 	msr	BASEPRI, r3
}
 80083de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80083e0:	bf00      	nop
 80083e2:	3708      	adds	r7, #8
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}
 80083e8:	e000ed04 	.word	0xe000ed04

080083ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80083ec:	b480      	push	{r7}
 80083ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80083f0:	4b0b      	ldr	r3, [pc, #44]	; (8008420 <vPortSetupTimerInterrupt+0x34>)
 80083f2:	2200      	movs	r2, #0
 80083f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80083f6:	4b0b      	ldr	r3, [pc, #44]	; (8008424 <vPortSetupTimerInterrupt+0x38>)
 80083f8:	2200      	movs	r2, #0
 80083fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80083fc:	4b0a      	ldr	r3, [pc, #40]	; (8008428 <vPortSetupTimerInterrupt+0x3c>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a0a      	ldr	r2, [pc, #40]	; (800842c <vPortSetupTimerInterrupt+0x40>)
 8008402:	fba2 2303 	umull	r2, r3, r2, r3
 8008406:	099b      	lsrs	r3, r3, #6
 8008408:	4a09      	ldr	r2, [pc, #36]	; (8008430 <vPortSetupTimerInterrupt+0x44>)
 800840a:	3b01      	subs	r3, #1
 800840c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800840e:	4b04      	ldr	r3, [pc, #16]	; (8008420 <vPortSetupTimerInterrupt+0x34>)
 8008410:	2207      	movs	r2, #7
 8008412:	601a      	str	r2, [r3, #0]
}
 8008414:	bf00      	nop
 8008416:	46bd      	mov	sp, r7
 8008418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841c:	4770      	bx	lr
 800841e:	bf00      	nop
 8008420:	e000e010 	.word	0xe000e010
 8008424:	e000e018 	.word	0xe000e018
 8008428:	20000000 	.word	0x20000000
 800842c:	10624dd3 	.word	0x10624dd3
 8008430:	e000e014 	.word	0xe000e014

08008434 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008434:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008444 <vPortEnableVFP+0x10>
 8008438:	6801      	ldr	r1, [r0, #0]
 800843a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800843e:	6001      	str	r1, [r0, #0]
 8008440:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008442:	bf00      	nop
 8008444:	e000ed88 	.word	0xe000ed88

08008448 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008448:	b480      	push	{r7}
 800844a:	b085      	sub	sp, #20
 800844c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800844e:	f3ef 8305 	mrs	r3, IPSR
 8008452:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2b0f      	cmp	r3, #15
 8008458:	d914      	bls.n	8008484 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800845a:	4a17      	ldr	r2, [pc, #92]	; (80084b8 <vPortValidateInterruptPriority+0x70>)
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	4413      	add	r3, r2
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008464:	4b15      	ldr	r3, [pc, #84]	; (80084bc <vPortValidateInterruptPriority+0x74>)
 8008466:	781b      	ldrb	r3, [r3, #0]
 8008468:	7afa      	ldrb	r2, [r7, #11]
 800846a:	429a      	cmp	r2, r3
 800846c:	d20a      	bcs.n	8008484 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800846e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008472:	f383 8811 	msr	BASEPRI, r3
 8008476:	f3bf 8f6f 	isb	sy
 800847a:	f3bf 8f4f 	dsb	sy
 800847e:	607b      	str	r3, [r7, #4]
}
 8008480:	bf00      	nop
 8008482:	e7fe      	b.n	8008482 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008484:	4b0e      	ldr	r3, [pc, #56]	; (80084c0 <vPortValidateInterruptPriority+0x78>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800848c:	4b0d      	ldr	r3, [pc, #52]	; (80084c4 <vPortValidateInterruptPriority+0x7c>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	429a      	cmp	r2, r3
 8008492:	d90a      	bls.n	80084aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008498:	f383 8811 	msr	BASEPRI, r3
 800849c:	f3bf 8f6f 	isb	sy
 80084a0:	f3bf 8f4f 	dsb	sy
 80084a4:	603b      	str	r3, [r7, #0]
}
 80084a6:	bf00      	nop
 80084a8:	e7fe      	b.n	80084a8 <vPortValidateInterruptPriority+0x60>
	}
 80084aa:	bf00      	nop
 80084ac:	3714      	adds	r7, #20
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr
 80084b6:	bf00      	nop
 80084b8:	e000e3f0 	.word	0xe000e3f0
 80084bc:	20000894 	.word	0x20000894
 80084c0:	e000ed0c 	.word	0xe000ed0c
 80084c4:	20000898 	.word	0x20000898

080084c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b08a      	sub	sp, #40	; 0x28
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80084d0:	2300      	movs	r3, #0
 80084d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80084d4:	f7fe ffcc 	bl	8007470 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80084d8:	4b5b      	ldr	r3, [pc, #364]	; (8008648 <pvPortMalloc+0x180>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d101      	bne.n	80084e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80084e0:	f000 f938 	bl	8008754 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80084e4:	4b59      	ldr	r3, [pc, #356]	; (800864c <pvPortMalloc+0x184>)
 80084e6:	681a      	ldr	r2, [r3, #0]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	4013      	ands	r3, r2
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	f040 8093 	bne.w	8008618 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d01d      	beq.n	8008534 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80084f8:	2208      	movs	r2, #8
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	4413      	add	r3, r2
 80084fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f003 0307 	and.w	r3, r3, #7
 8008506:	2b00      	cmp	r3, #0
 8008508:	d014      	beq.n	8008534 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f023 0307 	bic.w	r3, r3, #7
 8008510:	3308      	adds	r3, #8
 8008512:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f003 0307 	and.w	r3, r3, #7
 800851a:	2b00      	cmp	r3, #0
 800851c:	d00a      	beq.n	8008534 <pvPortMalloc+0x6c>
	__asm volatile
 800851e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008522:	f383 8811 	msr	BASEPRI, r3
 8008526:	f3bf 8f6f 	isb	sy
 800852a:	f3bf 8f4f 	dsb	sy
 800852e:	617b      	str	r3, [r7, #20]
}
 8008530:	bf00      	nop
 8008532:	e7fe      	b.n	8008532 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d06e      	beq.n	8008618 <pvPortMalloc+0x150>
 800853a:	4b45      	ldr	r3, [pc, #276]	; (8008650 <pvPortMalloc+0x188>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	687a      	ldr	r2, [r7, #4]
 8008540:	429a      	cmp	r2, r3
 8008542:	d869      	bhi.n	8008618 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008544:	4b43      	ldr	r3, [pc, #268]	; (8008654 <pvPortMalloc+0x18c>)
 8008546:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008548:	4b42      	ldr	r3, [pc, #264]	; (8008654 <pvPortMalloc+0x18c>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800854e:	e004      	b.n	800855a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008552:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800855a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855c:	685b      	ldr	r3, [r3, #4]
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	429a      	cmp	r2, r3
 8008562:	d903      	bls.n	800856c <pvPortMalloc+0xa4>
 8008564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d1f1      	bne.n	8008550 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800856c:	4b36      	ldr	r3, [pc, #216]	; (8008648 <pvPortMalloc+0x180>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008572:	429a      	cmp	r2, r3
 8008574:	d050      	beq.n	8008618 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008576:	6a3b      	ldr	r3, [r7, #32]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	2208      	movs	r2, #8
 800857c:	4413      	add	r3, r2
 800857e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008582:	681a      	ldr	r2, [r3, #0]
 8008584:	6a3b      	ldr	r3, [r7, #32]
 8008586:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858a:	685a      	ldr	r2, [r3, #4]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	1ad2      	subs	r2, r2, r3
 8008590:	2308      	movs	r3, #8
 8008592:	005b      	lsls	r3, r3, #1
 8008594:	429a      	cmp	r2, r3
 8008596:	d91f      	bls.n	80085d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	4413      	add	r3, r2
 800859e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80085a0:	69bb      	ldr	r3, [r7, #24]
 80085a2:	f003 0307 	and.w	r3, r3, #7
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d00a      	beq.n	80085c0 <pvPortMalloc+0xf8>
	__asm volatile
 80085aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ae:	f383 8811 	msr	BASEPRI, r3
 80085b2:	f3bf 8f6f 	isb	sy
 80085b6:	f3bf 8f4f 	dsb	sy
 80085ba:	613b      	str	r3, [r7, #16]
}
 80085bc:	bf00      	nop
 80085be:	e7fe      	b.n	80085be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80085c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c2:	685a      	ldr	r2, [r3, #4]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	1ad2      	subs	r2, r2, r3
 80085c8:	69bb      	ldr	r3, [r7, #24]
 80085ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80085cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80085d2:	69b8      	ldr	r0, [r7, #24]
 80085d4:	f000 f920 	bl	8008818 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80085d8:	4b1d      	ldr	r3, [pc, #116]	; (8008650 <pvPortMalloc+0x188>)
 80085da:	681a      	ldr	r2, [r3, #0]
 80085dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	1ad3      	subs	r3, r2, r3
 80085e2:	4a1b      	ldr	r2, [pc, #108]	; (8008650 <pvPortMalloc+0x188>)
 80085e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80085e6:	4b1a      	ldr	r3, [pc, #104]	; (8008650 <pvPortMalloc+0x188>)
 80085e8:	681a      	ldr	r2, [r3, #0]
 80085ea:	4b1b      	ldr	r3, [pc, #108]	; (8008658 <pvPortMalloc+0x190>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d203      	bcs.n	80085fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80085f2:	4b17      	ldr	r3, [pc, #92]	; (8008650 <pvPortMalloc+0x188>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a18      	ldr	r2, [pc, #96]	; (8008658 <pvPortMalloc+0x190>)
 80085f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80085fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fc:	685a      	ldr	r2, [r3, #4]
 80085fe:	4b13      	ldr	r3, [pc, #76]	; (800864c <pvPortMalloc+0x184>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	431a      	orrs	r2, r3
 8008604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008606:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860a:	2200      	movs	r2, #0
 800860c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800860e:	4b13      	ldr	r3, [pc, #76]	; (800865c <pvPortMalloc+0x194>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	3301      	adds	r3, #1
 8008614:	4a11      	ldr	r2, [pc, #68]	; (800865c <pvPortMalloc+0x194>)
 8008616:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008618:	f7fe ff38 	bl	800748c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800861c:	69fb      	ldr	r3, [r7, #28]
 800861e:	f003 0307 	and.w	r3, r3, #7
 8008622:	2b00      	cmp	r3, #0
 8008624:	d00a      	beq.n	800863c <pvPortMalloc+0x174>
	__asm volatile
 8008626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800862a:	f383 8811 	msr	BASEPRI, r3
 800862e:	f3bf 8f6f 	isb	sy
 8008632:	f3bf 8f4f 	dsb	sy
 8008636:	60fb      	str	r3, [r7, #12]
}
 8008638:	bf00      	nop
 800863a:	e7fe      	b.n	800863a <pvPortMalloc+0x172>
	return pvReturn;
 800863c:	69fb      	ldr	r3, [r7, #28]
}
 800863e:	4618      	mov	r0, r3
 8008640:	3728      	adds	r7, #40	; 0x28
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
 8008646:	bf00      	nop
 8008648:	2000145c 	.word	0x2000145c
 800864c:	20001470 	.word	0x20001470
 8008650:	20001460 	.word	0x20001460
 8008654:	20001454 	.word	0x20001454
 8008658:	20001464 	.word	0x20001464
 800865c:	20001468 	.word	0x20001468

08008660 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b086      	sub	sp, #24
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d04d      	beq.n	800870e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008672:	2308      	movs	r3, #8
 8008674:	425b      	negs	r3, r3
 8008676:	697a      	ldr	r2, [r7, #20]
 8008678:	4413      	add	r3, r2
 800867a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	685a      	ldr	r2, [r3, #4]
 8008684:	4b24      	ldr	r3, [pc, #144]	; (8008718 <vPortFree+0xb8>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4013      	ands	r3, r2
 800868a:	2b00      	cmp	r3, #0
 800868c:	d10a      	bne.n	80086a4 <vPortFree+0x44>
	__asm volatile
 800868e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008692:	f383 8811 	msr	BASEPRI, r3
 8008696:	f3bf 8f6f 	isb	sy
 800869a:	f3bf 8f4f 	dsb	sy
 800869e:	60fb      	str	r3, [r7, #12]
}
 80086a0:	bf00      	nop
 80086a2:	e7fe      	b.n	80086a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d00a      	beq.n	80086c2 <vPortFree+0x62>
	__asm volatile
 80086ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b0:	f383 8811 	msr	BASEPRI, r3
 80086b4:	f3bf 8f6f 	isb	sy
 80086b8:	f3bf 8f4f 	dsb	sy
 80086bc:	60bb      	str	r3, [r7, #8]
}
 80086be:	bf00      	nop
 80086c0:	e7fe      	b.n	80086c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	685a      	ldr	r2, [r3, #4]
 80086c6:	4b14      	ldr	r3, [pc, #80]	; (8008718 <vPortFree+0xb8>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4013      	ands	r3, r2
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d01e      	beq.n	800870e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d11a      	bne.n	800870e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	685a      	ldr	r2, [r3, #4]
 80086dc:	4b0e      	ldr	r3, [pc, #56]	; (8008718 <vPortFree+0xb8>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	43db      	mvns	r3, r3
 80086e2:	401a      	ands	r2, r3
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80086e8:	f7fe fec2 	bl	8007470 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	685a      	ldr	r2, [r3, #4]
 80086f0:	4b0a      	ldr	r3, [pc, #40]	; (800871c <vPortFree+0xbc>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4413      	add	r3, r2
 80086f6:	4a09      	ldr	r2, [pc, #36]	; (800871c <vPortFree+0xbc>)
 80086f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80086fa:	6938      	ldr	r0, [r7, #16]
 80086fc:	f000 f88c 	bl	8008818 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008700:	4b07      	ldr	r3, [pc, #28]	; (8008720 <vPortFree+0xc0>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	3301      	adds	r3, #1
 8008706:	4a06      	ldr	r2, [pc, #24]	; (8008720 <vPortFree+0xc0>)
 8008708:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800870a:	f7fe febf 	bl	800748c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800870e:	bf00      	nop
 8008710:	3718      	adds	r7, #24
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop
 8008718:	20001470 	.word	0x20001470
 800871c:	20001460 	.word	0x20001460
 8008720:	2000146c 	.word	0x2000146c

08008724 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8008724:	b480      	push	{r7}
 8008726:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8008728:	4b03      	ldr	r3, [pc, #12]	; (8008738 <xPortGetFreeHeapSize+0x14>)
 800872a:	681b      	ldr	r3, [r3, #0]
}
 800872c:	4618      	mov	r0, r3
 800872e:	46bd      	mov	sp, r7
 8008730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008734:	4770      	bx	lr
 8008736:	bf00      	nop
 8008738:	20001460 	.word	0x20001460

0800873c <xPortGetMinimumEverFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetMinimumEverFreeHeapSize( void )
{
 800873c:	b480      	push	{r7}
 800873e:	af00      	add	r7, sp, #0
	return xMinimumEverFreeBytesRemaining;
 8008740:	4b03      	ldr	r3, [pc, #12]	; (8008750 <xPortGetMinimumEverFreeHeapSize+0x14>)
 8008742:	681b      	ldr	r3, [r3, #0]
}
 8008744:	4618      	mov	r0, r3
 8008746:	46bd      	mov	sp, r7
 8008748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874c:	4770      	bx	lr
 800874e:	bf00      	nop
 8008750:	20001464 	.word	0x20001464

08008754 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008754:	b480      	push	{r7}
 8008756:	b085      	sub	sp, #20
 8008758:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800875a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800875e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008760:	4b27      	ldr	r3, [pc, #156]	; (8008800 <prvHeapInit+0xac>)
 8008762:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f003 0307 	and.w	r3, r3, #7
 800876a:	2b00      	cmp	r3, #0
 800876c:	d00c      	beq.n	8008788 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	3307      	adds	r3, #7
 8008772:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f023 0307 	bic.w	r3, r3, #7
 800877a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800877c:	68ba      	ldr	r2, [r7, #8]
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	1ad3      	subs	r3, r2, r3
 8008782:	4a1f      	ldr	r2, [pc, #124]	; (8008800 <prvHeapInit+0xac>)
 8008784:	4413      	add	r3, r2
 8008786:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800878c:	4a1d      	ldr	r2, [pc, #116]	; (8008804 <prvHeapInit+0xb0>)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008792:	4b1c      	ldr	r3, [pc, #112]	; (8008804 <prvHeapInit+0xb0>)
 8008794:	2200      	movs	r2, #0
 8008796:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	68ba      	ldr	r2, [r7, #8]
 800879c:	4413      	add	r3, r2
 800879e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80087a0:	2208      	movs	r2, #8
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	1a9b      	subs	r3, r3, r2
 80087a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f023 0307 	bic.w	r3, r3, #7
 80087ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	4a15      	ldr	r2, [pc, #84]	; (8008808 <prvHeapInit+0xb4>)
 80087b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80087b6:	4b14      	ldr	r3, [pc, #80]	; (8008808 <prvHeapInit+0xb4>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	2200      	movs	r2, #0
 80087bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80087be:	4b12      	ldr	r3, [pc, #72]	; (8008808 <prvHeapInit+0xb4>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	2200      	movs	r2, #0
 80087c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	68fa      	ldr	r2, [r7, #12]
 80087ce:	1ad2      	subs	r2, r2, r3
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80087d4:	4b0c      	ldr	r3, [pc, #48]	; (8008808 <prvHeapInit+0xb4>)
 80087d6:	681a      	ldr	r2, [r3, #0]
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	4a0a      	ldr	r2, [pc, #40]	; (800880c <prvHeapInit+0xb8>)
 80087e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	4a09      	ldr	r2, [pc, #36]	; (8008810 <prvHeapInit+0xbc>)
 80087ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80087ec:	4b09      	ldr	r3, [pc, #36]	; (8008814 <prvHeapInit+0xc0>)
 80087ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80087f2:	601a      	str	r2, [r3, #0]
}
 80087f4:	bf00      	nop
 80087f6:	3714      	adds	r7, #20
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr
 8008800:	2000089c 	.word	0x2000089c
 8008804:	20001454 	.word	0x20001454
 8008808:	2000145c 	.word	0x2000145c
 800880c:	20001464 	.word	0x20001464
 8008810:	20001460 	.word	0x20001460
 8008814:	20001470 	.word	0x20001470

08008818 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008818:	b480      	push	{r7}
 800881a:	b085      	sub	sp, #20
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008820:	4b28      	ldr	r3, [pc, #160]	; (80088c4 <prvInsertBlockIntoFreeList+0xac>)
 8008822:	60fb      	str	r3, [r7, #12]
 8008824:	e002      	b.n	800882c <prvInsertBlockIntoFreeList+0x14>
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	60fb      	str	r3, [r7, #12]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	687a      	ldr	r2, [r7, #4]
 8008832:	429a      	cmp	r2, r3
 8008834:	d8f7      	bhi.n	8008826 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	68ba      	ldr	r2, [r7, #8]
 8008840:	4413      	add	r3, r2
 8008842:	687a      	ldr	r2, [r7, #4]
 8008844:	429a      	cmp	r2, r3
 8008846:	d108      	bne.n	800885a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	685a      	ldr	r2, [r3, #4]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	441a      	add	r2, r3
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	68ba      	ldr	r2, [r7, #8]
 8008864:	441a      	add	r2, r3
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	429a      	cmp	r2, r3
 800886c:	d118      	bne.n	80088a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681a      	ldr	r2, [r3, #0]
 8008872:	4b15      	ldr	r3, [pc, #84]	; (80088c8 <prvInsertBlockIntoFreeList+0xb0>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	429a      	cmp	r2, r3
 8008878:	d00d      	beq.n	8008896 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	685a      	ldr	r2, [r3, #4]
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	441a      	add	r2, r3
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	681a      	ldr	r2, [r3, #0]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	601a      	str	r2, [r3, #0]
 8008894:	e008      	b.n	80088a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008896:	4b0c      	ldr	r3, [pc, #48]	; (80088c8 <prvInsertBlockIntoFreeList+0xb0>)
 8008898:	681a      	ldr	r2, [r3, #0]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	601a      	str	r2, [r3, #0]
 800889e:	e003      	b.n	80088a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681a      	ldr	r2, [r3, #0]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80088a8:	68fa      	ldr	r2, [r7, #12]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	429a      	cmp	r2, r3
 80088ae:	d002      	beq.n	80088b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	687a      	ldr	r2, [r7, #4]
 80088b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80088b6:	bf00      	nop
 80088b8:	3714      	adds	r7, #20
 80088ba:	46bd      	mov	sp, r7
 80088bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c0:	4770      	bx	lr
 80088c2:	bf00      	nop
 80088c4:	20001454 	.word	0x20001454
 80088c8:	2000145c 	.word	0x2000145c

080088cc <__cxa_guard_acquire>:
 80088cc:	6803      	ldr	r3, [r0, #0]
 80088ce:	07db      	lsls	r3, r3, #31
 80088d0:	d406      	bmi.n	80088e0 <__cxa_guard_acquire+0x14>
 80088d2:	7843      	ldrb	r3, [r0, #1]
 80088d4:	b103      	cbz	r3, 80088d8 <__cxa_guard_acquire+0xc>
 80088d6:	deff      	udf	#255	; 0xff
 80088d8:	2301      	movs	r3, #1
 80088da:	7043      	strb	r3, [r0, #1]
 80088dc:	4618      	mov	r0, r3
 80088de:	4770      	bx	lr
 80088e0:	2000      	movs	r0, #0
 80088e2:	4770      	bx	lr

080088e4 <__cxa_guard_release>:
 80088e4:	2301      	movs	r3, #1
 80088e6:	6003      	str	r3, [r0, #0]
 80088e8:	4770      	bx	lr

080088ea <_Znwj>:
 80088ea:	2801      	cmp	r0, #1
 80088ec:	bf38      	it	cc
 80088ee:	2001      	movcc	r0, #1
 80088f0:	b510      	push	{r4, lr}
 80088f2:	4604      	mov	r4, r0
 80088f4:	4620      	mov	r0, r4
 80088f6:	f000 f845 	bl	8008984 <malloc>
 80088fa:	b930      	cbnz	r0, 800890a <_Znwj+0x20>
 80088fc:	f000 f806 	bl	800890c <_ZSt15get_new_handlerv>
 8008900:	b908      	cbnz	r0, 8008906 <_Znwj+0x1c>
 8008902:	f000 f80b 	bl	800891c <abort>
 8008906:	4780      	blx	r0
 8008908:	e7f4      	b.n	80088f4 <_Znwj+0xa>
 800890a:	bd10      	pop	{r4, pc}

0800890c <_ZSt15get_new_handlerv>:
 800890c:	4b02      	ldr	r3, [pc, #8]	; (8008918 <_ZSt15get_new_handlerv+0xc>)
 800890e:	6818      	ldr	r0, [r3, #0]
 8008910:	f3bf 8f5b 	dmb	ish
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop
 8008918:	20001474 	.word	0x20001474

0800891c <abort>:
 800891c:	b508      	push	{r3, lr}
 800891e:	2006      	movs	r0, #6
 8008920:	f000 f9d0 	bl	8008cc4 <raise>
 8008924:	2001      	movs	r0, #1
 8008926:	f7f9 fbbb 	bl	80020a0 <_exit>
	...

0800892c <__errno>:
 800892c:	4b01      	ldr	r3, [pc, #4]	; (8008934 <__errno+0x8>)
 800892e:	6818      	ldr	r0, [r3, #0]
 8008930:	4770      	bx	lr
 8008932:	bf00      	nop
 8008934:	20000010 	.word	0x20000010

08008938 <__libc_init_array>:
 8008938:	b570      	push	{r4, r5, r6, lr}
 800893a:	4d0d      	ldr	r5, [pc, #52]	; (8008970 <__libc_init_array+0x38>)
 800893c:	4c0d      	ldr	r4, [pc, #52]	; (8008974 <__libc_init_array+0x3c>)
 800893e:	1b64      	subs	r4, r4, r5
 8008940:	10a4      	asrs	r4, r4, #2
 8008942:	2600      	movs	r6, #0
 8008944:	42a6      	cmp	r6, r4
 8008946:	d109      	bne.n	800895c <__libc_init_array+0x24>
 8008948:	4d0b      	ldr	r5, [pc, #44]	; (8008978 <__libc_init_array+0x40>)
 800894a:	4c0c      	ldr	r4, [pc, #48]	; (800897c <__libc_init_array+0x44>)
 800894c:	f000 fd92 	bl	8009474 <_init>
 8008950:	1b64      	subs	r4, r4, r5
 8008952:	10a4      	asrs	r4, r4, #2
 8008954:	2600      	movs	r6, #0
 8008956:	42a6      	cmp	r6, r4
 8008958:	d105      	bne.n	8008966 <__libc_init_array+0x2e>
 800895a:	bd70      	pop	{r4, r5, r6, pc}
 800895c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008960:	4798      	blx	r3
 8008962:	3601      	adds	r6, #1
 8008964:	e7ee      	b.n	8008944 <__libc_init_array+0xc>
 8008966:	f855 3b04 	ldr.w	r3, [r5], #4
 800896a:	4798      	blx	r3
 800896c:	3601      	adds	r6, #1
 800896e:	e7f2      	b.n	8008956 <__libc_init_array+0x1e>
 8008970:	08009b8c 	.word	0x08009b8c
 8008974:	08009b8c 	.word	0x08009b8c
 8008978:	08009b8c 	.word	0x08009b8c
 800897c:	08009b94 	.word	0x08009b94

08008980 <__retarget_lock_acquire_recursive>:
 8008980:	4770      	bx	lr

08008982 <__retarget_lock_release_recursive>:
 8008982:	4770      	bx	lr

08008984 <malloc>:
 8008984:	4b02      	ldr	r3, [pc, #8]	; (8008990 <malloc+0xc>)
 8008986:	4601      	mov	r1, r0
 8008988:	6818      	ldr	r0, [r3, #0]
 800898a:	f000 b885 	b.w	8008a98 <_malloc_r>
 800898e:	bf00      	nop
 8008990:	20000010 	.word	0x20000010

08008994 <memcpy>:
 8008994:	440a      	add	r2, r1
 8008996:	4291      	cmp	r1, r2
 8008998:	f100 33ff 	add.w	r3, r0, #4294967295
 800899c:	d100      	bne.n	80089a0 <memcpy+0xc>
 800899e:	4770      	bx	lr
 80089a0:	b510      	push	{r4, lr}
 80089a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089aa:	4291      	cmp	r1, r2
 80089ac:	d1f9      	bne.n	80089a2 <memcpy+0xe>
 80089ae:	bd10      	pop	{r4, pc}

080089b0 <memset>:
 80089b0:	4402      	add	r2, r0
 80089b2:	4603      	mov	r3, r0
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d100      	bne.n	80089ba <memset+0xa>
 80089b8:	4770      	bx	lr
 80089ba:	f803 1b01 	strb.w	r1, [r3], #1
 80089be:	e7f9      	b.n	80089b4 <memset+0x4>

080089c0 <_free_r>:
 80089c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80089c2:	2900      	cmp	r1, #0
 80089c4:	d044      	beq.n	8008a50 <_free_r+0x90>
 80089c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089ca:	9001      	str	r0, [sp, #4]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	f1a1 0404 	sub.w	r4, r1, #4
 80089d2:	bfb8      	it	lt
 80089d4:	18e4      	addlt	r4, r4, r3
 80089d6:	f000 f9ff 	bl	8008dd8 <__malloc_lock>
 80089da:	4a1e      	ldr	r2, [pc, #120]	; (8008a54 <_free_r+0x94>)
 80089dc:	9801      	ldr	r0, [sp, #4]
 80089de:	6813      	ldr	r3, [r2, #0]
 80089e0:	b933      	cbnz	r3, 80089f0 <_free_r+0x30>
 80089e2:	6063      	str	r3, [r4, #4]
 80089e4:	6014      	str	r4, [r2, #0]
 80089e6:	b003      	add	sp, #12
 80089e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80089ec:	f000 b9fa 	b.w	8008de4 <__malloc_unlock>
 80089f0:	42a3      	cmp	r3, r4
 80089f2:	d908      	bls.n	8008a06 <_free_r+0x46>
 80089f4:	6825      	ldr	r5, [r4, #0]
 80089f6:	1961      	adds	r1, r4, r5
 80089f8:	428b      	cmp	r3, r1
 80089fa:	bf01      	itttt	eq
 80089fc:	6819      	ldreq	r1, [r3, #0]
 80089fe:	685b      	ldreq	r3, [r3, #4]
 8008a00:	1949      	addeq	r1, r1, r5
 8008a02:	6021      	streq	r1, [r4, #0]
 8008a04:	e7ed      	b.n	80089e2 <_free_r+0x22>
 8008a06:	461a      	mov	r2, r3
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	b10b      	cbz	r3, 8008a10 <_free_r+0x50>
 8008a0c:	42a3      	cmp	r3, r4
 8008a0e:	d9fa      	bls.n	8008a06 <_free_r+0x46>
 8008a10:	6811      	ldr	r1, [r2, #0]
 8008a12:	1855      	adds	r5, r2, r1
 8008a14:	42a5      	cmp	r5, r4
 8008a16:	d10b      	bne.n	8008a30 <_free_r+0x70>
 8008a18:	6824      	ldr	r4, [r4, #0]
 8008a1a:	4421      	add	r1, r4
 8008a1c:	1854      	adds	r4, r2, r1
 8008a1e:	42a3      	cmp	r3, r4
 8008a20:	6011      	str	r1, [r2, #0]
 8008a22:	d1e0      	bne.n	80089e6 <_free_r+0x26>
 8008a24:	681c      	ldr	r4, [r3, #0]
 8008a26:	685b      	ldr	r3, [r3, #4]
 8008a28:	6053      	str	r3, [r2, #4]
 8008a2a:	4421      	add	r1, r4
 8008a2c:	6011      	str	r1, [r2, #0]
 8008a2e:	e7da      	b.n	80089e6 <_free_r+0x26>
 8008a30:	d902      	bls.n	8008a38 <_free_r+0x78>
 8008a32:	230c      	movs	r3, #12
 8008a34:	6003      	str	r3, [r0, #0]
 8008a36:	e7d6      	b.n	80089e6 <_free_r+0x26>
 8008a38:	6825      	ldr	r5, [r4, #0]
 8008a3a:	1961      	adds	r1, r4, r5
 8008a3c:	428b      	cmp	r3, r1
 8008a3e:	bf04      	itt	eq
 8008a40:	6819      	ldreq	r1, [r3, #0]
 8008a42:	685b      	ldreq	r3, [r3, #4]
 8008a44:	6063      	str	r3, [r4, #4]
 8008a46:	bf04      	itt	eq
 8008a48:	1949      	addeq	r1, r1, r5
 8008a4a:	6021      	streq	r1, [r4, #0]
 8008a4c:	6054      	str	r4, [r2, #4]
 8008a4e:	e7ca      	b.n	80089e6 <_free_r+0x26>
 8008a50:	b003      	add	sp, #12
 8008a52:	bd30      	pop	{r4, r5, pc}
 8008a54:	2000147c 	.word	0x2000147c

08008a58 <sbrk_aligned>:
 8008a58:	b570      	push	{r4, r5, r6, lr}
 8008a5a:	4e0e      	ldr	r6, [pc, #56]	; (8008a94 <sbrk_aligned+0x3c>)
 8008a5c:	460c      	mov	r4, r1
 8008a5e:	6831      	ldr	r1, [r6, #0]
 8008a60:	4605      	mov	r5, r0
 8008a62:	b911      	cbnz	r1, 8008a6a <sbrk_aligned+0x12>
 8008a64:	f000 f8f6 	bl	8008c54 <_sbrk_r>
 8008a68:	6030      	str	r0, [r6, #0]
 8008a6a:	4621      	mov	r1, r4
 8008a6c:	4628      	mov	r0, r5
 8008a6e:	f000 f8f1 	bl	8008c54 <_sbrk_r>
 8008a72:	1c43      	adds	r3, r0, #1
 8008a74:	d00a      	beq.n	8008a8c <sbrk_aligned+0x34>
 8008a76:	1cc4      	adds	r4, r0, #3
 8008a78:	f024 0403 	bic.w	r4, r4, #3
 8008a7c:	42a0      	cmp	r0, r4
 8008a7e:	d007      	beq.n	8008a90 <sbrk_aligned+0x38>
 8008a80:	1a21      	subs	r1, r4, r0
 8008a82:	4628      	mov	r0, r5
 8008a84:	f000 f8e6 	bl	8008c54 <_sbrk_r>
 8008a88:	3001      	adds	r0, #1
 8008a8a:	d101      	bne.n	8008a90 <sbrk_aligned+0x38>
 8008a8c:	f04f 34ff 	mov.w	r4, #4294967295
 8008a90:	4620      	mov	r0, r4
 8008a92:	bd70      	pop	{r4, r5, r6, pc}
 8008a94:	20001480 	.word	0x20001480

08008a98 <_malloc_r>:
 8008a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a9c:	1ccd      	adds	r5, r1, #3
 8008a9e:	f025 0503 	bic.w	r5, r5, #3
 8008aa2:	3508      	adds	r5, #8
 8008aa4:	2d0c      	cmp	r5, #12
 8008aa6:	bf38      	it	cc
 8008aa8:	250c      	movcc	r5, #12
 8008aaa:	2d00      	cmp	r5, #0
 8008aac:	4607      	mov	r7, r0
 8008aae:	db01      	blt.n	8008ab4 <_malloc_r+0x1c>
 8008ab0:	42a9      	cmp	r1, r5
 8008ab2:	d905      	bls.n	8008ac0 <_malloc_r+0x28>
 8008ab4:	230c      	movs	r3, #12
 8008ab6:	603b      	str	r3, [r7, #0]
 8008ab8:	2600      	movs	r6, #0
 8008aba:	4630      	mov	r0, r6
 8008abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ac0:	4e2e      	ldr	r6, [pc, #184]	; (8008b7c <_malloc_r+0xe4>)
 8008ac2:	f000 f989 	bl	8008dd8 <__malloc_lock>
 8008ac6:	6833      	ldr	r3, [r6, #0]
 8008ac8:	461c      	mov	r4, r3
 8008aca:	bb34      	cbnz	r4, 8008b1a <_malloc_r+0x82>
 8008acc:	4629      	mov	r1, r5
 8008ace:	4638      	mov	r0, r7
 8008ad0:	f7ff ffc2 	bl	8008a58 <sbrk_aligned>
 8008ad4:	1c43      	adds	r3, r0, #1
 8008ad6:	4604      	mov	r4, r0
 8008ad8:	d14d      	bne.n	8008b76 <_malloc_r+0xde>
 8008ada:	6834      	ldr	r4, [r6, #0]
 8008adc:	4626      	mov	r6, r4
 8008ade:	2e00      	cmp	r6, #0
 8008ae0:	d140      	bne.n	8008b64 <_malloc_r+0xcc>
 8008ae2:	6823      	ldr	r3, [r4, #0]
 8008ae4:	4631      	mov	r1, r6
 8008ae6:	4638      	mov	r0, r7
 8008ae8:	eb04 0803 	add.w	r8, r4, r3
 8008aec:	f000 f8b2 	bl	8008c54 <_sbrk_r>
 8008af0:	4580      	cmp	r8, r0
 8008af2:	d13a      	bne.n	8008b6a <_malloc_r+0xd2>
 8008af4:	6821      	ldr	r1, [r4, #0]
 8008af6:	3503      	adds	r5, #3
 8008af8:	1a6d      	subs	r5, r5, r1
 8008afa:	f025 0503 	bic.w	r5, r5, #3
 8008afe:	3508      	adds	r5, #8
 8008b00:	2d0c      	cmp	r5, #12
 8008b02:	bf38      	it	cc
 8008b04:	250c      	movcc	r5, #12
 8008b06:	4629      	mov	r1, r5
 8008b08:	4638      	mov	r0, r7
 8008b0a:	f7ff ffa5 	bl	8008a58 <sbrk_aligned>
 8008b0e:	3001      	adds	r0, #1
 8008b10:	d02b      	beq.n	8008b6a <_malloc_r+0xd2>
 8008b12:	6823      	ldr	r3, [r4, #0]
 8008b14:	442b      	add	r3, r5
 8008b16:	6023      	str	r3, [r4, #0]
 8008b18:	e00e      	b.n	8008b38 <_malloc_r+0xa0>
 8008b1a:	6822      	ldr	r2, [r4, #0]
 8008b1c:	1b52      	subs	r2, r2, r5
 8008b1e:	d41e      	bmi.n	8008b5e <_malloc_r+0xc6>
 8008b20:	2a0b      	cmp	r2, #11
 8008b22:	d916      	bls.n	8008b52 <_malloc_r+0xba>
 8008b24:	1961      	adds	r1, r4, r5
 8008b26:	42a3      	cmp	r3, r4
 8008b28:	6025      	str	r5, [r4, #0]
 8008b2a:	bf18      	it	ne
 8008b2c:	6059      	strne	r1, [r3, #4]
 8008b2e:	6863      	ldr	r3, [r4, #4]
 8008b30:	bf08      	it	eq
 8008b32:	6031      	streq	r1, [r6, #0]
 8008b34:	5162      	str	r2, [r4, r5]
 8008b36:	604b      	str	r3, [r1, #4]
 8008b38:	4638      	mov	r0, r7
 8008b3a:	f104 060b 	add.w	r6, r4, #11
 8008b3e:	f000 f951 	bl	8008de4 <__malloc_unlock>
 8008b42:	f026 0607 	bic.w	r6, r6, #7
 8008b46:	1d23      	adds	r3, r4, #4
 8008b48:	1af2      	subs	r2, r6, r3
 8008b4a:	d0b6      	beq.n	8008aba <_malloc_r+0x22>
 8008b4c:	1b9b      	subs	r3, r3, r6
 8008b4e:	50a3      	str	r3, [r4, r2]
 8008b50:	e7b3      	b.n	8008aba <_malloc_r+0x22>
 8008b52:	6862      	ldr	r2, [r4, #4]
 8008b54:	42a3      	cmp	r3, r4
 8008b56:	bf0c      	ite	eq
 8008b58:	6032      	streq	r2, [r6, #0]
 8008b5a:	605a      	strne	r2, [r3, #4]
 8008b5c:	e7ec      	b.n	8008b38 <_malloc_r+0xa0>
 8008b5e:	4623      	mov	r3, r4
 8008b60:	6864      	ldr	r4, [r4, #4]
 8008b62:	e7b2      	b.n	8008aca <_malloc_r+0x32>
 8008b64:	4634      	mov	r4, r6
 8008b66:	6876      	ldr	r6, [r6, #4]
 8008b68:	e7b9      	b.n	8008ade <_malloc_r+0x46>
 8008b6a:	230c      	movs	r3, #12
 8008b6c:	603b      	str	r3, [r7, #0]
 8008b6e:	4638      	mov	r0, r7
 8008b70:	f000 f938 	bl	8008de4 <__malloc_unlock>
 8008b74:	e7a1      	b.n	8008aba <_malloc_r+0x22>
 8008b76:	6025      	str	r5, [r4, #0]
 8008b78:	e7de      	b.n	8008b38 <_malloc_r+0xa0>
 8008b7a:	bf00      	nop
 8008b7c:	2000147c 	.word	0x2000147c

08008b80 <cleanup_glue>:
 8008b80:	b538      	push	{r3, r4, r5, lr}
 8008b82:	460c      	mov	r4, r1
 8008b84:	6809      	ldr	r1, [r1, #0]
 8008b86:	4605      	mov	r5, r0
 8008b88:	b109      	cbz	r1, 8008b8e <cleanup_glue+0xe>
 8008b8a:	f7ff fff9 	bl	8008b80 <cleanup_glue>
 8008b8e:	4621      	mov	r1, r4
 8008b90:	4628      	mov	r0, r5
 8008b92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b96:	f7ff bf13 	b.w	80089c0 <_free_r>
	...

08008b9c <_reclaim_reent>:
 8008b9c:	4b2c      	ldr	r3, [pc, #176]	; (8008c50 <_reclaim_reent+0xb4>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4283      	cmp	r3, r0
 8008ba2:	b570      	push	{r4, r5, r6, lr}
 8008ba4:	4604      	mov	r4, r0
 8008ba6:	d051      	beq.n	8008c4c <_reclaim_reent+0xb0>
 8008ba8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008baa:	b143      	cbz	r3, 8008bbe <_reclaim_reent+0x22>
 8008bac:	68db      	ldr	r3, [r3, #12]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d14a      	bne.n	8008c48 <_reclaim_reent+0xac>
 8008bb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008bb4:	6819      	ldr	r1, [r3, #0]
 8008bb6:	b111      	cbz	r1, 8008bbe <_reclaim_reent+0x22>
 8008bb8:	4620      	mov	r0, r4
 8008bba:	f7ff ff01 	bl	80089c0 <_free_r>
 8008bbe:	6961      	ldr	r1, [r4, #20]
 8008bc0:	b111      	cbz	r1, 8008bc8 <_reclaim_reent+0x2c>
 8008bc2:	4620      	mov	r0, r4
 8008bc4:	f7ff fefc 	bl	80089c0 <_free_r>
 8008bc8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008bca:	b111      	cbz	r1, 8008bd2 <_reclaim_reent+0x36>
 8008bcc:	4620      	mov	r0, r4
 8008bce:	f7ff fef7 	bl	80089c0 <_free_r>
 8008bd2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008bd4:	b111      	cbz	r1, 8008bdc <_reclaim_reent+0x40>
 8008bd6:	4620      	mov	r0, r4
 8008bd8:	f7ff fef2 	bl	80089c0 <_free_r>
 8008bdc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008bde:	b111      	cbz	r1, 8008be6 <_reclaim_reent+0x4a>
 8008be0:	4620      	mov	r0, r4
 8008be2:	f7ff feed 	bl	80089c0 <_free_r>
 8008be6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008be8:	b111      	cbz	r1, 8008bf0 <_reclaim_reent+0x54>
 8008bea:	4620      	mov	r0, r4
 8008bec:	f7ff fee8 	bl	80089c0 <_free_r>
 8008bf0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008bf2:	b111      	cbz	r1, 8008bfa <_reclaim_reent+0x5e>
 8008bf4:	4620      	mov	r0, r4
 8008bf6:	f7ff fee3 	bl	80089c0 <_free_r>
 8008bfa:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008bfc:	b111      	cbz	r1, 8008c04 <_reclaim_reent+0x68>
 8008bfe:	4620      	mov	r0, r4
 8008c00:	f7ff fede 	bl	80089c0 <_free_r>
 8008c04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c06:	b111      	cbz	r1, 8008c0e <_reclaim_reent+0x72>
 8008c08:	4620      	mov	r0, r4
 8008c0a:	f7ff fed9 	bl	80089c0 <_free_r>
 8008c0e:	69a3      	ldr	r3, [r4, #24]
 8008c10:	b1e3      	cbz	r3, 8008c4c <_reclaim_reent+0xb0>
 8008c12:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008c14:	4620      	mov	r0, r4
 8008c16:	4798      	blx	r3
 8008c18:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008c1a:	b1b9      	cbz	r1, 8008c4c <_reclaim_reent+0xb0>
 8008c1c:	4620      	mov	r0, r4
 8008c1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008c22:	f7ff bfad 	b.w	8008b80 <cleanup_glue>
 8008c26:	5949      	ldr	r1, [r1, r5]
 8008c28:	b941      	cbnz	r1, 8008c3c <_reclaim_reent+0xa0>
 8008c2a:	3504      	adds	r5, #4
 8008c2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c2e:	2d80      	cmp	r5, #128	; 0x80
 8008c30:	68d9      	ldr	r1, [r3, #12]
 8008c32:	d1f8      	bne.n	8008c26 <_reclaim_reent+0x8a>
 8008c34:	4620      	mov	r0, r4
 8008c36:	f7ff fec3 	bl	80089c0 <_free_r>
 8008c3a:	e7ba      	b.n	8008bb2 <_reclaim_reent+0x16>
 8008c3c:	680e      	ldr	r6, [r1, #0]
 8008c3e:	4620      	mov	r0, r4
 8008c40:	f7ff febe 	bl	80089c0 <_free_r>
 8008c44:	4631      	mov	r1, r6
 8008c46:	e7ef      	b.n	8008c28 <_reclaim_reent+0x8c>
 8008c48:	2500      	movs	r5, #0
 8008c4a:	e7ef      	b.n	8008c2c <_reclaim_reent+0x90>
 8008c4c:	bd70      	pop	{r4, r5, r6, pc}
 8008c4e:	bf00      	nop
 8008c50:	20000010 	.word	0x20000010

08008c54 <_sbrk_r>:
 8008c54:	b538      	push	{r3, r4, r5, lr}
 8008c56:	4d06      	ldr	r5, [pc, #24]	; (8008c70 <_sbrk_r+0x1c>)
 8008c58:	2300      	movs	r3, #0
 8008c5a:	4604      	mov	r4, r0
 8008c5c:	4608      	mov	r0, r1
 8008c5e:	602b      	str	r3, [r5, #0]
 8008c60:	f7f9 fa28 	bl	80020b4 <_sbrk>
 8008c64:	1c43      	adds	r3, r0, #1
 8008c66:	d102      	bne.n	8008c6e <_sbrk_r+0x1a>
 8008c68:	682b      	ldr	r3, [r5, #0]
 8008c6a:	b103      	cbz	r3, 8008c6e <_sbrk_r+0x1a>
 8008c6c:	6023      	str	r3, [r4, #0]
 8008c6e:	bd38      	pop	{r3, r4, r5, pc}
 8008c70:	20001484 	.word	0x20001484

08008c74 <_raise_r>:
 8008c74:	291f      	cmp	r1, #31
 8008c76:	b538      	push	{r3, r4, r5, lr}
 8008c78:	4604      	mov	r4, r0
 8008c7a:	460d      	mov	r5, r1
 8008c7c:	d904      	bls.n	8008c88 <_raise_r+0x14>
 8008c7e:	2316      	movs	r3, #22
 8008c80:	6003      	str	r3, [r0, #0]
 8008c82:	f04f 30ff 	mov.w	r0, #4294967295
 8008c86:	bd38      	pop	{r3, r4, r5, pc}
 8008c88:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008c8a:	b112      	cbz	r2, 8008c92 <_raise_r+0x1e>
 8008c8c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008c90:	b94b      	cbnz	r3, 8008ca6 <_raise_r+0x32>
 8008c92:	4620      	mov	r0, r4
 8008c94:	f000 f830 	bl	8008cf8 <_getpid_r>
 8008c98:	462a      	mov	r2, r5
 8008c9a:	4601      	mov	r1, r0
 8008c9c:	4620      	mov	r0, r4
 8008c9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ca2:	f000 b817 	b.w	8008cd4 <_kill_r>
 8008ca6:	2b01      	cmp	r3, #1
 8008ca8:	d00a      	beq.n	8008cc0 <_raise_r+0x4c>
 8008caa:	1c59      	adds	r1, r3, #1
 8008cac:	d103      	bne.n	8008cb6 <_raise_r+0x42>
 8008cae:	2316      	movs	r3, #22
 8008cb0:	6003      	str	r3, [r0, #0]
 8008cb2:	2001      	movs	r0, #1
 8008cb4:	e7e7      	b.n	8008c86 <_raise_r+0x12>
 8008cb6:	2400      	movs	r4, #0
 8008cb8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008cbc:	4628      	mov	r0, r5
 8008cbe:	4798      	blx	r3
 8008cc0:	2000      	movs	r0, #0
 8008cc2:	e7e0      	b.n	8008c86 <_raise_r+0x12>

08008cc4 <raise>:
 8008cc4:	4b02      	ldr	r3, [pc, #8]	; (8008cd0 <raise+0xc>)
 8008cc6:	4601      	mov	r1, r0
 8008cc8:	6818      	ldr	r0, [r3, #0]
 8008cca:	f7ff bfd3 	b.w	8008c74 <_raise_r>
 8008cce:	bf00      	nop
 8008cd0:	20000010 	.word	0x20000010

08008cd4 <_kill_r>:
 8008cd4:	b538      	push	{r3, r4, r5, lr}
 8008cd6:	4d07      	ldr	r5, [pc, #28]	; (8008cf4 <_kill_r+0x20>)
 8008cd8:	2300      	movs	r3, #0
 8008cda:	4604      	mov	r4, r0
 8008cdc:	4608      	mov	r0, r1
 8008cde:	4611      	mov	r1, r2
 8008ce0:	602b      	str	r3, [r5, #0]
 8008ce2:	f7f9 f9cd 	bl	8002080 <_kill>
 8008ce6:	1c43      	adds	r3, r0, #1
 8008ce8:	d102      	bne.n	8008cf0 <_kill_r+0x1c>
 8008cea:	682b      	ldr	r3, [r5, #0]
 8008cec:	b103      	cbz	r3, 8008cf0 <_kill_r+0x1c>
 8008cee:	6023      	str	r3, [r4, #0]
 8008cf0:	bd38      	pop	{r3, r4, r5, pc}
 8008cf2:	bf00      	nop
 8008cf4:	20001484 	.word	0x20001484

08008cf8 <_getpid_r>:
 8008cf8:	f7f9 b9ba 	b.w	8002070 <_getpid>

08008cfc <sniprintf>:
 8008cfc:	b40c      	push	{r2, r3}
 8008cfe:	b530      	push	{r4, r5, lr}
 8008d00:	4b17      	ldr	r3, [pc, #92]	; (8008d60 <sniprintf+0x64>)
 8008d02:	1e0c      	subs	r4, r1, #0
 8008d04:	681d      	ldr	r5, [r3, #0]
 8008d06:	b09d      	sub	sp, #116	; 0x74
 8008d08:	da08      	bge.n	8008d1c <sniprintf+0x20>
 8008d0a:	238b      	movs	r3, #139	; 0x8b
 8008d0c:	602b      	str	r3, [r5, #0]
 8008d0e:	f04f 30ff 	mov.w	r0, #4294967295
 8008d12:	b01d      	add	sp, #116	; 0x74
 8008d14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d18:	b002      	add	sp, #8
 8008d1a:	4770      	bx	lr
 8008d1c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008d20:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008d24:	bf14      	ite	ne
 8008d26:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008d2a:	4623      	moveq	r3, r4
 8008d2c:	9304      	str	r3, [sp, #16]
 8008d2e:	9307      	str	r3, [sp, #28]
 8008d30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008d34:	9002      	str	r0, [sp, #8]
 8008d36:	9006      	str	r0, [sp, #24]
 8008d38:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008d3c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008d3e:	ab21      	add	r3, sp, #132	; 0x84
 8008d40:	a902      	add	r1, sp, #8
 8008d42:	4628      	mov	r0, r5
 8008d44:	9301      	str	r3, [sp, #4]
 8008d46:	f000 f8af 	bl	8008ea8 <_svfiprintf_r>
 8008d4a:	1c43      	adds	r3, r0, #1
 8008d4c:	bfbc      	itt	lt
 8008d4e:	238b      	movlt	r3, #139	; 0x8b
 8008d50:	602b      	strlt	r3, [r5, #0]
 8008d52:	2c00      	cmp	r4, #0
 8008d54:	d0dd      	beq.n	8008d12 <sniprintf+0x16>
 8008d56:	9b02      	ldr	r3, [sp, #8]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	701a      	strb	r2, [r3, #0]
 8008d5c:	e7d9      	b.n	8008d12 <sniprintf+0x16>
 8008d5e:	bf00      	nop
 8008d60:	20000010 	.word	0x20000010

08008d64 <_vsniprintf_r>:
 8008d64:	b530      	push	{r4, r5, lr}
 8008d66:	4614      	mov	r4, r2
 8008d68:	2c00      	cmp	r4, #0
 8008d6a:	b09b      	sub	sp, #108	; 0x6c
 8008d6c:	4605      	mov	r5, r0
 8008d6e:	461a      	mov	r2, r3
 8008d70:	da05      	bge.n	8008d7e <_vsniprintf_r+0x1a>
 8008d72:	238b      	movs	r3, #139	; 0x8b
 8008d74:	6003      	str	r3, [r0, #0]
 8008d76:	f04f 30ff 	mov.w	r0, #4294967295
 8008d7a:	b01b      	add	sp, #108	; 0x6c
 8008d7c:	bd30      	pop	{r4, r5, pc}
 8008d7e:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008d82:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008d86:	bf14      	ite	ne
 8008d88:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008d8c:	4623      	moveq	r3, r4
 8008d8e:	9302      	str	r3, [sp, #8]
 8008d90:	9305      	str	r3, [sp, #20]
 8008d92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008d96:	9100      	str	r1, [sp, #0]
 8008d98:	9104      	str	r1, [sp, #16]
 8008d9a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008d9e:	4669      	mov	r1, sp
 8008da0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008da2:	f000 f881 	bl	8008ea8 <_svfiprintf_r>
 8008da6:	1c43      	adds	r3, r0, #1
 8008da8:	bfbc      	itt	lt
 8008daa:	238b      	movlt	r3, #139	; 0x8b
 8008dac:	602b      	strlt	r3, [r5, #0]
 8008dae:	2c00      	cmp	r4, #0
 8008db0:	d0e3      	beq.n	8008d7a <_vsniprintf_r+0x16>
 8008db2:	9b00      	ldr	r3, [sp, #0]
 8008db4:	2200      	movs	r2, #0
 8008db6:	701a      	strb	r2, [r3, #0]
 8008db8:	e7df      	b.n	8008d7a <_vsniprintf_r+0x16>
	...

08008dbc <vsniprintf>:
 8008dbc:	b507      	push	{r0, r1, r2, lr}
 8008dbe:	9300      	str	r3, [sp, #0]
 8008dc0:	4613      	mov	r3, r2
 8008dc2:	460a      	mov	r2, r1
 8008dc4:	4601      	mov	r1, r0
 8008dc6:	4803      	ldr	r0, [pc, #12]	; (8008dd4 <vsniprintf+0x18>)
 8008dc8:	6800      	ldr	r0, [r0, #0]
 8008dca:	f7ff ffcb 	bl	8008d64 <_vsniprintf_r>
 8008dce:	b003      	add	sp, #12
 8008dd0:	f85d fb04 	ldr.w	pc, [sp], #4
 8008dd4:	20000010 	.word	0x20000010

08008dd8 <__malloc_lock>:
 8008dd8:	4801      	ldr	r0, [pc, #4]	; (8008de0 <__malloc_lock+0x8>)
 8008dda:	f7ff bdd1 	b.w	8008980 <__retarget_lock_acquire_recursive>
 8008dde:	bf00      	nop
 8008de0:	20001478 	.word	0x20001478

08008de4 <__malloc_unlock>:
 8008de4:	4801      	ldr	r0, [pc, #4]	; (8008dec <__malloc_unlock+0x8>)
 8008de6:	f7ff bdcc 	b.w	8008982 <__retarget_lock_release_recursive>
 8008dea:	bf00      	nop
 8008dec:	20001478 	.word	0x20001478

08008df0 <__ssputs_r>:
 8008df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008df4:	688e      	ldr	r6, [r1, #8]
 8008df6:	429e      	cmp	r6, r3
 8008df8:	4682      	mov	sl, r0
 8008dfa:	460c      	mov	r4, r1
 8008dfc:	4690      	mov	r8, r2
 8008dfe:	461f      	mov	r7, r3
 8008e00:	d838      	bhi.n	8008e74 <__ssputs_r+0x84>
 8008e02:	898a      	ldrh	r2, [r1, #12]
 8008e04:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008e08:	d032      	beq.n	8008e70 <__ssputs_r+0x80>
 8008e0a:	6825      	ldr	r5, [r4, #0]
 8008e0c:	6909      	ldr	r1, [r1, #16]
 8008e0e:	eba5 0901 	sub.w	r9, r5, r1
 8008e12:	6965      	ldr	r5, [r4, #20]
 8008e14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e18:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008e1c:	3301      	adds	r3, #1
 8008e1e:	444b      	add	r3, r9
 8008e20:	106d      	asrs	r5, r5, #1
 8008e22:	429d      	cmp	r5, r3
 8008e24:	bf38      	it	cc
 8008e26:	461d      	movcc	r5, r3
 8008e28:	0553      	lsls	r3, r2, #21
 8008e2a:	d531      	bpl.n	8008e90 <__ssputs_r+0xa0>
 8008e2c:	4629      	mov	r1, r5
 8008e2e:	f7ff fe33 	bl	8008a98 <_malloc_r>
 8008e32:	4606      	mov	r6, r0
 8008e34:	b950      	cbnz	r0, 8008e4c <__ssputs_r+0x5c>
 8008e36:	230c      	movs	r3, #12
 8008e38:	f8ca 3000 	str.w	r3, [sl]
 8008e3c:	89a3      	ldrh	r3, [r4, #12]
 8008e3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e42:	81a3      	strh	r3, [r4, #12]
 8008e44:	f04f 30ff 	mov.w	r0, #4294967295
 8008e48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e4c:	6921      	ldr	r1, [r4, #16]
 8008e4e:	464a      	mov	r2, r9
 8008e50:	f7ff fda0 	bl	8008994 <memcpy>
 8008e54:	89a3      	ldrh	r3, [r4, #12]
 8008e56:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008e5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e5e:	81a3      	strh	r3, [r4, #12]
 8008e60:	6126      	str	r6, [r4, #16]
 8008e62:	6165      	str	r5, [r4, #20]
 8008e64:	444e      	add	r6, r9
 8008e66:	eba5 0509 	sub.w	r5, r5, r9
 8008e6a:	6026      	str	r6, [r4, #0]
 8008e6c:	60a5      	str	r5, [r4, #8]
 8008e6e:	463e      	mov	r6, r7
 8008e70:	42be      	cmp	r6, r7
 8008e72:	d900      	bls.n	8008e76 <__ssputs_r+0x86>
 8008e74:	463e      	mov	r6, r7
 8008e76:	6820      	ldr	r0, [r4, #0]
 8008e78:	4632      	mov	r2, r6
 8008e7a:	4641      	mov	r1, r8
 8008e7c:	f000 faa8 	bl	80093d0 <memmove>
 8008e80:	68a3      	ldr	r3, [r4, #8]
 8008e82:	1b9b      	subs	r3, r3, r6
 8008e84:	60a3      	str	r3, [r4, #8]
 8008e86:	6823      	ldr	r3, [r4, #0]
 8008e88:	4433      	add	r3, r6
 8008e8a:	6023      	str	r3, [r4, #0]
 8008e8c:	2000      	movs	r0, #0
 8008e8e:	e7db      	b.n	8008e48 <__ssputs_r+0x58>
 8008e90:	462a      	mov	r2, r5
 8008e92:	f000 fab7 	bl	8009404 <_realloc_r>
 8008e96:	4606      	mov	r6, r0
 8008e98:	2800      	cmp	r0, #0
 8008e9a:	d1e1      	bne.n	8008e60 <__ssputs_r+0x70>
 8008e9c:	6921      	ldr	r1, [r4, #16]
 8008e9e:	4650      	mov	r0, sl
 8008ea0:	f7ff fd8e 	bl	80089c0 <_free_r>
 8008ea4:	e7c7      	b.n	8008e36 <__ssputs_r+0x46>
	...

08008ea8 <_svfiprintf_r>:
 8008ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eac:	4698      	mov	r8, r3
 8008eae:	898b      	ldrh	r3, [r1, #12]
 8008eb0:	061b      	lsls	r3, r3, #24
 8008eb2:	b09d      	sub	sp, #116	; 0x74
 8008eb4:	4607      	mov	r7, r0
 8008eb6:	460d      	mov	r5, r1
 8008eb8:	4614      	mov	r4, r2
 8008eba:	d50e      	bpl.n	8008eda <_svfiprintf_r+0x32>
 8008ebc:	690b      	ldr	r3, [r1, #16]
 8008ebe:	b963      	cbnz	r3, 8008eda <_svfiprintf_r+0x32>
 8008ec0:	2140      	movs	r1, #64	; 0x40
 8008ec2:	f7ff fde9 	bl	8008a98 <_malloc_r>
 8008ec6:	6028      	str	r0, [r5, #0]
 8008ec8:	6128      	str	r0, [r5, #16]
 8008eca:	b920      	cbnz	r0, 8008ed6 <_svfiprintf_r+0x2e>
 8008ecc:	230c      	movs	r3, #12
 8008ece:	603b      	str	r3, [r7, #0]
 8008ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ed4:	e0d1      	b.n	800907a <_svfiprintf_r+0x1d2>
 8008ed6:	2340      	movs	r3, #64	; 0x40
 8008ed8:	616b      	str	r3, [r5, #20]
 8008eda:	2300      	movs	r3, #0
 8008edc:	9309      	str	r3, [sp, #36]	; 0x24
 8008ede:	2320      	movs	r3, #32
 8008ee0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ee4:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ee8:	2330      	movs	r3, #48	; 0x30
 8008eea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009094 <_svfiprintf_r+0x1ec>
 8008eee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ef2:	f04f 0901 	mov.w	r9, #1
 8008ef6:	4623      	mov	r3, r4
 8008ef8:	469a      	mov	sl, r3
 8008efa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008efe:	b10a      	cbz	r2, 8008f04 <_svfiprintf_r+0x5c>
 8008f00:	2a25      	cmp	r2, #37	; 0x25
 8008f02:	d1f9      	bne.n	8008ef8 <_svfiprintf_r+0x50>
 8008f04:	ebba 0b04 	subs.w	fp, sl, r4
 8008f08:	d00b      	beq.n	8008f22 <_svfiprintf_r+0x7a>
 8008f0a:	465b      	mov	r3, fp
 8008f0c:	4622      	mov	r2, r4
 8008f0e:	4629      	mov	r1, r5
 8008f10:	4638      	mov	r0, r7
 8008f12:	f7ff ff6d 	bl	8008df0 <__ssputs_r>
 8008f16:	3001      	adds	r0, #1
 8008f18:	f000 80aa 	beq.w	8009070 <_svfiprintf_r+0x1c8>
 8008f1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f1e:	445a      	add	r2, fp
 8008f20:	9209      	str	r2, [sp, #36]	; 0x24
 8008f22:	f89a 3000 	ldrb.w	r3, [sl]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	f000 80a2 	beq.w	8009070 <_svfiprintf_r+0x1c8>
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	f04f 32ff 	mov.w	r2, #4294967295
 8008f32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f36:	f10a 0a01 	add.w	sl, sl, #1
 8008f3a:	9304      	str	r3, [sp, #16]
 8008f3c:	9307      	str	r3, [sp, #28]
 8008f3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f42:	931a      	str	r3, [sp, #104]	; 0x68
 8008f44:	4654      	mov	r4, sl
 8008f46:	2205      	movs	r2, #5
 8008f48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f4c:	4851      	ldr	r0, [pc, #324]	; (8009094 <_svfiprintf_r+0x1ec>)
 8008f4e:	f7f7 f957 	bl	8000200 <memchr>
 8008f52:	9a04      	ldr	r2, [sp, #16]
 8008f54:	b9d8      	cbnz	r0, 8008f8e <_svfiprintf_r+0xe6>
 8008f56:	06d0      	lsls	r0, r2, #27
 8008f58:	bf44      	itt	mi
 8008f5a:	2320      	movmi	r3, #32
 8008f5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f60:	0711      	lsls	r1, r2, #28
 8008f62:	bf44      	itt	mi
 8008f64:	232b      	movmi	r3, #43	; 0x2b
 8008f66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f6a:	f89a 3000 	ldrb.w	r3, [sl]
 8008f6e:	2b2a      	cmp	r3, #42	; 0x2a
 8008f70:	d015      	beq.n	8008f9e <_svfiprintf_r+0xf6>
 8008f72:	9a07      	ldr	r2, [sp, #28]
 8008f74:	4654      	mov	r4, sl
 8008f76:	2000      	movs	r0, #0
 8008f78:	f04f 0c0a 	mov.w	ip, #10
 8008f7c:	4621      	mov	r1, r4
 8008f7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f82:	3b30      	subs	r3, #48	; 0x30
 8008f84:	2b09      	cmp	r3, #9
 8008f86:	d94e      	bls.n	8009026 <_svfiprintf_r+0x17e>
 8008f88:	b1b0      	cbz	r0, 8008fb8 <_svfiprintf_r+0x110>
 8008f8a:	9207      	str	r2, [sp, #28]
 8008f8c:	e014      	b.n	8008fb8 <_svfiprintf_r+0x110>
 8008f8e:	eba0 0308 	sub.w	r3, r0, r8
 8008f92:	fa09 f303 	lsl.w	r3, r9, r3
 8008f96:	4313      	orrs	r3, r2
 8008f98:	9304      	str	r3, [sp, #16]
 8008f9a:	46a2      	mov	sl, r4
 8008f9c:	e7d2      	b.n	8008f44 <_svfiprintf_r+0x9c>
 8008f9e:	9b03      	ldr	r3, [sp, #12]
 8008fa0:	1d19      	adds	r1, r3, #4
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	9103      	str	r1, [sp, #12]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	bfbb      	ittet	lt
 8008faa:	425b      	neglt	r3, r3
 8008fac:	f042 0202 	orrlt.w	r2, r2, #2
 8008fb0:	9307      	strge	r3, [sp, #28]
 8008fb2:	9307      	strlt	r3, [sp, #28]
 8008fb4:	bfb8      	it	lt
 8008fb6:	9204      	strlt	r2, [sp, #16]
 8008fb8:	7823      	ldrb	r3, [r4, #0]
 8008fba:	2b2e      	cmp	r3, #46	; 0x2e
 8008fbc:	d10c      	bne.n	8008fd8 <_svfiprintf_r+0x130>
 8008fbe:	7863      	ldrb	r3, [r4, #1]
 8008fc0:	2b2a      	cmp	r3, #42	; 0x2a
 8008fc2:	d135      	bne.n	8009030 <_svfiprintf_r+0x188>
 8008fc4:	9b03      	ldr	r3, [sp, #12]
 8008fc6:	1d1a      	adds	r2, r3, #4
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	9203      	str	r2, [sp, #12]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	bfb8      	it	lt
 8008fd0:	f04f 33ff 	movlt.w	r3, #4294967295
 8008fd4:	3402      	adds	r4, #2
 8008fd6:	9305      	str	r3, [sp, #20]
 8008fd8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80090a4 <_svfiprintf_r+0x1fc>
 8008fdc:	7821      	ldrb	r1, [r4, #0]
 8008fde:	2203      	movs	r2, #3
 8008fe0:	4650      	mov	r0, sl
 8008fe2:	f7f7 f90d 	bl	8000200 <memchr>
 8008fe6:	b140      	cbz	r0, 8008ffa <_svfiprintf_r+0x152>
 8008fe8:	2340      	movs	r3, #64	; 0x40
 8008fea:	eba0 000a 	sub.w	r0, r0, sl
 8008fee:	fa03 f000 	lsl.w	r0, r3, r0
 8008ff2:	9b04      	ldr	r3, [sp, #16]
 8008ff4:	4303      	orrs	r3, r0
 8008ff6:	3401      	adds	r4, #1
 8008ff8:	9304      	str	r3, [sp, #16]
 8008ffa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ffe:	4826      	ldr	r0, [pc, #152]	; (8009098 <_svfiprintf_r+0x1f0>)
 8009000:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009004:	2206      	movs	r2, #6
 8009006:	f7f7 f8fb 	bl	8000200 <memchr>
 800900a:	2800      	cmp	r0, #0
 800900c:	d038      	beq.n	8009080 <_svfiprintf_r+0x1d8>
 800900e:	4b23      	ldr	r3, [pc, #140]	; (800909c <_svfiprintf_r+0x1f4>)
 8009010:	bb1b      	cbnz	r3, 800905a <_svfiprintf_r+0x1b2>
 8009012:	9b03      	ldr	r3, [sp, #12]
 8009014:	3307      	adds	r3, #7
 8009016:	f023 0307 	bic.w	r3, r3, #7
 800901a:	3308      	adds	r3, #8
 800901c:	9303      	str	r3, [sp, #12]
 800901e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009020:	4433      	add	r3, r6
 8009022:	9309      	str	r3, [sp, #36]	; 0x24
 8009024:	e767      	b.n	8008ef6 <_svfiprintf_r+0x4e>
 8009026:	fb0c 3202 	mla	r2, ip, r2, r3
 800902a:	460c      	mov	r4, r1
 800902c:	2001      	movs	r0, #1
 800902e:	e7a5      	b.n	8008f7c <_svfiprintf_r+0xd4>
 8009030:	2300      	movs	r3, #0
 8009032:	3401      	adds	r4, #1
 8009034:	9305      	str	r3, [sp, #20]
 8009036:	4619      	mov	r1, r3
 8009038:	f04f 0c0a 	mov.w	ip, #10
 800903c:	4620      	mov	r0, r4
 800903e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009042:	3a30      	subs	r2, #48	; 0x30
 8009044:	2a09      	cmp	r2, #9
 8009046:	d903      	bls.n	8009050 <_svfiprintf_r+0x1a8>
 8009048:	2b00      	cmp	r3, #0
 800904a:	d0c5      	beq.n	8008fd8 <_svfiprintf_r+0x130>
 800904c:	9105      	str	r1, [sp, #20]
 800904e:	e7c3      	b.n	8008fd8 <_svfiprintf_r+0x130>
 8009050:	fb0c 2101 	mla	r1, ip, r1, r2
 8009054:	4604      	mov	r4, r0
 8009056:	2301      	movs	r3, #1
 8009058:	e7f0      	b.n	800903c <_svfiprintf_r+0x194>
 800905a:	ab03      	add	r3, sp, #12
 800905c:	9300      	str	r3, [sp, #0]
 800905e:	462a      	mov	r2, r5
 8009060:	4b0f      	ldr	r3, [pc, #60]	; (80090a0 <_svfiprintf_r+0x1f8>)
 8009062:	a904      	add	r1, sp, #16
 8009064:	4638      	mov	r0, r7
 8009066:	f3af 8000 	nop.w
 800906a:	1c42      	adds	r2, r0, #1
 800906c:	4606      	mov	r6, r0
 800906e:	d1d6      	bne.n	800901e <_svfiprintf_r+0x176>
 8009070:	89ab      	ldrh	r3, [r5, #12]
 8009072:	065b      	lsls	r3, r3, #25
 8009074:	f53f af2c 	bmi.w	8008ed0 <_svfiprintf_r+0x28>
 8009078:	9809      	ldr	r0, [sp, #36]	; 0x24
 800907a:	b01d      	add	sp, #116	; 0x74
 800907c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009080:	ab03      	add	r3, sp, #12
 8009082:	9300      	str	r3, [sp, #0]
 8009084:	462a      	mov	r2, r5
 8009086:	4b06      	ldr	r3, [pc, #24]	; (80090a0 <_svfiprintf_r+0x1f8>)
 8009088:	a904      	add	r1, sp, #16
 800908a:	4638      	mov	r0, r7
 800908c:	f000 f87a 	bl	8009184 <_printf_i>
 8009090:	e7eb      	b.n	800906a <_svfiprintf_r+0x1c2>
 8009092:	bf00      	nop
 8009094:	08009b50 	.word	0x08009b50
 8009098:	08009b5a 	.word	0x08009b5a
 800909c:	00000000 	.word	0x00000000
 80090a0:	08008df1 	.word	0x08008df1
 80090a4:	08009b56 	.word	0x08009b56

080090a8 <_printf_common>:
 80090a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090ac:	4616      	mov	r6, r2
 80090ae:	4699      	mov	r9, r3
 80090b0:	688a      	ldr	r2, [r1, #8]
 80090b2:	690b      	ldr	r3, [r1, #16]
 80090b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80090b8:	4293      	cmp	r3, r2
 80090ba:	bfb8      	it	lt
 80090bc:	4613      	movlt	r3, r2
 80090be:	6033      	str	r3, [r6, #0]
 80090c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80090c4:	4607      	mov	r7, r0
 80090c6:	460c      	mov	r4, r1
 80090c8:	b10a      	cbz	r2, 80090ce <_printf_common+0x26>
 80090ca:	3301      	adds	r3, #1
 80090cc:	6033      	str	r3, [r6, #0]
 80090ce:	6823      	ldr	r3, [r4, #0]
 80090d0:	0699      	lsls	r1, r3, #26
 80090d2:	bf42      	ittt	mi
 80090d4:	6833      	ldrmi	r3, [r6, #0]
 80090d6:	3302      	addmi	r3, #2
 80090d8:	6033      	strmi	r3, [r6, #0]
 80090da:	6825      	ldr	r5, [r4, #0]
 80090dc:	f015 0506 	ands.w	r5, r5, #6
 80090e0:	d106      	bne.n	80090f0 <_printf_common+0x48>
 80090e2:	f104 0a19 	add.w	sl, r4, #25
 80090e6:	68e3      	ldr	r3, [r4, #12]
 80090e8:	6832      	ldr	r2, [r6, #0]
 80090ea:	1a9b      	subs	r3, r3, r2
 80090ec:	42ab      	cmp	r3, r5
 80090ee:	dc26      	bgt.n	800913e <_printf_common+0x96>
 80090f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80090f4:	1e13      	subs	r3, r2, #0
 80090f6:	6822      	ldr	r2, [r4, #0]
 80090f8:	bf18      	it	ne
 80090fa:	2301      	movne	r3, #1
 80090fc:	0692      	lsls	r2, r2, #26
 80090fe:	d42b      	bmi.n	8009158 <_printf_common+0xb0>
 8009100:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009104:	4649      	mov	r1, r9
 8009106:	4638      	mov	r0, r7
 8009108:	47c0      	blx	r8
 800910a:	3001      	adds	r0, #1
 800910c:	d01e      	beq.n	800914c <_printf_common+0xa4>
 800910e:	6823      	ldr	r3, [r4, #0]
 8009110:	68e5      	ldr	r5, [r4, #12]
 8009112:	6832      	ldr	r2, [r6, #0]
 8009114:	f003 0306 	and.w	r3, r3, #6
 8009118:	2b04      	cmp	r3, #4
 800911a:	bf08      	it	eq
 800911c:	1aad      	subeq	r5, r5, r2
 800911e:	68a3      	ldr	r3, [r4, #8]
 8009120:	6922      	ldr	r2, [r4, #16]
 8009122:	bf0c      	ite	eq
 8009124:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009128:	2500      	movne	r5, #0
 800912a:	4293      	cmp	r3, r2
 800912c:	bfc4      	itt	gt
 800912e:	1a9b      	subgt	r3, r3, r2
 8009130:	18ed      	addgt	r5, r5, r3
 8009132:	2600      	movs	r6, #0
 8009134:	341a      	adds	r4, #26
 8009136:	42b5      	cmp	r5, r6
 8009138:	d11a      	bne.n	8009170 <_printf_common+0xc8>
 800913a:	2000      	movs	r0, #0
 800913c:	e008      	b.n	8009150 <_printf_common+0xa8>
 800913e:	2301      	movs	r3, #1
 8009140:	4652      	mov	r2, sl
 8009142:	4649      	mov	r1, r9
 8009144:	4638      	mov	r0, r7
 8009146:	47c0      	blx	r8
 8009148:	3001      	adds	r0, #1
 800914a:	d103      	bne.n	8009154 <_printf_common+0xac>
 800914c:	f04f 30ff 	mov.w	r0, #4294967295
 8009150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009154:	3501      	adds	r5, #1
 8009156:	e7c6      	b.n	80090e6 <_printf_common+0x3e>
 8009158:	18e1      	adds	r1, r4, r3
 800915a:	1c5a      	adds	r2, r3, #1
 800915c:	2030      	movs	r0, #48	; 0x30
 800915e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009162:	4422      	add	r2, r4
 8009164:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009168:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800916c:	3302      	adds	r3, #2
 800916e:	e7c7      	b.n	8009100 <_printf_common+0x58>
 8009170:	2301      	movs	r3, #1
 8009172:	4622      	mov	r2, r4
 8009174:	4649      	mov	r1, r9
 8009176:	4638      	mov	r0, r7
 8009178:	47c0      	blx	r8
 800917a:	3001      	adds	r0, #1
 800917c:	d0e6      	beq.n	800914c <_printf_common+0xa4>
 800917e:	3601      	adds	r6, #1
 8009180:	e7d9      	b.n	8009136 <_printf_common+0x8e>
	...

08009184 <_printf_i>:
 8009184:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009188:	7e0f      	ldrb	r7, [r1, #24]
 800918a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800918c:	2f78      	cmp	r7, #120	; 0x78
 800918e:	4691      	mov	r9, r2
 8009190:	4680      	mov	r8, r0
 8009192:	460c      	mov	r4, r1
 8009194:	469a      	mov	sl, r3
 8009196:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800919a:	d807      	bhi.n	80091ac <_printf_i+0x28>
 800919c:	2f62      	cmp	r7, #98	; 0x62
 800919e:	d80a      	bhi.n	80091b6 <_printf_i+0x32>
 80091a0:	2f00      	cmp	r7, #0
 80091a2:	f000 80d8 	beq.w	8009356 <_printf_i+0x1d2>
 80091a6:	2f58      	cmp	r7, #88	; 0x58
 80091a8:	f000 80a3 	beq.w	80092f2 <_printf_i+0x16e>
 80091ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80091b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80091b4:	e03a      	b.n	800922c <_printf_i+0xa8>
 80091b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80091ba:	2b15      	cmp	r3, #21
 80091bc:	d8f6      	bhi.n	80091ac <_printf_i+0x28>
 80091be:	a101      	add	r1, pc, #4	; (adr r1, 80091c4 <_printf_i+0x40>)
 80091c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80091c4:	0800921d 	.word	0x0800921d
 80091c8:	08009231 	.word	0x08009231
 80091cc:	080091ad 	.word	0x080091ad
 80091d0:	080091ad 	.word	0x080091ad
 80091d4:	080091ad 	.word	0x080091ad
 80091d8:	080091ad 	.word	0x080091ad
 80091dc:	08009231 	.word	0x08009231
 80091e0:	080091ad 	.word	0x080091ad
 80091e4:	080091ad 	.word	0x080091ad
 80091e8:	080091ad 	.word	0x080091ad
 80091ec:	080091ad 	.word	0x080091ad
 80091f0:	0800933d 	.word	0x0800933d
 80091f4:	08009261 	.word	0x08009261
 80091f8:	0800931f 	.word	0x0800931f
 80091fc:	080091ad 	.word	0x080091ad
 8009200:	080091ad 	.word	0x080091ad
 8009204:	0800935f 	.word	0x0800935f
 8009208:	080091ad 	.word	0x080091ad
 800920c:	08009261 	.word	0x08009261
 8009210:	080091ad 	.word	0x080091ad
 8009214:	080091ad 	.word	0x080091ad
 8009218:	08009327 	.word	0x08009327
 800921c:	682b      	ldr	r3, [r5, #0]
 800921e:	1d1a      	adds	r2, r3, #4
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	602a      	str	r2, [r5, #0]
 8009224:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009228:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800922c:	2301      	movs	r3, #1
 800922e:	e0a3      	b.n	8009378 <_printf_i+0x1f4>
 8009230:	6820      	ldr	r0, [r4, #0]
 8009232:	6829      	ldr	r1, [r5, #0]
 8009234:	0606      	lsls	r6, r0, #24
 8009236:	f101 0304 	add.w	r3, r1, #4
 800923a:	d50a      	bpl.n	8009252 <_printf_i+0xce>
 800923c:	680e      	ldr	r6, [r1, #0]
 800923e:	602b      	str	r3, [r5, #0]
 8009240:	2e00      	cmp	r6, #0
 8009242:	da03      	bge.n	800924c <_printf_i+0xc8>
 8009244:	232d      	movs	r3, #45	; 0x2d
 8009246:	4276      	negs	r6, r6
 8009248:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800924c:	485e      	ldr	r0, [pc, #376]	; (80093c8 <_printf_i+0x244>)
 800924e:	230a      	movs	r3, #10
 8009250:	e019      	b.n	8009286 <_printf_i+0x102>
 8009252:	680e      	ldr	r6, [r1, #0]
 8009254:	602b      	str	r3, [r5, #0]
 8009256:	f010 0f40 	tst.w	r0, #64	; 0x40
 800925a:	bf18      	it	ne
 800925c:	b236      	sxthne	r6, r6
 800925e:	e7ef      	b.n	8009240 <_printf_i+0xbc>
 8009260:	682b      	ldr	r3, [r5, #0]
 8009262:	6820      	ldr	r0, [r4, #0]
 8009264:	1d19      	adds	r1, r3, #4
 8009266:	6029      	str	r1, [r5, #0]
 8009268:	0601      	lsls	r1, r0, #24
 800926a:	d501      	bpl.n	8009270 <_printf_i+0xec>
 800926c:	681e      	ldr	r6, [r3, #0]
 800926e:	e002      	b.n	8009276 <_printf_i+0xf2>
 8009270:	0646      	lsls	r6, r0, #25
 8009272:	d5fb      	bpl.n	800926c <_printf_i+0xe8>
 8009274:	881e      	ldrh	r6, [r3, #0]
 8009276:	4854      	ldr	r0, [pc, #336]	; (80093c8 <_printf_i+0x244>)
 8009278:	2f6f      	cmp	r7, #111	; 0x6f
 800927a:	bf0c      	ite	eq
 800927c:	2308      	moveq	r3, #8
 800927e:	230a      	movne	r3, #10
 8009280:	2100      	movs	r1, #0
 8009282:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009286:	6865      	ldr	r5, [r4, #4]
 8009288:	60a5      	str	r5, [r4, #8]
 800928a:	2d00      	cmp	r5, #0
 800928c:	bfa2      	ittt	ge
 800928e:	6821      	ldrge	r1, [r4, #0]
 8009290:	f021 0104 	bicge.w	r1, r1, #4
 8009294:	6021      	strge	r1, [r4, #0]
 8009296:	b90e      	cbnz	r6, 800929c <_printf_i+0x118>
 8009298:	2d00      	cmp	r5, #0
 800929a:	d04d      	beq.n	8009338 <_printf_i+0x1b4>
 800929c:	4615      	mov	r5, r2
 800929e:	fbb6 f1f3 	udiv	r1, r6, r3
 80092a2:	fb03 6711 	mls	r7, r3, r1, r6
 80092a6:	5dc7      	ldrb	r7, [r0, r7]
 80092a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80092ac:	4637      	mov	r7, r6
 80092ae:	42bb      	cmp	r3, r7
 80092b0:	460e      	mov	r6, r1
 80092b2:	d9f4      	bls.n	800929e <_printf_i+0x11a>
 80092b4:	2b08      	cmp	r3, #8
 80092b6:	d10b      	bne.n	80092d0 <_printf_i+0x14c>
 80092b8:	6823      	ldr	r3, [r4, #0]
 80092ba:	07de      	lsls	r6, r3, #31
 80092bc:	d508      	bpl.n	80092d0 <_printf_i+0x14c>
 80092be:	6923      	ldr	r3, [r4, #16]
 80092c0:	6861      	ldr	r1, [r4, #4]
 80092c2:	4299      	cmp	r1, r3
 80092c4:	bfde      	ittt	le
 80092c6:	2330      	movle	r3, #48	; 0x30
 80092c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80092cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80092d0:	1b52      	subs	r2, r2, r5
 80092d2:	6122      	str	r2, [r4, #16]
 80092d4:	f8cd a000 	str.w	sl, [sp]
 80092d8:	464b      	mov	r3, r9
 80092da:	aa03      	add	r2, sp, #12
 80092dc:	4621      	mov	r1, r4
 80092de:	4640      	mov	r0, r8
 80092e0:	f7ff fee2 	bl	80090a8 <_printf_common>
 80092e4:	3001      	adds	r0, #1
 80092e6:	d14c      	bne.n	8009382 <_printf_i+0x1fe>
 80092e8:	f04f 30ff 	mov.w	r0, #4294967295
 80092ec:	b004      	add	sp, #16
 80092ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092f2:	4835      	ldr	r0, [pc, #212]	; (80093c8 <_printf_i+0x244>)
 80092f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80092f8:	6829      	ldr	r1, [r5, #0]
 80092fa:	6823      	ldr	r3, [r4, #0]
 80092fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8009300:	6029      	str	r1, [r5, #0]
 8009302:	061d      	lsls	r5, r3, #24
 8009304:	d514      	bpl.n	8009330 <_printf_i+0x1ac>
 8009306:	07df      	lsls	r7, r3, #31
 8009308:	bf44      	itt	mi
 800930a:	f043 0320 	orrmi.w	r3, r3, #32
 800930e:	6023      	strmi	r3, [r4, #0]
 8009310:	b91e      	cbnz	r6, 800931a <_printf_i+0x196>
 8009312:	6823      	ldr	r3, [r4, #0]
 8009314:	f023 0320 	bic.w	r3, r3, #32
 8009318:	6023      	str	r3, [r4, #0]
 800931a:	2310      	movs	r3, #16
 800931c:	e7b0      	b.n	8009280 <_printf_i+0xfc>
 800931e:	6823      	ldr	r3, [r4, #0]
 8009320:	f043 0320 	orr.w	r3, r3, #32
 8009324:	6023      	str	r3, [r4, #0]
 8009326:	2378      	movs	r3, #120	; 0x78
 8009328:	4828      	ldr	r0, [pc, #160]	; (80093cc <_printf_i+0x248>)
 800932a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800932e:	e7e3      	b.n	80092f8 <_printf_i+0x174>
 8009330:	0659      	lsls	r1, r3, #25
 8009332:	bf48      	it	mi
 8009334:	b2b6      	uxthmi	r6, r6
 8009336:	e7e6      	b.n	8009306 <_printf_i+0x182>
 8009338:	4615      	mov	r5, r2
 800933a:	e7bb      	b.n	80092b4 <_printf_i+0x130>
 800933c:	682b      	ldr	r3, [r5, #0]
 800933e:	6826      	ldr	r6, [r4, #0]
 8009340:	6961      	ldr	r1, [r4, #20]
 8009342:	1d18      	adds	r0, r3, #4
 8009344:	6028      	str	r0, [r5, #0]
 8009346:	0635      	lsls	r5, r6, #24
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	d501      	bpl.n	8009350 <_printf_i+0x1cc>
 800934c:	6019      	str	r1, [r3, #0]
 800934e:	e002      	b.n	8009356 <_printf_i+0x1d2>
 8009350:	0670      	lsls	r0, r6, #25
 8009352:	d5fb      	bpl.n	800934c <_printf_i+0x1c8>
 8009354:	8019      	strh	r1, [r3, #0]
 8009356:	2300      	movs	r3, #0
 8009358:	6123      	str	r3, [r4, #16]
 800935a:	4615      	mov	r5, r2
 800935c:	e7ba      	b.n	80092d4 <_printf_i+0x150>
 800935e:	682b      	ldr	r3, [r5, #0]
 8009360:	1d1a      	adds	r2, r3, #4
 8009362:	602a      	str	r2, [r5, #0]
 8009364:	681d      	ldr	r5, [r3, #0]
 8009366:	6862      	ldr	r2, [r4, #4]
 8009368:	2100      	movs	r1, #0
 800936a:	4628      	mov	r0, r5
 800936c:	f7f6 ff48 	bl	8000200 <memchr>
 8009370:	b108      	cbz	r0, 8009376 <_printf_i+0x1f2>
 8009372:	1b40      	subs	r0, r0, r5
 8009374:	6060      	str	r0, [r4, #4]
 8009376:	6863      	ldr	r3, [r4, #4]
 8009378:	6123      	str	r3, [r4, #16]
 800937a:	2300      	movs	r3, #0
 800937c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009380:	e7a8      	b.n	80092d4 <_printf_i+0x150>
 8009382:	6923      	ldr	r3, [r4, #16]
 8009384:	462a      	mov	r2, r5
 8009386:	4649      	mov	r1, r9
 8009388:	4640      	mov	r0, r8
 800938a:	47d0      	blx	sl
 800938c:	3001      	adds	r0, #1
 800938e:	d0ab      	beq.n	80092e8 <_printf_i+0x164>
 8009390:	6823      	ldr	r3, [r4, #0]
 8009392:	079b      	lsls	r3, r3, #30
 8009394:	d413      	bmi.n	80093be <_printf_i+0x23a>
 8009396:	68e0      	ldr	r0, [r4, #12]
 8009398:	9b03      	ldr	r3, [sp, #12]
 800939a:	4298      	cmp	r0, r3
 800939c:	bfb8      	it	lt
 800939e:	4618      	movlt	r0, r3
 80093a0:	e7a4      	b.n	80092ec <_printf_i+0x168>
 80093a2:	2301      	movs	r3, #1
 80093a4:	4632      	mov	r2, r6
 80093a6:	4649      	mov	r1, r9
 80093a8:	4640      	mov	r0, r8
 80093aa:	47d0      	blx	sl
 80093ac:	3001      	adds	r0, #1
 80093ae:	d09b      	beq.n	80092e8 <_printf_i+0x164>
 80093b0:	3501      	adds	r5, #1
 80093b2:	68e3      	ldr	r3, [r4, #12]
 80093b4:	9903      	ldr	r1, [sp, #12]
 80093b6:	1a5b      	subs	r3, r3, r1
 80093b8:	42ab      	cmp	r3, r5
 80093ba:	dcf2      	bgt.n	80093a2 <_printf_i+0x21e>
 80093bc:	e7eb      	b.n	8009396 <_printf_i+0x212>
 80093be:	2500      	movs	r5, #0
 80093c0:	f104 0619 	add.w	r6, r4, #25
 80093c4:	e7f5      	b.n	80093b2 <_printf_i+0x22e>
 80093c6:	bf00      	nop
 80093c8:	08009b61 	.word	0x08009b61
 80093cc:	08009b72 	.word	0x08009b72

080093d0 <memmove>:
 80093d0:	4288      	cmp	r0, r1
 80093d2:	b510      	push	{r4, lr}
 80093d4:	eb01 0402 	add.w	r4, r1, r2
 80093d8:	d902      	bls.n	80093e0 <memmove+0x10>
 80093da:	4284      	cmp	r4, r0
 80093dc:	4623      	mov	r3, r4
 80093de:	d807      	bhi.n	80093f0 <memmove+0x20>
 80093e0:	1e43      	subs	r3, r0, #1
 80093e2:	42a1      	cmp	r1, r4
 80093e4:	d008      	beq.n	80093f8 <memmove+0x28>
 80093e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80093ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80093ee:	e7f8      	b.n	80093e2 <memmove+0x12>
 80093f0:	4402      	add	r2, r0
 80093f2:	4601      	mov	r1, r0
 80093f4:	428a      	cmp	r2, r1
 80093f6:	d100      	bne.n	80093fa <memmove+0x2a>
 80093f8:	bd10      	pop	{r4, pc}
 80093fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80093fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009402:	e7f7      	b.n	80093f4 <memmove+0x24>

08009404 <_realloc_r>:
 8009404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009408:	4680      	mov	r8, r0
 800940a:	4614      	mov	r4, r2
 800940c:	460e      	mov	r6, r1
 800940e:	b921      	cbnz	r1, 800941a <_realloc_r+0x16>
 8009410:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009414:	4611      	mov	r1, r2
 8009416:	f7ff bb3f 	b.w	8008a98 <_malloc_r>
 800941a:	b92a      	cbnz	r2, 8009428 <_realloc_r+0x24>
 800941c:	f7ff fad0 	bl	80089c0 <_free_r>
 8009420:	4625      	mov	r5, r4
 8009422:	4628      	mov	r0, r5
 8009424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009428:	f000 f81b 	bl	8009462 <_malloc_usable_size_r>
 800942c:	4284      	cmp	r4, r0
 800942e:	4607      	mov	r7, r0
 8009430:	d802      	bhi.n	8009438 <_realloc_r+0x34>
 8009432:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009436:	d812      	bhi.n	800945e <_realloc_r+0x5a>
 8009438:	4621      	mov	r1, r4
 800943a:	4640      	mov	r0, r8
 800943c:	f7ff fb2c 	bl	8008a98 <_malloc_r>
 8009440:	4605      	mov	r5, r0
 8009442:	2800      	cmp	r0, #0
 8009444:	d0ed      	beq.n	8009422 <_realloc_r+0x1e>
 8009446:	42bc      	cmp	r4, r7
 8009448:	4622      	mov	r2, r4
 800944a:	4631      	mov	r1, r6
 800944c:	bf28      	it	cs
 800944e:	463a      	movcs	r2, r7
 8009450:	f7ff faa0 	bl	8008994 <memcpy>
 8009454:	4631      	mov	r1, r6
 8009456:	4640      	mov	r0, r8
 8009458:	f7ff fab2 	bl	80089c0 <_free_r>
 800945c:	e7e1      	b.n	8009422 <_realloc_r+0x1e>
 800945e:	4635      	mov	r5, r6
 8009460:	e7df      	b.n	8009422 <_realloc_r+0x1e>

08009462 <_malloc_usable_size_r>:
 8009462:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009466:	1f18      	subs	r0, r3, #4
 8009468:	2b00      	cmp	r3, #0
 800946a:	bfbc      	itt	lt
 800946c:	580b      	ldrlt	r3, [r1, r0]
 800946e:	18c0      	addlt	r0, r0, r3
 8009470:	4770      	bx	lr
	...

08009474 <_init>:
 8009474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009476:	bf00      	nop
 8009478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800947a:	bc08      	pop	{r3}
 800947c:	469e      	mov	lr, r3
 800947e:	4770      	bx	lr

08009480 <_fini>:
 8009480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009482:	bf00      	nop
 8009484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009486:	bc08      	pop	{r3}
 8009488:	469e      	mov	lr, r3
 800948a:	4770      	bx	lr
