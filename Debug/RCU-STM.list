
RCU-STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000937c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000708  0800950c  0800950c  0001950c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c14  08009c14  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009c14  08009c14  00019c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c1c  08009c1c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009c1c  08009c1c  00019c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08009c24  08009c24  00019c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009c2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001414  20000074  08009ca0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001488  08009ca0  00021488  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000392ef  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006e3e  00000000  00000000  00059393  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fd0  00000000  00000000  000601d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d98  00000000  00000000  000621a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002caed  00000000  00000000  00063f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a98b  00000000  00000000  00090a2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4a99  00000000  00000000  000bb3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001afe51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008cd0  00000000  00000000  001afea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080094f4 	.word	0x080094f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080094f4 	.word	0x080094f4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <_ZNK7Command14GetDataPointerEv>:

	void Reset();	// Reset the command, equivalent of a destructor that must be called, counts allocations and deallocations, asserts an error if the allocation count is too high

	// Getters
	uint16_t GetDataSize() const;
	uint8_t* GetDataPointer() const { return data; }
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	685b      	ldr	r3, [r3, #4]
 80005b0:	4618      	mov	r0, r3
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr

080005bc <_ZNK7Command10GetCommandEv>:
	GLOBAL_COMMANDS GetCommand() const { return command; }
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	4618      	mov	r0, r3
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <_ZNK7Command14GetTaskCommandEv>:
	uint16_t GetTaskCommand() const { return taskCommand; }
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	885b      	ldrh	r3, [r3, #2]
 80005e0:	4618      	mov	r0, r3
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr

080005ec <_ZN8UARTTask4InstEv>:

/* Class ------------------------------------------------------------------*/
class UARTTask : public Task
{
public:
	static UARTTask& Inst() {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
		static UARTTask inst;
 80005f0:	4b10      	ldr	r3, [pc, #64]	; (8000634 <_ZN8UARTTask4InstEv+0x48>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	f3bf 8f5b 	dmb	ish
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	2b00      	cmp	r3, #0
 8000600:	bf0c      	ite	eq
 8000602:	2301      	moveq	r3, #1
 8000604:	2300      	movne	r3, #0
 8000606:	b2db      	uxtb	r3, r3
 8000608:	2b00      	cmp	r3, #0
 800060a:	d010      	beq.n	800062e <_ZN8UARTTask4InstEv+0x42>
 800060c:	4809      	ldr	r0, [pc, #36]	; (8000634 <_ZN8UARTTask4InstEv+0x48>)
 800060e:	f008 f99d 	bl	800894c <__cxa_guard_acquire>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	bf14      	ite	ne
 8000618:	2301      	movne	r3, #1
 800061a:	2300      	moveq	r3, #0
 800061c:	b2db      	uxtb	r3, r3
 800061e:	2b00      	cmp	r3, #0
 8000620:	d005      	beq.n	800062e <_ZN8UARTTask4InstEv+0x42>
 8000622:	4805      	ldr	r0, [pc, #20]	; (8000638 <_ZN8UARTTask4InstEv+0x4c>)
 8000624:	f000 f819 	bl	800065a <_ZN8UARTTaskC1Ev>
 8000628:	4802      	ldr	r0, [pc, #8]	; (8000634 <_ZN8UARTTask4InstEv+0x48>)
 800062a:	f008 f99b 	bl	8008964 <__cxa_guard_release>
		return inst;
 800062e:	4b02      	ldr	r3, [pc, #8]	; (8000638 <_ZN8UARTTask4InstEv+0x4c>)
	}
 8000630:	4618      	mov	r0, r3
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000098 	.word	0x20000098
 8000638:	20000090 	.word	0x20000090

0800063c <_ZN8UARTTask7RunTaskEPv>:

	void InitTask();

protected:
	static void RunTask(void* pvParams) { UARTTask::Inst().Run(pvParams); } // Static Task Interface, passes control to the instance Run();
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	f7ff ffd2 	bl	80005ec <_ZN8UARTTask4InstEv>
 8000648:	4603      	mov	r3, r0
 800064a:	6879      	ldr	r1, [r7, #4]
 800064c:	4618      	mov	r0, r3
 800064e:	f000 f845 	bl	80006dc <_ZN8UARTTask3RunEPv>
 8000652:	bf00      	nop
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}

0800065a <_ZN8UARTTaskC1Ev>:

	void ConfigureUART();
	void HandleCommand(Command& cm);

private:
	UARTTask() : Task(UART_TASK_QUEUE_DEPTH_OBJS) {}	// Private constructor
 800065a:	b580      	push	{r7, lr}
 800065c:	b082      	sub	sp, #8
 800065e:	af00      	add	r7, sp, #0
 8000660:	6078      	str	r0, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	210a      	movs	r1, #10
 8000666:	4618      	mov	r0, r3
 8000668:	f000 fab6 	bl	8000bd8 <_ZN4TaskC1Et>
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	4618      	mov	r0, r3
 8000670:	3708      	adds	r7, #8
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
	...

08000678 <_ZN8UARTTask8InitTaskEv>:

/**
 * @brief Initializes UART task with the RTOS scheduler
*/
void UARTTask::InitTask()
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b086      	sub	sp, #24
 800067c:	af02      	add	r7, sp, #8
 800067e:	6078      	str	r0, [r7, #4]
	// Make sure the task is not already initialized
	SOAR_ASSERT(rtTaskHandle == nullptr, "Cannot initialize UART task twice");
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d005      	beq.n	8000694 <_ZN8UARTTask8InitTaskEv+0x1c>
 8000688:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <_ZN8UARTTask8InitTaskEv+0x50>)
 800068a:	221a      	movs	r2, #26
 800068c:	490f      	ldr	r1, [pc, #60]	; (80006cc <_ZN8UARTTask8InitTaskEv+0x54>)
 800068e:	2000      	movs	r0, #0
 8000690:	f000 fdc8 	bl	8001224 <_Z17soar_assert_debugbPKctS0_z>
	
	// Start the task
	BaseType_t rtValue =
		xTaskCreate((TaskFunction_t)UARTTask::RunTask,
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	9301      	str	r3, [sp, #4]
 8000698:	2302      	movs	r3, #2
 800069a:	9300      	str	r3, [sp, #0]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006a2:	490b      	ldr	r1, [pc, #44]	; (80006d0 <_ZN8UARTTask8InitTaskEv+0x58>)
 80006a4:	480b      	ldr	r0, [pc, #44]	; (80006d4 <_ZN8UARTTask8InitTaskEv+0x5c>)
 80006a6:	f006 fd38 	bl	800711a <xTaskCreate>
 80006aa:	60f8      	str	r0, [r7, #12]
			(void*)this,
			(UBaseType_t)UART_TASK_RTOS_PRIORITY,
			(TaskHandle_t*)&rtTaskHandle);

	//Ensure creation succeded
	SOAR_ASSERT(rtValue == pdPASS, "UARTTask::InitTask() - xTaskCreate() failed");
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	d005      	beq.n	80006be <_ZN8UARTTask8InitTaskEv+0x46>
 80006b2:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <_ZN8UARTTask8InitTaskEv+0x60>)
 80006b4:	2226      	movs	r2, #38	; 0x26
 80006b6:	4905      	ldr	r1, [pc, #20]	; (80006cc <_ZN8UARTTask8InitTaskEv+0x54>)
 80006b8:	2000      	movs	r0, #0
 80006ba:	f000 fdb3 	bl	8001224 <_Z17soar_assert_debugbPKctS0_z>

	// Configure DMA
	 
}
 80006be:	bf00      	nop
 80006c0:	3710      	adds	r7, #16
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	0800950c 	.word	0x0800950c
 80006cc:	08009530 	.word	0x08009530
 80006d0:	0800955c 	.word	0x0800955c
 80006d4:	0800063d 	.word	0x0800063d
 80006d8:	08009568 	.word	0x08009568

080006dc <_ZN8UARTTask3RunEPv>:
/**
 * @brief Instance Run loop for the UART Task, runs on scheduler start as long as the task is initialized.
 * @param pvParams RTOS Passed void parameters, contains a pointer to the object instance, should not be used
*/
void UARTTask::Run(void * pvParams)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	6039      	str	r1, [r7, #0]
	//UART Task loop
	while(1) {
		Command cm;
 80006e6:	f107 030c 	add.w	r3, r7, #12
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 f887 	bl	80007fe <_ZN7CommandC1Ev>

		//Wait forever for a command
		qEvtQueue->ReceiveWait(cm);
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	685b      	ldr	r3, [r3, #4]
 80006f4:	f107 020c 	add.w	r2, r7, #12
 80006f8:	4611      	mov	r1, r2
 80006fa:	4618      	mov	r0, r3
 80006fc:	f000 fa50 	bl	8000ba0 <_ZN5Queue11ReceiveWaitER7Command>
		
		//Process the command
		HandleCommand(cm);
 8000700:	f107 030c 	add.w	r3, r7, #12
 8000704:	4619      	mov	r1, r3
 8000706:	6878      	ldr	r0, [r7, #4]
 8000708:	f000 f802 	bl	8000710 <_ZN8UARTTask13HandleCommandER7Command>
	}
 800070c:	e7eb      	b.n	80006e6 <_ZN8UARTTask3RunEPv+0xa>
	...

08000710 <_ZN8UARTTask13HandleCommandER7Command>:
 * @brief HandleCommand handles any command passed to the UART task primary event queue. Responsible for
 * 		  handling all commands, even if unsupported. (Unexpected commands must still be reset) 
 * @param cm Reference to the command object to handle
*/
void UARTTask::HandleCommand(Command& cm)
{
 8000710:	b590      	push	{r4, r7, lr}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	6039      	str	r1, [r7, #0]
	//Switch for the GLOBAL_COMMAND
	switch (cm.GetCommand()) {
 800071a:	6838      	ldr	r0, [r7, #0]
 800071c:	f7ff ff4e 	bl	80005bc <_ZNK7Command10GetCommandEv>
 8000720:	4603      	mov	r3, r0
 8000722:	2b01      	cmp	r3, #1
 8000724:	d02a      	beq.n	800077c <_ZN8UARTTask13HandleCommandER7Command+0x6c>
 8000726:	2b02      	cmp	r3, #2
 8000728:	d11f      	bne.n	800076a <_ZN8UARTTask13HandleCommandER7Command+0x5a>
	case DATA_COMMAND: {
		//Switch for task specific command within DATA_COMMAND
		switch (cm.GetTaskCommand()) {
 800072a:	6838      	ldr	r0, [r7, #0]
 800072c:	f7ff ff52 	bl	80005d4 <_ZNK7Command14GetTaskCommandEv>
 8000730:	4603      	mov	r3, r0
 8000732:	2b01      	cmp	r3, #1
 8000734:	d10f      	bne.n	8000756 <_ZN8UARTTask13HandleCommandER7Command+0x46>
		case UART_TASK_COMMAND_SEND_DEBUG:
			HAL_UART_Transmit(SystemHandles::UART_Debug, cm.GetDataPointer(), cm.GetDataSize(), DEBUG_SEND_MAX_TIME_MS);
 8000736:	6838      	ldr	r0, [r7, #0]
 8000738:	f7ff ff34 	bl	80005a4 <_ZNK7Command14GetDataPointerEv>
 800073c:	4604      	mov	r4, r0
 800073e:	6838      	ldr	r0, [r7, #0]
 8000740:	f000 f912 	bl	8000968 <_ZNK7Command11GetDataSizeEv>
 8000744:	4603      	mov	r3, r0
 8000746:	461a      	mov	r2, r3
 8000748:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800074c:	4621      	mov	r1, r4
 800074e:	480f      	ldr	r0, [pc, #60]	; (800078c <_ZN8UARTTask13HandleCommandER7Command+0x7c>)
 8000750:	f004 fe36 	bl	80053c0 <HAL_UART_Transmit>
			break;
 8000754:	e008      	b.n	8000768 <_ZN8UARTTask13HandleCommandER7Command+0x58>
		default:
			SOAR_PRINT("UARTTask - Received Unsupported DATA_COMMAND {%d}\n", cm.GetTaskCommand());
 8000756:	6838      	ldr	r0, [r7, #0]
 8000758:	f7ff ff3c 	bl	80005d4 <_ZNK7Command14GetTaskCommandEv>
 800075c:	4603      	mov	r3, r0
 800075e:	4619      	mov	r1, r3
 8000760:	480b      	ldr	r0, [pc, #44]	; (8000790 <_ZN8UARTTask13HandleCommandER7Command+0x80>)
 8000762:	f000 fcfd 	bl	8001160 <_Z5printPKcz>
			break;
 8000766:	bf00      	nop
		}
	}
	case TASK_SPECIFIC_COMMAND: {
		break;
 8000768:	e008      	b.n	800077c <_ZN8UARTTask13HandleCommandER7Command+0x6c>
	}
	default:
		SOAR_PRINT("UARTTask - Received Unsupported Command {%d}\n", cm.GetCommand());
 800076a:	6838      	ldr	r0, [r7, #0]
 800076c:	f7ff ff26 	bl	80005bc <_ZNK7Command10GetCommandEv>
 8000770:	4603      	mov	r3, r0
 8000772:	4619      	mov	r1, r3
 8000774:	4807      	ldr	r0, [pc, #28]	; (8000794 <_ZN8UARTTask13HandleCommandER7Command+0x84>)
 8000776:	f000 fcf3 	bl	8001160 <_Z5printPKcz>
		break;
 800077a:	e000      	b.n	800077e <_ZN8UARTTask13HandleCommandER7Command+0x6e>
		break;
 800077c:	bf00      	nop
	}

	//No matter what we happens, we must reset allocated data
	cm.Reset();
 800077e:	6838      	ldr	r0, [r7, #0]
 8000780:	f000 f8d6 	bl	8000930 <_ZN7Command5ResetEv>
}
 8000784:	bf00      	nop
 8000786:	370c      	adds	r7, #12
 8000788:	46bd      	mov	sp, r7
 800078a:	bd90      	pop	{r4, r7, pc}
 800078c:	200005ec 	.word	0x200005ec
 8000790:	08009594 	.word	0x08009594
 8000794:	080095c8 	.word	0x080095c8

08000798 <_ZStanSt12memory_orderSt23__memory_order_modifier>:
    return memory_order(int(__m) | int(__mod));
  }

  constexpr memory_order
  operator&(memory_order __m, __memory_order_modifier __mod)
  {
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	6039      	str	r1, [r7, #0]
    return memory_order(int(__m) & int(__mod));
 80007a2:	683a      	ldr	r2, [r7, #0]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	4013      	ands	r3, r2
  }
 80007a8:	4618      	mov	r0, r3
 80007aa:	370c      	adds	r7, #12
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr

080007b4 <_Z11soar_mallocm>:
/**
 * @brief Malloc inline function, wraps malloc for multi-platform support, asserts successful allocation
 * @param size Size of data to malloc in bytes
 * @return Returns the pointer to the allocated data
*/
inline uint8_t* soar_malloc(uint32_t size) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
#ifdef COMPUTER_ENVIRONMENT
	uint8_t* ret = (uint8_t*)malloc(size);
#else
	uint8_t* ret = (uint8_t*)pvPortMalloc(size);
 80007bc:	6878      	ldr	r0, [r7, #4]
 80007be:	f007 fec3 	bl	8008548 <pvPortMalloc>
 80007c2:	60f8      	str	r0, [r7, #12]
#endif
	
	SOAR_ASSERT(ret, "soar_malloc failed");
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d105      	bne.n	80007d6 <_Z11soar_mallocm+0x22>
 80007ca:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <_Z11soar_mallocm+0x2c>)
 80007cc:	226b      	movs	r2, #107	; 0x6b
 80007ce:	4905      	ldr	r1, [pc, #20]	; (80007e4 <_Z11soar_mallocm+0x30>)
 80007d0:	2000      	movs	r0, #0
 80007d2:	f000 fd27 	bl	8001224 <_Z17soar_assert_debugbPKctS0_z>
	return ret;
 80007d6:	68fb      	ldr	r3, [r7, #12]
}
 80007d8:	4618      	mov	r0, r3
 80007da:	3710      	adds	r7, #16
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	080095f8 	.word	0x080095f8
 80007e4:	0800960c 	.word	0x0800960c

080007e8 <_Z9soar_freePv>:

/**
 * @brief Free inline function, wraps free for multi-platform support
 * @param ptr Pointer to the data to free
 */
inline void soar_free(void* ptr) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
#ifdef COMPUTER_ENVIRONMENT
	free(ptr);
#else
	vPortFree(ptr);
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f007 ff75 	bl	80086e0 <vPortFree>
#endif
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <_ZN7CommandC1Ev>:
/* Function Implementation ------------------------------------------------------------------*/

/**
 * @brief Default constructor for Command
*/
Command::Command(void)
 80007fe:	b480      	push	{r7}
 8000800:	b083      	sub	sp, #12
 8000802:	af00      	add	r7, sp, #0
 8000804:	6078      	str	r0, [r7, #4]
{
    command = COMMAND_NONE;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	2200      	movs	r2, #0
 800080a:	701a      	strb	r2, [r3, #0]
    taskCommand = 0;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2200      	movs	r2, #0
 8000810:	805a      	strh	r2, [r3, #2]
    data = nullptr;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	2200      	movs	r2, #0
 8000816:	605a      	str	r2, [r3, #4]
    dataSize = 0;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2200      	movs	r2, #0
 800081c:	811a      	strh	r2, [r3, #8]
    bShouldFreeData = false;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2200      	movs	r2, #0
 8000822:	729a      	strb	r2, [r3, #10]
}
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	4618      	mov	r0, r3
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr

08000832 <_ZN7CommandC1E15GLOBAL_COMMANDSt>:
/**
 * @brief Constructor with GLOBAL_COMMANDS and taskCommand params
 * @param command GLOBAL_COMMANDS param to initiate command with
 * @param taskCommand taskCommand param to initiate command with
*/
Command::Command(GLOBAL_COMMANDS command, uint16_t taskCommand)
 8000832:	b480      	push	{r7}
 8000834:	b083      	sub	sp, #12
 8000836:	af00      	add	r7, sp, #0
 8000838:	6078      	str	r0, [r7, #4]
 800083a:	460b      	mov	r3, r1
 800083c:	70fb      	strb	r3, [r7, #3]
 800083e:	4613      	mov	r3, r2
 8000840:	803b      	strh	r3, [r7, #0]
{
    this->command = command;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	78fa      	ldrb	r2, [r7, #3]
 8000846:	701a      	strb	r2, [r3, #0]
    this->taskCommand = taskCommand;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	883a      	ldrh	r2, [r7, #0]
 800084c:	805a      	strh	r2, [r3, #2]
    data = nullptr;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	2200      	movs	r2, #0
 8000852:	605a      	str	r2, [r3, #4]
    dataSize = 0;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2200      	movs	r2, #0
 8000858:	811a      	strh	r2, [r3, #8]
    bShouldFreeData = false;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2200      	movs	r2, #0
 800085e:	729a      	strb	r2, [r3, #10]
}
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	4618      	mov	r0, r3
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
	...

08000870 <_ZN7Command12AllocateDataEt>:
 * @brief Dynamically allocates memory for the command with the given data size
 * @param dataSize Size of array to allocate
 * @return TRUE on success, FALSE on failure (mem already allocated)
*/
bool Command::AllocateData(uint16_t dataSize)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	460b      	mov	r3, r1
 800087a:	807b      	strh	r3, [r7, #2]
    // If we don't have anything allocated, allocate and return success
    if (this->data == nullptr && !bShouldFreeData) {
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	685b      	ldr	r3, [r3, #4]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d125      	bne.n	80008d0 <_ZN7Command12AllocateDataEt+0x60>
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	7a9b      	ldrb	r3, [r3, #10]
 8000888:	f083 0301 	eor.w	r3, r3, #1
 800088c:	b2db      	uxtb	r3, r3
 800088e:	2b00      	cmp	r3, #0
 8000890:	d01e      	beq.n	80008d0 <_ZN7Command12AllocateDataEt+0x60>
        this->data = soar_malloc(dataSize);
 8000892:	887b      	ldrh	r3, [r7, #2]
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff ff8d 	bl	80007b4 <_Z11soar_mallocm>
 800089a:	4602      	mov	r2, r0
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	605a      	str	r2, [r3, #4]
        this->bShouldFreeData = true;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	2201      	movs	r2, #1
 80008a4:	729a      	strb	r2, [r3, #10]
        this->dataSize = dataSize;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	887a      	ldrh	r2, [r7, #2]
 80008aa:	811a      	strh	r2, [r3, #8]
        statAllocationCounter += 1;
 80008ac:	2101      	movs	r1, #1
 80008ae:	480b      	ldr	r0, [pc, #44]	; (80008dc <_ZN7Command12AllocateDataEt+0x6c>)
 80008b0:	f000 f86c 	bl	800098c <_ZNSt13__atomic_baseItEpLEt>

        //TODO: May want to print out whenever we have an imbalance in statAllocationCounter by more than ~5 or so.
        SOAR_ASSERT(statAllocationCounter < MAX_NUMBER_OF_COMMAND_ALLOCATIONS);
 80008b4:	4809      	ldr	r0, [pc, #36]	; (80008dc <_ZN7Command12AllocateDataEt+0x6c>)
 80008b6:	f000 f883 	bl	80009c0 <_ZNKSt13__atomic_baseItEcvtEv>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b63      	cmp	r3, #99	; 0x63
 80008be:	d905      	bls.n	80008cc <_ZN7Command12AllocateDataEt+0x5c>
 80008c0:	2300      	movs	r3, #0
 80008c2:	2262      	movs	r2, #98	; 0x62
 80008c4:	4906      	ldr	r1, [pc, #24]	; (80008e0 <_ZN7Command12AllocateDataEt+0x70>)
 80008c6:	2000      	movs	r0, #0
 80008c8:	f000 fcac 	bl	8001224 <_Z17soar_assert_debugbPKctS0_z>
        return true;
 80008cc:	2301      	movs	r3, #1
 80008ce:	e000      	b.n	80008d2 <_ZN7Command12AllocateDataEt+0x62>
    }
    return false;
 80008d0:	2300      	movs	r3, #0
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	2000009c 	.word	0x2000009c
 80008e0:	08009658 	.word	0x08009658

080008e4 <_ZN7Command17CopyDataToCommandEPht>:

/**
 * @brief Copies data from the source array into memory owned by Command and sets the internal data pointer to the new array
 */
bool Command::CopyDataToCommand(uint8_t* dataSrc, uint16_t size)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	60b9      	str	r1, [r7, #8]
 80008ee:	4613      	mov	r3, r2
 80008f0:	80fb      	strh	r3, [r7, #6]
	// If we successfully allocate, copy the data and return success
    if(this->AllocateData(size)
 80008f2:	88fb      	ldrh	r3, [r7, #6]
 80008f4:	4619      	mov	r1, r3
 80008f6:	68f8      	ldr	r0, [r7, #12]
 80008f8:	f7ff ffba 	bl	8000870 <_ZN7Command12AllocateDataEt>
 80008fc:	4603      	mov	r3, r0
		&& this->data != nullptr) {
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d005      	beq.n	800090e <_ZN7Command17CopyDataToCommandEPht+0x2a>
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <_ZN7Command17CopyDataToCommandEPht+0x2a>
 800090a:	2301      	movs	r3, #1
 800090c:	e000      	b.n	8000910 <_ZN7Command17CopyDataToCommandEPht+0x2c>
 800090e:	2300      	movs	r3, #0
    if(this->AllocateData(size)
 8000910:	2b00      	cmp	r3, #0
 8000912:	d008      	beq.n	8000926 <_ZN7Command17CopyDataToCommandEPht+0x42>
		memcpy(this->data, dataSrc, size);
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	88fa      	ldrh	r2, [r7, #6]
 800091a:	68b9      	ldr	r1, [r7, #8]
 800091c:	4618      	mov	r0, r3
 800091e:	f008 f879 	bl	8008a14 <memcpy>
		return true;
 8000922:	2301      	movs	r3, #1
 8000924:	e000      	b.n	8000928 <_ZN7Command17CopyDataToCommandEPht+0x44>
	}

	return false;
 8000926:	2300      	movs	r3, #0
}
 8000928:	4618      	mov	r0, r3
 800092a:	3710      	adds	r7, #16
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}

08000930 <_ZN7Command5ResetEv>:

/**
 * @brief Resets command, equivalent of a destructor that must be called, counts allocations and deallocations, asserts an error if the allocation count is too high
*/
void Command::Reset()
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
    if(bShouldFreeData && data != nullptr) {
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	7a9b      	ldrb	r3, [r3, #10]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d00c      	beq.n	800095a <_ZN7Command5ResetEv+0x2a>
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d008      	beq.n	800095a <_ZN7Command5ResetEv+0x2a>
        soar_free(data);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff ff4b 	bl	80007e8 <_Z9soar_freePv>
        statAllocationCounter -= 1;
 8000952:	2101      	movs	r1, #1
 8000954:	4803      	ldr	r0, [pc, #12]	; (8000964 <_ZN7Command5ResetEv+0x34>)
 8000956:	f000 f84d 	bl	80009f4 <_ZNSt13__atomic_baseItEmIEt>
    }
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	2000009c 	.word	0x2000009c

08000968 <_ZNK7Command11GetDataSizeEv>:
/**
 * @brief Getter for Data size
 * @return data size if data is allocated, otherwise returns 0 
*/
uint16_t Command::GetDataSize() const
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
    if (data == nullptr)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d101      	bne.n	800097c <_ZNK7Command11GetDataSizeEv+0x14>
        return 0;
 8000978:	2300      	movs	r3, #0
 800097a:	e001      	b.n	8000980 <_ZNK7Command11GetDataSizeEv+0x18>
    return dataSize;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	891b      	ldrh	r3, [r3, #8]
}
 8000980:	4618      	mov	r0, r3
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <_ZNSt13__atomic_baseItEpLEt>:
      __int_type
      operator--() volatile noexcept
      { return __atomic_sub_fetch(&_M_i, 1, int(memory_order_seq_cst)); }

      __int_type
      operator+=(__int_type __i) noexcept
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	460b      	mov	r3, r1
 8000996:	807b      	strh	r3, [r7, #2]
      { return __atomic_add_fetch(&_M_i, __i, int(memory_order_seq_cst)); }
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	887a      	ldrh	r2, [r7, #2]
 800099c:	f3bf 8f5b 	dmb	ish
 80009a0:	e8d3 1f5f 	ldrexh	r1, [r3]
 80009a4:	4411      	add	r1, r2
 80009a6:	e8c3 1f50 	strexh	r0, r1, [r3]
 80009aa:	2800      	cmp	r0, #0
 80009ac:	d1f8      	bne.n	80009a0 <_ZNSt13__atomic_baseItEpLEt+0x14>
 80009ae:	f3bf 8f5b 	dmb	ish
 80009b2:	b28b      	uxth	r3, r1
 80009b4:	4618      	mov	r0, r3
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <_ZNKSt13__atomic_baseItEcvtEv>:
      operator __int_type() const noexcept
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	617b      	str	r3, [r7, #20]
 80009cc:	2305      	movs	r3, #5
 80009ce:	613b      	str	r3, [r7, #16]
      }

      _GLIBCXX_ALWAYS_INLINE __int_type
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	memory_order __b = __m & __memory_order_mask;
 80009d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80009d4:	6938      	ldr	r0, [r7, #16]
 80009d6:	f7ff fedf 	bl	8000798 <_ZStanSt12memory_orderSt23__memory_order_modifier>
 80009da:	60f8      	str	r0, [r7, #12]
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	f3bf 8f5b 	dmb	ish
 80009e2:	881b      	ldrh	r3, [r3, #0]
 80009e4:	f3bf 8f5b 	dmb	ish
 80009e8:	b29b      	uxth	r3, r3
 80009ea:	bf00      	nop
      { return load(); }
 80009ec:	4618      	mov	r0, r3
 80009ee:	3718      	adds	r7, #24
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <_ZNSt13__atomic_baseItEmIEt>:
      operator-=(__int_type __i) noexcept
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	460b      	mov	r3, r1
 80009fe:	807b      	strh	r3, [r7, #2]
      { return __atomic_sub_fetch(&_M_i, __i, int(memory_order_seq_cst)); }
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	887a      	ldrh	r2, [r7, #2]
 8000a04:	f3bf 8f5b 	dmb	ish
 8000a08:	e8d3 1f5f 	ldrexh	r1, [r3]
 8000a0c:	eba1 0102 	sub.w	r1, r1, r2
 8000a10:	e8c3 1f50 	strexh	r0, r1, [r3]
 8000a14:	2800      	cmp	r0, #0
 8000a16:	d1f7      	bne.n	8000a08 <_ZNSt13__atomic_baseItEmIEt+0x14>
 8000a18:	f3bf 8f5b 	dmb	ish
 8000a1c:	b28b      	uxth	r3, r1
 8000a1e:	4618      	mov	r0, r3
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
	...

08000a2c <_ZN5MutexC1Ev>:
#include "Utils.hpp"

/**
 * @brief Constructor for the Mutex class.
 */
Mutex::Mutex()
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
{
	rtSemaphoreHandle = xSemaphoreCreateMutex();
 8000a34:	2001      	movs	r0, #1
 8000a36:	f005 fdfe 	bl	8006636 <xQueueCreateMutex>
 8000a3a:	4602      	mov	r2, r0
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	601a      	str	r2, [r3, #0]

	SOAR_ASSERT(rtSemaphoreHandle != NULL, "Semaphore creation failed.");
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d105      	bne.n	8000a54 <_ZN5MutexC1Ev+0x28>
 8000a48:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <_ZN5MutexC1Ev+0x34>)
 8000a4a:	2213      	movs	r2, #19
 8000a4c:	4905      	ldr	r1, [pc, #20]	; (8000a64 <_ZN5MutexC1Ev+0x38>)
 8000a4e:	2000      	movs	r0, #0
 8000a50:	f000 fbe8 	bl	8001224 <_Z17soar_assert_debugbPKctS0_z>
}
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4618      	mov	r0, r3
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	08009678 	.word	0x08009678
 8000a64:	08009694 	.word	0x08009694

08000a68 <_ZN5MutexD1Ev>:


/**
 * @brief Destructor for the Mutex class.
 */
Mutex::~Mutex()
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
{
	vSemaphoreDelete(rtSemaphoreHandle);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4618      	mov	r0, r3
 8000a76:	f006 f97d 	bl	8006d74 <vQueueDelete>
}
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <_ZN5Mutex4LockEm>:
 * @brief This function is used to lock the Mutex.
 * @param timeout_ms The time to wait for the Mutex before it fails. If timeout_ms is not provided, the function will wait indefinitely.
 * @return True on success, false on failure.
*/
bool Mutex::Lock(uint32_t timeout_ms)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	6039      	str	r1, [r7, #0]
	return xSemaphoreTake(rtSemaphoreHandle, MS_TO_TICKS(timeout_ms)) == pdTRUE;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a98:	fb01 f303 	mul.w	r3, r1, r3
 8000a9c:	4908      	ldr	r1, [pc, #32]	; (8000ac0 <_ZN5Mutex4LockEm+0x3c>)
 8000a9e:	fba1 1303 	umull	r1, r3, r1, r3
 8000aa2:	099b      	lsrs	r3, r3, #6
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4610      	mov	r0, r2
 8000aa8:	f006 f858 	bl	8006b5c <xQueueSemaphoreTake>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	bf0c      	ite	eq
 8000ab2:	2301      	moveq	r3, #1
 8000ab4:	2300      	movne	r3, #0
 8000ab6:	b2db      	uxtb	r3, r3
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	10624dd3 	.word	0x10624dd3

08000ac4 <_ZN5Mutex6UnlockEv>:
/**
 * @brief This function will attempt to unlock the mutex
 * @return True on success (mutex unlocked) false in failure (mutex was not unlocked)
*/
bool Mutex::Unlock()
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
	return xSemaphoreGive(rtSemaphoreHandle) == pdTRUE;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6818      	ldr	r0, [r3, #0]
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	f005 fdc7 	bl	8006668 <xQueueGenericSend>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	bf0c      	ite	eq
 8000ae0:	2301      	moveq	r3, #1
 8000ae2:	2300      	movne	r3, #0
 8000ae4:	b2db      	uxtb	r3, r3
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <_ZN5QueueC1Et>:

/**
 * @brief Constructor with depth for the Queue class
 * @param depth Queue depth
*/
Queue::Queue(uint16_t depth)
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b082      	sub	sp, #8
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
 8000af6:	460b      	mov	r3, r1
 8000af8:	807b      	strh	r3, [r7, #2]
{
	//Initialize RTOS Queue handle with given depth
	rtQueueHandle = xQueueCreate(depth, sizeof(Command));
 8000afa:	887b      	ldrh	r3, [r7, #2]
 8000afc:	2200      	movs	r2, #0
 8000afe:	210c      	movs	r1, #12
 8000b00:	4618      	mov	r0, r3
 8000b02:	f005 fd25 	bl	8006550 <xQueueGenericCreate>
 8000b06:	4602      	mov	r2, r0
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	601a      	str	r2, [r3, #0]
	queueDepth = 0;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2200      	movs	r2, #0
 8000b10:	809a      	strh	r2, [r3, #4]
}
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4618      	mov	r0, r3
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <_ZN5Queue11SendFromISRER7Command>:
 * @brief Sends a command object to the queue, safe to call from ISR
 * @param command Command object reference to send
 * @return true on success, false on failure (queue full)
*/
bool Queue::SendFromISR(Command& command)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	6039      	str	r1, [r7, #0]
	//Note: There NULL param here could be used to wake a task right after after exiting the ISR
	if (xQueueSendFromISR(rtQueueHandle, &command, NULL) == pdPASS)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6818      	ldr	r0, [r3, #0]
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	6839      	ldr	r1, [r7, #0]
 8000b30:	f005 fe98 	bl	8006864 <xQueueGenericSendFromISR>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	bf0c      	ite	eq
 8000b3a:	2301      	moveq	r3, #1
 8000b3c:	2300      	movne	r3, #0
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <_ZN5Queue11SendFromISRER7Command+0x2c>
		return true;
 8000b44:	2301      	movs	r3, #1
 8000b46:	e003      	b.n	8000b50 <_ZN5Queue11SendFromISRER7Command+0x34>

	command.Reset();
 8000b48:	6838      	ldr	r0, [r7, #0]
 8000b4a:	f7ff fef1 	bl	8000930 <_ZN7Command5ResetEv>

	return false;
 8000b4e:	2300      	movs	r3, #0
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <_ZN5Queue4SendER7Command>:
 * @brief Sends a command object to the queue (sends to back of queue in FIFO order)
 * @param command Command object reference to send
 * @return true on success, false on failure (queue full)
*/
bool Queue::Send(Command& command)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	6039      	str	r1, [r7, #0]
	if (xQueueSend(rtQueueHandle, &command, DEFAULT_QUEUE_SEND_WAIT_TICKS) == pdPASS)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6818      	ldr	r0, [r3, #0]
 8000b66:	2300      	movs	r3, #0
 8000b68:	220f      	movs	r2, #15
 8000b6a:	6839      	ldr	r1, [r7, #0]
 8000b6c:	f005 fd7c 	bl	8006668 <xQueueGenericSend>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	bf0c      	ite	eq
 8000b76:	2301      	moveq	r3, #1
 8000b78:	2300      	movne	r3, #0
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <_ZN5Queue4SendER7Command+0x2c>
		return true;
 8000b80:	2301      	movs	r3, #1
 8000b82:	e006      	b.n	8000b92 <_ZN5Queue4SendER7Command+0x3a>

	//TODO: It may be possible to have this automatically set the command to not free data externally as we've "passed" control of the data over, which might let us use a destructor to free the data

	SOAR_PRINT("Could not send data to queue!");
 8000b84:	4805      	ldr	r0, [pc, #20]	; (8000b9c <_ZN5Queue4SendER7Command+0x44>)
 8000b86:	f000 faeb 	bl	8001160 <_Z5printPKcz>
	command.Reset();
 8000b8a:	6838      	ldr	r0, [r7, #0]
 8000b8c:	f7ff fed0 	bl	8000930 <_ZN7Command5ResetEv>

	return false;
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	080096dc 	.word	0x080096dc

08000ba0 <_ZN5Queue11ReceiveWaitER7Command>:
 * @brief Polls queue with specific timeout, blocks forever
 * @param cm Command object to copy received data into
 * @return TRUE if we received a command, FALSE otherwise (should rarely return false)
*/
bool Queue::ReceiveWait(Command& cm)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	6039      	str	r1, [r7, #0]
	if (xQueueReceive(rtQueueHandle, &cm, HAL_MAX_DELAY) == pdTRUE) {
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb2:	6839      	ldr	r1, [r7, #0]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f005 fef1 	bl	800699c <xQueueReceive>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	bf0c      	ite	eq
 8000bc0:	2301      	moveq	r3, #1
 8000bc2:	2300      	movne	r3, #0
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <_ZN5Queue11ReceiveWaitER7Command+0x2e>
		return true;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e000      	b.n	8000bd0 <_ZN5Queue11ReceiveWaitER7Command+0x30>
	}
	return false;
 8000bce:	2300      	movs	r3, #0
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <_ZN4TaskC1Et>:

/**
 * @brief Constructor with queue depth
 * @param depth Optionally 0, uses the given depth for the event queue
*/
Task::Task(uint16_t depth)
 8000bd8:	b590      	push	{r4, r7, lr}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	460b      	mov	r3, r1
 8000be2:	807b      	strh	r3, [r7, #2]
{
    if (depth == 0)
 8000be4:	887b      	ldrh	r3, [r7, #2]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d103      	bne.n	8000bf2 <_ZN4TaskC1Et+0x1a>
        qEvtQueue = nullptr;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2200      	movs	r2, #0
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	e00b      	b.n	8000c0a <_ZN4TaskC1Et+0x32>
    else
        qEvtQueue = new Queue(depth);
 8000bf2:	2008      	movs	r0, #8
 8000bf4:	f007 feb9 	bl	800896a <_Znwj>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	461c      	mov	r4, r3
 8000bfc:	887b      	ldrh	r3, [r7, #2]
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4620      	mov	r0, r4
 8000c02:	f7ff ff74 	bl	8000aee <_ZN5QueueC1Et>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	605c      	str	r4, [r3, #4]
    rtTaskHandle = nullptr;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
}
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	4618      	mov	r0, r3
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd90      	pop	{r4, r7, pc}
	...

08000c1c <_ZN10FlightTask4InstEv>:
#include "Task.hpp"
#include "SystemDefines.hpp"
class FlightTask : public Task
{
public:
    static FlightTask& Inst() {
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
        static FlightTask inst;
 8000c20:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <_ZN10FlightTask4InstEv+0x48>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	f3bf 8f5b 	dmb	ish
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	bf0c      	ite	eq
 8000c32:	2301      	moveq	r3, #1
 8000c34:	2300      	movne	r3, #0
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d010      	beq.n	8000c5e <_ZN10FlightTask4InstEv+0x42>
 8000c3c:	4809      	ldr	r0, [pc, #36]	; (8000c64 <_ZN10FlightTask4InstEv+0x48>)
 8000c3e:	f007 fe85 	bl	800894c <__cxa_guard_acquire>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	bf14      	ite	ne
 8000c48:	2301      	movne	r3, #1
 8000c4a:	2300      	moveq	r3, #0
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d005      	beq.n	8000c5e <_ZN10FlightTask4InstEv+0x42>
 8000c52:	4805      	ldr	r0, [pc, #20]	; (8000c68 <_ZN10FlightTask4InstEv+0x4c>)
 8000c54:	f000 f832 	bl	8000cbc <_ZN10FlightTaskC1Ev>
 8000c58:	4802      	ldr	r0, [pc, #8]	; (8000c64 <_ZN10FlightTask4InstEv+0x48>)
 8000c5a:	f007 fe83 	bl	8008964 <__cxa_guard_release>
        return inst;
 8000c5e:	4b02      	ldr	r3, [pc, #8]	; (8000c68 <_ZN10FlightTask4InstEv+0x4c>)
    }
 8000c60:	4618      	mov	r0, r3
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	200000a8 	.word	0x200000a8
 8000c68:	200000a0 	.word	0x200000a0

08000c6c <_ZN10FlightTask7RunTaskEPv>:

    void InitTask();

protected:
    static void RunTask(void* pvParams) { FlightTask::Inst().Run(pvParams); } // Static Task Interface, passes control to the instance Run();
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	f7ff ffd2 	bl	8000c1c <_ZN10FlightTask4InstEv>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	6879      	ldr	r1, [r7, #4]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f000 f85d 	bl	8000d3c <_ZN10FlightTask3RunEPv>
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
	...

08000c8c <_ZN4GPIO4LED12OnEv>:

namespace GPIO
{
	namespace LED1
	{
		inline void On() { HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET); }
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	2201      	movs	r2, #1
 8000c92:	2140      	movs	r1, #64	; 0x40
 8000c94:	4802      	ldr	r0, [pc, #8]	; (8000ca0 <_ZN4GPIO4LED12OnEv+0x14>)
 8000c96:	f002 fd0d 	bl	80036b4 <HAL_GPIO_WritePin>
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	48000400 	.word	0x48000400

08000ca4 <_ZN4GPIO4LED13OffEv>:
		inline void Off() { HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET); }
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2140      	movs	r1, #64	; 0x40
 8000cac:	4802      	ldr	r0, [pc, #8]	; (8000cb8 <_ZN4GPIO4LED13OffEv+0x14>)
 8000cae:	f002 fd01 	bl	80036b4 <HAL_GPIO_WritePin>
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	48000400 	.word	0x48000400

08000cbc <_ZN10FlightTaskC1Ev>:
#include "SystemDefines.hpp"

/**
 * @brief Constructor for FlightTask
 */
FlightTask::FlightTask() : Task(FLIGHT_TASK_QUEUE_DEPTH_OBJS)
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	210a      	movs	r1, #10
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff ff85 	bl	8000bd8 <_ZN4TaskC1Et>
{
}
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <_ZN10FlightTask8InitTaskEv>:

/**
 * @brief Initialize the FlightTask
 */
void FlightTask::InitTask()
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af02      	add	r7, sp, #8
 8000cde:	6078      	str	r0, [r7, #4]
    // Make sure the task is not already initialized
    SOAR_ASSERT(rtTaskHandle == nullptr, "Cannot initialize flight task twice");
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d005      	beq.n	8000cf4 <_ZN10FlightTask8InitTaskEv+0x1c>
 8000ce8:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <_ZN10FlightTask8InitTaskEv+0x50>)
 8000cea:	2218      	movs	r2, #24
 8000cec:	490f      	ldr	r1, [pc, #60]	; (8000d2c <_ZN10FlightTask8InitTaskEv+0x54>)
 8000cee:	2000      	movs	r0, #0
 8000cf0:	f000 fa98 	bl	8001224 <_Z17soar_assert_debugbPKctS0_z>
    
    BaseType_t rtValue =
        xTaskCreate((TaskFunction_t)FlightTask::RunTask,
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	9301      	str	r3, [sp, #4]
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	9300      	str	r3, [sp, #0]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d02:	490b      	ldr	r1, [pc, #44]	; (8000d30 <_ZN10FlightTask8InitTaskEv+0x58>)
 8000d04:	480b      	ldr	r0, [pc, #44]	; (8000d34 <_ZN10FlightTask8InitTaskEv+0x5c>)
 8000d06:	f006 fa08 	bl	800711a <xTaskCreate>
 8000d0a:	60f8      	str	r0, [r7, #12]
            (uint16_t)FLIGHT_TASK_STACK_DEPTH_WORDS,
            (void*)this,
            (UBaseType_t)FLIGHT_TASK_RTOS_PRIORITY,
            (TaskHandle_t*)&rtTaskHandle);

    SOAR_ASSERT(rtValue == pdPASS, "FlightTask::InitTask() - xTaskCreate() failed");
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d005      	beq.n	8000d1e <_ZN10FlightTask8InitTaskEv+0x46>
 8000d12:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <_ZN10FlightTask8InitTaskEv+0x60>)
 8000d14:	2222      	movs	r2, #34	; 0x22
 8000d16:	4905      	ldr	r1, [pc, #20]	; (8000d2c <_ZN10FlightTask8InitTaskEv+0x54>)
 8000d18:	2000      	movs	r0, #0
 8000d1a:	f000 fa83 	bl	8001224 <_Z17soar_assert_debugbPKctS0_z>
}
 8000d1e:	bf00      	nop
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	080096fc 	.word	0x080096fc
 8000d2c:	08009720 	.word	0x08009720
 8000d30:	0800974c 	.word	0x0800974c
 8000d34:	08000c6d 	.word	0x08000c6d
 8000d38:	08009758 	.word	0x08009758

08000d3c <_ZN10FlightTask3RunEPv>:
/**
 * @brief Instance Run loop for the Flight Task, runs on scheduler start as long as the task is initialized.
 * @param pvParams RTOS Passed void parameters, contains a pointer to the object instance, should not be used
 */
void FlightTask::Run(void * pvParams)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	6039      	str	r1, [r7, #0]
    uint32_t tempSecondCounter = 0; // TODO: Temporary counter, would normally be in HeartBeat task or HID Task, unless FlightTask is the HeartBeat task
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
    GPIO::LED1::Off();
 8000d4a:	f7ff ffab 	bl	8000ca4 <_ZN4GPIO4LED13OffEv>
        // Could consider a universal queue that directs and handles commands to specific tasks, and a task that handles the queue events and then calls the
        // Mappings between X command and P subscribers (tasks that are expecting it).

        // Since FlightTask is so critical to managing the system, it may make sense to make this a Async task that handles commands as they come in, and have these display commands be routed over to the DisplayTask
        // or maybe HID (Human Interface Device) task that handles both updating buzzer frequencies and LED states.
        GPIO::LED1::On();
 8000d4e:	f7ff ff9d 	bl	8000c8c <_ZN4GPIO4LED12OnEv>
        osDelay(500);
 8000d52:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d56:	f005 facb 	bl	80062f0 <osDelay>
        GPIO::LED1::Off();
 8000d5a:	f7ff ffa3 	bl	8000ca4 <_ZN4GPIO4LED13OffEv>
        osDelay(500);
 8000d5e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d62:	f005 fac5 	bl	80062f0 <osDelay>

        //Every cycle, print something out (for testing)
        SOAR_PRINT("FlightTask::Run() - [%d] Seconds\n", tempSecondCounter++);
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	1c5a      	adds	r2, r3, #1
 8000d6a:	60fa      	str	r2, [r7, #12]
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4802      	ldr	r0, [pc, #8]	; (8000d78 <_ZN10FlightTask3RunEPv+0x3c>)
 8000d70:	f000 f9f6 	bl	8001160 <_Z5printPKcz>
        GPIO::LED1::On();
 8000d74:	e7eb      	b.n	8000d4e <_ZN10FlightTask3RunEPv+0x12>
 8000d76:	bf00      	nop
 8000d78:	08009788 	.word	0x08009788

08000d7c <_ZN9DebugTask4InstEv>:

/* Class ------------------------------------------------------------------*/
class DebugTask : public Task
{
public:
	static DebugTask& Inst() {
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
		static DebugTask inst;
 8000d80:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <_ZN9DebugTask4InstEv+0x48>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	f3bf 8f5b 	dmb	ish
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	bf0c      	ite	eq
 8000d92:	2301      	moveq	r3, #1
 8000d94:	2300      	movne	r3, #0
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d010      	beq.n	8000dbe <_ZN9DebugTask4InstEv+0x42>
 8000d9c:	4809      	ldr	r0, [pc, #36]	; (8000dc4 <_ZN9DebugTask4InstEv+0x48>)
 8000d9e:	f007 fdd5 	bl	800894c <__cxa_guard_acquire>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	bf14      	ite	ne
 8000da8:	2301      	movne	r3, #1
 8000daa:	2300      	moveq	r3, #0
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d005      	beq.n	8000dbe <_ZN9DebugTask4InstEv+0x42>
 8000db2:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <_ZN9DebugTask4InstEv+0x4c>)
 8000db4:	f000 f830 	bl	8000e18 <_ZN9DebugTaskC1Ev>
 8000db8:	4802      	ldr	r0, [pc, #8]	; (8000dc4 <_ZN9DebugTask4InstEv+0x48>)
 8000dba:	f007 fdd3 	bl	8008964 <__cxa_guard_release>
		return inst;
 8000dbe:	4b02      	ldr	r3, [pc, #8]	; (8000dc8 <_ZN9DebugTask4InstEv+0x4c>)
	}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	200000c8 	.word	0x200000c8
 8000dc8:	200000ac 	.word	0x200000ac

08000dcc <_ZN9DebugTask7RunTaskEPv>:

	//Functions exposed to HAL callbacks
	void InterruptRxData();

protected:
	static void RunTask(void* pvParams) { DebugTask::Inst().Run(pvParams); } // Static Task Interface, passes control to the instance Run();
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	f7ff ffd2 	bl	8000d7c <_ZN9DebugTask4InstEv>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	6879      	ldr	r1, [r7, #4]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f000 f869 	bl	8000eb4 <_ZN9DebugTask3RunEPv>
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
	...

08000dec <HAL_UART_RxCpltCallback>:
 * @brief HAL Callback for DMA/Interrupt Complete
 *
 * TODO: This should eventually be in DMAController/main_avionics/UARTTask depending on how many tasks use DMA vs Interrupt vs Polling
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == SystemHandles::UART_Debug->Instance)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <HAL_UART_RxCpltCallback+0x28>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d105      	bne.n	8000e0c <HAL_UART_RxCpltCallback+0x20>
		DebugTask::Inst().InterruptRxData();
 8000e00:	f7ff ffbc 	bl	8000d7c <_ZN9DebugTask4InstEv>
 8000e04:	4603      	mov	r3, r0
 8000e06:	4618      	mov	r0, r3
 8000e08:	f000 f90c 	bl	8001024 <_ZN9DebugTask15InterruptRxDataEv>
}
 8000e0c:	bf00      	nop
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	200005ec 	.word	0x200005ec

08000e18 <_ZN9DebugTaskC1Ev>:

/* Functions -----------------------------------------------------------------*/
/**
 * @brief Constructor, sets all member variables
 */
DebugTask::DebugTask() : Task(TASK_DEBUG_QUEUE_DEPTH_OBJS)
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	210a      	movs	r1, #10
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff fed7 	bl	8000bd8 <_ZN4TaskC1Et>
{
	memset(debugBuffer, 0, sizeof(debugBuffer));
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	3308      	adds	r3, #8
 8000e2e:	2211      	movs	r2, #17
 8000e30:	2100      	movs	r1, #0
 8000e32:	4618      	mov	r0, r3
 8000e34:	f007 fdfc 	bl	8008a30 <memset>
	debugMsgIdx = 0;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	765a      	strb	r2, [r3, #25]
	isDebugMsgReady = false;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2200      	movs	r2, #0
 8000e42:	769a      	strb	r2, [r3, #26]
}
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4618      	mov	r0, r3
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <_ZN9DebugTask8InitTaskEv>:

/**
 * @brief Init task for RTOS
 */
void DebugTask::InitTask()
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af02      	add	r7, sp, #8
 8000e56:	6078      	str	r0, [r7, #4]
	// Make sure the task is not already initialized
	SOAR_ASSERT(rtTaskHandle == nullptr, "Cannot initialize Debug task twice");
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d005      	beq.n	8000e6c <_ZN9DebugTask8InitTaskEv+0x1c>
 8000e60:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <_ZN9DebugTask8InitTaskEv+0x50>)
 8000e62:	223a      	movs	r2, #58	; 0x3a
 8000e64:	490f      	ldr	r1, [pc, #60]	; (8000ea4 <_ZN9DebugTask8InitTaskEv+0x54>)
 8000e66:	2000      	movs	r0, #0
 8000e68:	f000 f9dc 	bl	8001224 <_Z17soar_assert_debugbPKctS0_z>

	// Start the task
	BaseType_t rtValue =
		xTaskCreate((TaskFunction_t)DebugTask::RunTask,
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	9301      	str	r3, [sp, #4]
 8000e70:	2302      	movs	r3, #2
 8000e72:	9300      	str	r3, [sp, #0]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e7a:	490b      	ldr	r1, [pc, #44]	; (8000ea8 <_ZN9DebugTask8InitTaskEv+0x58>)
 8000e7c:	480b      	ldr	r0, [pc, #44]	; (8000eac <_ZN9DebugTask8InitTaskEv+0x5c>)
 8000e7e:	f006 f94c 	bl	800711a <xTaskCreate>
 8000e82:	60f8      	str	r0, [r7, #12]
			(void*)this,
			(UBaseType_t)TASK_DEBUG_PRIORITY,
			(TaskHandle_t*)&rtTaskHandle);

	//Ensure creation succeded
	SOAR_ASSERT(rtValue == pdPASS, "DebugTask::InitTask - xTaskCreate() failed");
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d005      	beq.n	8000e96 <_ZN9DebugTask8InitTaskEv+0x46>
 8000e8a:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <_ZN9DebugTask8InitTaskEv+0x60>)
 8000e8c:	2246      	movs	r2, #70	; 0x46
 8000e8e:	4905      	ldr	r1, [pc, #20]	; (8000ea4 <_ZN9DebugTask8InitTaskEv+0x54>)
 8000e90:	2000      	movs	r0, #0
 8000e92:	f000 f9c7 	bl	8001224 <_Z17soar_assert_debugbPKctS0_z>
}
 8000e96:	bf00      	nop
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	080097ac 	.word	0x080097ac
 8000ea4:	080097d0 	.word	0x080097d0
 8000ea8:	080097f8 	.word	0x080097f8
 8000eac:	08000dcd 	.word	0x08000dcd
 8000eb0:	08009804 	.word	0x08009804

08000eb4 <_ZN9DebugTask3RunEPv>:
// TODO: Only run thread when appropriate GPIO pin pulled HIGH (or by define)
/**
 *	@brief Runcode for the DebugTask
 */
void DebugTask::Run(void * pvParams)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
	// Arm the interrupt
	ReceiveData();
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f000 f89e 	bl	8001000 <_ZN9DebugTask11ReceiveDataEv>

	while (1) {
		Command cm;
 8000ec4:	f107 030c 	add.w	r3, r7, #12
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff fc98 	bl	80007fe <_ZN7CommandC1Ev>

		//Wait forever for a command
		qEvtQueue->ReceiveWait(cm);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f107 020c 	add.w	r2, r7, #12
 8000ed6:	4611      	mov	r1, r2
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff fe61 	bl	8000ba0 <_ZN5Queue11ReceiveWaitER7Command>

		//Process the command
		if(cm.GetCommand() == DATA_COMMAND && cm.GetTaskCommand() == EVENT_DEBUG_RX_COMPLETE) {
 8000ede:	f107 030c 	add.w	r3, r7, #12
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff fb6a 	bl	80005bc <_ZNK7Command10GetCommandEv>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d109      	bne.n	8000f02 <_ZN9DebugTask3RunEPv+0x4e>
 8000eee:	f107 030c 	add.w	r3, r7, #12
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff fb6e 	bl	80005d4 <_ZNK7Command14GetTaskCommandEv>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d101      	bne.n	8000f02 <_ZN9DebugTask3RunEPv+0x4e>
 8000efe:	2301      	movs	r3, #1
 8000f00:	e000      	b.n	8000f04 <_ZN9DebugTask3RunEPv+0x50>
 8000f02:	2300      	movs	r3, #0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d005      	beq.n	8000f14 <_ZN9DebugTask3RunEPv+0x60>
			HandleDebugMessage((const char*)debugBuffer);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3308      	adds	r3, #8
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f000 f806 	bl	8000f20 <_ZN9DebugTask18HandleDebugMessageEPKc>
		}

		cm.Reset();
 8000f14:	f107 030c 	add.w	r3, r7, #12
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff fd09 	bl	8000930 <_ZN7Command5ResetEv>
	}
 8000f1e:	e7d1      	b.n	8000ec4 <_ZN9DebugTask3RunEPv+0x10>

08000f20 <_ZN9DebugTask18HandleDebugMessageEPKc>:
/**
 * @brief Handles debug messages, assumes msg is null terminated
 * @param msg Message to read, must be null termianted
 */
void DebugTask::HandleDebugMessage(const char* msg)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]
	//-- SYSTEM / CHAR COMMANDS -- (Must be last)
	if (strcmp(msg, "sysreset") == 0) {
 8000f2a:	4929      	ldr	r1, [pc, #164]	; (8000fd0 <_ZN9DebugTask18HandleDebugMessageEPKc+0xb0>)
 8000f2c:	6838      	ldr	r0, [r7, #0]
 8000f2e:	f7ff f94f 	bl	80001d0 <strcmp>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d106      	bne.n	8000f46 <_ZN9DebugTask18HandleDebugMessageEPKc+0x26>
		// Reset the system
		SOAR_ASSERT(false, "System reset requested");
 8000f38:	4b26      	ldr	r3, [pc, #152]	; (8000fd4 <_ZN9DebugTask18HandleDebugMessageEPKc+0xb4>)
 8000f3a:	226a      	movs	r2, #106	; 0x6a
 8000f3c:	4926      	ldr	r1, [pc, #152]	; (8000fd8 <_ZN9DebugTask18HandleDebugMessageEPKc+0xb8>)
 8000f3e:	2000      	movs	r0, #0
 8000f40:	f000 f970 	bl	8001224 <_Z17soar_assert_debugbPKctS0_z>
 8000f44:	e039      	b.n	8000fba <_ZN9DebugTask18HandleDebugMessageEPKc+0x9a>
	}
	else if (strcmp(msg, "sysinfo") == 0) {
 8000f46:	4925      	ldr	r1, [pc, #148]	; (8000fdc <_ZN9DebugTask18HandleDebugMessageEPKc+0xbc>)
 8000f48:	6838      	ldr	r0, [r7, #0]
 8000f4a:	f7ff f941 	bl	80001d0 <strcmp>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d120      	bne.n	8000f96 <_ZN9DebugTask18HandleDebugMessageEPKc+0x76>
		// Print message
		SOAR_PRINT("\n\t-- Avionics Core System Info --\n");
 8000f54:	4822      	ldr	r0, [pc, #136]	; (8000fe0 <_ZN9DebugTask18HandleDebugMessageEPKc+0xc0>)
 8000f56:	f000 f903 	bl	8001160 <_Z5printPKcz>
		SOAR_PRINT("Current System Heap Use: %d Bytes\n", xPortGetFreeHeapSize());
 8000f5a:	f007 fc23 	bl	80087a4 <xPortGetFreeHeapSize>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	4619      	mov	r1, r3
 8000f62:	4820      	ldr	r0, [pc, #128]	; (8000fe4 <_ZN9DebugTask18HandleDebugMessageEPKc+0xc4>)
 8000f64:	f000 f8fc 	bl	8001160 <_Z5printPKcz>
		SOAR_PRINT("Lowest Ever Heap Size\t: %d Bytes\n", xPortGetMinimumEverFreeHeapSize());
 8000f68:	f007 fc28 	bl	80087bc <xPortGetMinimumEverFreeHeapSize>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	4619      	mov	r1, r3
 8000f70:	481d      	ldr	r0, [pc, #116]	; (8000fe8 <_ZN9DebugTask18HandleDebugMessageEPKc+0xc8>)
 8000f72:	f000 f8f5 	bl	8001160 <_Z5printPKcz>
		SOAR_PRINT("Debug Task Runtime  \t: %d ms\n\n", TICKS_TO_MS(xTaskGetTickCount()));
 8000f76:	f006 fb65 	bl	8007644 <xTaskGetTickCount>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f80:	fb02 f303 	mul.w	r3, r2, r3
 8000f84:	4a19      	ldr	r2, [pc, #100]	; (8000fec <_ZN9DebugTask18HandleDebugMessageEPKc+0xcc>)
 8000f86:	fba2 2303 	umull	r2, r3, r2, r3
 8000f8a:	099b      	lsrs	r3, r3, #6
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4818      	ldr	r0, [pc, #96]	; (8000ff0 <_ZN9DebugTask18HandleDebugMessageEPKc+0xd0>)
 8000f90:	f000 f8e6 	bl	8001160 <_Z5printPKcz>
 8000f94:	e011      	b.n	8000fba <_ZN9DebugTask18HandleDebugMessageEPKc+0x9a>
	}
	else if (strcmp(msg, "blinkled") == 0) {
 8000f96:	4917      	ldr	r1, [pc, #92]	; (8000ff4 <_ZN9DebugTask18HandleDebugMessageEPKc+0xd4>)
 8000f98:	6838      	ldr	r0, [r7, #0]
 8000f9a:	f7ff f919 	bl	80001d0 <strcmp>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d105      	bne.n	8000fb0 <_ZN9DebugTask18HandleDebugMessageEPKc+0x90>
		// Print message
		SOAR_PRINT("Debug 'LED blink' command requested\n");
 8000fa4:	4814      	ldr	r0, [pc, #80]	; (8000ff8 <_ZN9DebugTask18HandleDebugMessageEPKc+0xd8>)
 8000fa6:	f000 f8db 	bl	8001160 <_Z5printPKcz>
		GPIO::LED1::On();
 8000faa:	f7ff fe6f 	bl	8000c8c <_ZN4GPIO4LED12OnEv>
 8000fae:	e004      	b.n	8000fba <_ZN9DebugTask18HandleDebugMessageEPKc+0x9a>
	}
	else {
		// Single character command, or unknown command
		switch (msg[0]) {
		default:
			SOAR_PRINT("Debug, unknown command: %s\n", msg);
 8000fb0:	6839      	ldr	r1, [r7, #0]
 8000fb2:	4812      	ldr	r0, [pc, #72]	; (8000ffc <_ZN9DebugTask18HandleDebugMessageEPKc+0xdc>)
 8000fb4:	f000 f8d4 	bl	8001160 <_Z5printPKcz>
			break;
 8000fb8:	bf00      	nop
		}
	}

	//We've read the data, clear the buffer
	debugMsgIdx = 0;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	765a      	strb	r2, [r3, #25]
	isDebugMsgReady = false;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	769a      	strb	r2, [r3, #26]
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	08009830 	.word	0x08009830
 8000fd4:	0800983c 	.word	0x0800983c
 8000fd8:	080097d0 	.word	0x080097d0
 8000fdc:	08009854 	.word	0x08009854
 8000fe0:	0800985c 	.word	0x0800985c
 8000fe4:	08009880 	.word	0x08009880
 8000fe8:	080098a4 	.word	0x080098a4
 8000fec:	10624dd3 	.word	0x10624dd3
 8000ff0:	080098c8 	.word	0x080098c8
 8000ff4:	080098e8 	.word	0x080098e8
 8000ff8:	080098f4 	.word	0x080098f4
 8000ffc:	0800991c 	.word	0x0800991c

08001000 <_ZN9DebugTask11ReceiveDataEv>:

/**
 * @brief Receive data, currently receives by arming interrupt
 */
bool DebugTask::ReceiveData()
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(SystemHandles::UART_Debug, &debugRxChar, 1);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	331b      	adds	r3, #27
 800100c:	2201      	movs	r2, #1
 800100e:	4619      	mov	r1, r3
 8001010:	4803      	ldr	r0, [pc, #12]	; (8001020 <_ZN9DebugTask11ReceiveDataEv+0x20>)
 8001012:	f004 fa69 	bl	80054e8 <HAL_UART_Receive_IT>
	return true;
 8001016:	2301      	movs	r3, #1
}
 8001018:	4618      	mov	r0, r3
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	200005ec 	.word	0x200005ec

08001024 <_ZN9DebugTask15InterruptRxDataEv>:
/**
 * @brief Receive data to the buffer
 * @return Whether the debugBuffer is ready or not
 */
void DebugTask::InterruptRxData()
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	// If we already have an unprocessed debug message, ignore this byte
	if (!isDebugMsgReady) {
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	7e9b      	ldrb	r3, [r3, #26]
 8001030:	f083 0301 	eor.w	r3, r3, #1
 8001034:	b2db      	uxtb	r3, r3
 8001036:	2b00      	cmp	r3, #0
 8001038:	d03f      	beq.n	80010ba <_ZN9DebugTask15InterruptRxDataEv+0x96>
		// Check byte for end of message - note if using termite you must turn on append CR
		if (debugRxChar == '\r' || debugMsgIdx == DEBUG_RX_BUFFER_SZ_BYTES) {
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	7edb      	ldrb	r3, [r3, #27]
 800103e:	2b0d      	cmp	r3, #13
 8001040:	d003      	beq.n	800104a <_ZN9DebugTask15InterruptRxDataEv+0x26>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	7e5b      	ldrb	r3, [r3, #25]
 8001046:	2b10      	cmp	r3, #16
 8001048:	d128      	bne.n	800109c <_ZN9DebugTask15InterruptRxDataEv+0x78>
			// Null terminate and process
			debugBuffer[debugMsgIdx++] = '\0';
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	7e5b      	ldrb	r3, [r3, #25]
 800104e:	1c5a      	adds	r2, r3, #1
 8001050:	b2d1      	uxtb	r1, r2
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	7651      	strb	r1, [r2, #25]
 8001056:	461a      	mov	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	4413      	add	r3, r2
 800105c:	2200      	movs	r2, #0
 800105e:	721a      	strb	r2, [r3, #8]
			isDebugMsgReady = true;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2201      	movs	r2, #1
 8001064:	769a      	strb	r2, [r3, #26]

			// Notify the debug task
			Command cm(DATA_COMMAND, EVENT_DEBUG_RX_COMPLETE);
 8001066:	f107 0308 	add.w	r3, r7, #8
 800106a:	2201      	movs	r2, #1
 800106c:	2102      	movs	r1, #2
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff fbdf 	bl	8000832 <_ZN7CommandC1E15GLOBAL_COMMANDSt>
			bool res = qEvtQueue->SendFromISR(cm);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f107 0208 	add.w	r2, r7, #8
 800107c:	4611      	mov	r1, r2
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff fd4c 	bl	8000b1c <_ZN5Queue11SendFromISRER7Command>
 8001084:	4603      	mov	r3, r0
 8001086:	75fb      	strb	r3, [r7, #23]

			// If we failed to send the event, we should reset the buffer, that way DebugTask doesn't stall
			if (res == false) {
 8001088:	7dfb      	ldrb	r3, [r7, #23]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d114      	bne.n	80010b8 <_ZN9DebugTask15InterruptRxDataEv+0x94>
				debugMsgIdx = 0;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2200      	movs	r2, #0
 8001092:	765a      	strb	r2, [r3, #25]
				isDebugMsgReady = false;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	769a      	strb	r2, [r3, #26]
			}
 800109a:	e00d      	b.n	80010b8 <_ZN9DebugTask15InterruptRxDataEv+0x94>
		}
		else {
			debugBuffer[debugMsgIdx++] = debugRxChar;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	7ed9      	ldrb	r1, [r3, #27]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	7e5b      	ldrb	r3, [r3, #25]
 80010a4:	1c5a      	adds	r2, r3, #1
 80010a6:	b2d0      	uxtb	r0, r2
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	7650      	strb	r0, [r2, #25]
 80010ac:	461a      	mov	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4413      	add	r3, r2
 80010b2:	460a      	mov	r2, r1
 80010b4:	721a      	strb	r2, [r3, #8]
 80010b6:	e000      	b.n	80010ba <_ZN9DebugTask15InterruptRxDataEv+0x96>
			}
 80010b8:	bf00      	nop
		}
	}

	//Re-arm the interrupt
	ReceiveData();
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff ffa0 	bl	8001000 <_ZN9DebugTask11ReceiveDataEv>
}
 80010c0:	bf00      	nop
 80010c2:	3718      	adds	r7, #24
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <_ZNK4Task13GetEventQueueEv>:
    Task(void);
    Task(uint16_t depth);

    void InitTask();

    Queue* GetEventQueue() const { return qEvtQueue; }
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	4618      	mov	r0, r3
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <_Z8run_mainv>:
 
/* Interface Functions ------------------------------------------------------------*/
/**
 * @brief Main function interface, called inside main.cpp before os initialization takes place.
*/
void run_main() {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
	// Init Tasks
	FlightTask::Inst().InitTask();
 80010e4:	f7ff fd9a 	bl	8000c1c <_ZN10FlightTask4InstEv>
 80010e8:	4603      	mov	r3, r0
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fdf4 	bl	8000cd8 <_ZN10FlightTask8InitTaskEv>
	UARTTask::Inst().InitTask();
 80010f0:	f7ff fa7c 	bl	80005ec <_ZN8UARTTask4InstEv>
 80010f4:	4603      	mov	r3, r0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff fabe 	bl	8000678 <_ZN8UARTTask8InitTaskEv>
	DebugTask::Inst().InitTask();
 80010fc:	f7ff fe3e 	bl	8000d7c <_ZN9DebugTask4InstEv>
 8001100:	4603      	mov	r3, r0
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff fea4 	bl	8000e50 <_ZN9DebugTask8InitTaskEv>

	// Print System Boot Info : Warning, don't queue more than 10 prints before scheduler starts
	SOAR_PRINT("\n-- AVIONICS CORE --\n");
 8001108:	480f      	ldr	r0, [pc, #60]	; (8001148 <_Z8run_mainv+0x68>)
 800110a:	f000 f829 	bl	8001160 <_Z5printPKcz>
	SOAR_PRINT("System Reset Reason: [TODO]\n"); //TODO: If we want a system reset reason we need to save it on flash
 800110e:	480f      	ldr	r0, [pc, #60]	; (800114c <_Z8run_mainv+0x6c>)
 8001110:	f000 f826 	bl	8001160 <_Z5printPKcz>
	SOAR_PRINT("Current System Heap Use: %d Bytes\n", xPortGetFreeHeapSize());
 8001114:	f007 fb46 	bl	80087a4 <xPortGetFreeHeapSize>
 8001118:	4603      	mov	r3, r0
 800111a:	4619      	mov	r1, r3
 800111c:	480c      	ldr	r0, [pc, #48]	; (8001150 <_Z8run_mainv+0x70>)
 800111e:	f000 f81f 	bl	8001160 <_Z5printPKcz>
	SOAR_PRINT("Lowest Ever Heap Size: %d Bytes\n\n", xPortGetMinimumEverFreeHeapSize());
 8001122:	f007 fb4b 	bl	80087bc <xPortGetMinimumEverFreeHeapSize>
 8001126:	4603      	mov	r3, r0
 8001128:	4619      	mov	r1, r3
 800112a:	480a      	ldr	r0, [pc, #40]	; (8001154 <_Z8run_mainv+0x74>)
 800112c:	f000 f818 	bl	8001160 <_Z5printPKcz>
	
	// Start the Scheduler
	// Guidelines:
	// - Be CAREFUL with race conditions after osKernelStart
	// - Recommended to not use new and delete after this point
    osKernelStart();
 8001130:	f005 f8d7 	bl	80062e2 <osKernelStart>

	// Should never reach here
	SOAR_ASSERT(false, "osKernelStart() failed");
 8001134:	4b08      	ldr	r3, [pc, #32]	; (8001158 <_Z8run_mainv+0x78>)
 8001136:	2231      	movs	r2, #49	; 0x31
 8001138:	4908      	ldr	r1, [pc, #32]	; (800115c <_Z8run_mainv+0x7c>)
 800113a:	2000      	movs	r0, #0
 800113c:	f000 f872 	bl	8001224 <_Z17soar_assert_debugbPKctS0_z>

	while (1)
	{
		osDelay(100);
 8001140:	2064      	movs	r0, #100	; 0x64
 8001142:	f005 f8d5 	bl	80062f0 <osDelay>
 8001146:	e7fb      	b.n	8001140 <_Z8run_mainv+0x60>
 8001148:	0800998c 	.word	0x0800998c
 800114c:	080099a4 	.word	0x080099a4
 8001150:	080099c4 	.word	0x080099c4
 8001154:	080099e8 	.word	0x080099e8
 8001158:	08009a0c 	.word	0x08009a0c
 800115c:	08009a24 	.word	0x08009a24

08001160 <_Z5printPKcz>:
* @brief Variadic print function, sends a command packet to the queue
* @param str String to print with printf style formatting
* @param ... Additional arguments to print if assertion fails, in same format as printf
*/
void print(const char* str, ...)
{
 8001160:	b40f      	push	{r0, r1, r2, r3}
 8001162:	b580      	push	{r7, lr}
 8001164:	b0b6      	sub	sp, #216	; 0xd8
 8001166:	af00      	add	r7, sp, #0
	//Try to take the VA list mutex
	if (Global::vaListMutex.Lock(DEBUG_TAKE_MAX_TIME_MS)) {
 8001168:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800116c:	482a      	ldr	r0, [pc, #168]	; (8001218 <_Z5printPKcz+0xb8>)
 800116e:	f7ff fc89 	bl	8000a84 <_ZN5Mutex4LockEm>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d042      	beq.n	80011fe <_Z5printPKcz+0x9e>
		// If we have a message, and can use VA list, extract the string into a new buffer, and null terminate it
		uint8_t str_buffer[DEBUG_PRINT_MAX_SIZE] = {};
 8001178:	2300      	movs	r3, #0
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	f107 0308 	add.w	r3, r7, #8
 8001180:	22bc      	movs	r2, #188	; 0xbc
 8001182:	2100      	movs	r1, #0
 8001184:	4618      	mov	r0, r3
 8001186:	f007 fc53 	bl	8008a30 <memset>
		va_list argument_list;
		va_start(argument_list, str);
 800118a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800118e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
		int16_t buflen = vsnprintf(reinterpret_cast<char*>(str_buffer), sizeof(str_buffer) - 1, str, argument_list);
 8001192:	1d38      	adds	r0, r7, #4
 8001194:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001198:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800119c:	21bf      	movs	r1, #191	; 0xbf
 800119e:	f007 fe4d 	bl	8008e3c <vsniprintf>
 80011a2:	4603      	mov	r3, r0
 80011a4:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
		va_end(argument_list);
		if (buflen > 0) {
 80011a8:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	dd06      	ble.n	80011be <_Z5printPKcz+0x5e>
			str_buffer[buflen] = '\0';
 80011b0:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 80011b4:	33d8      	adds	r3, #216	; 0xd8
 80011b6:	443b      	add	r3, r7
 80011b8:	2200      	movs	r2, #0
 80011ba:	f803 2cd4 	strb.w	r2, [r3, #-212]
		}

		// Release the VA List Mutex
		Global::vaListMutex.Unlock();
 80011be:	4816      	ldr	r0, [pc, #88]	; (8001218 <_Z5printPKcz+0xb8>)
 80011c0:	f7ff fc80 	bl	8000ac4 <_ZN5Mutex6UnlockEv>

		//Generate a command
		Command cmd(DATA_COMMAND, (uint16_t)UART_TASK_COMMAND_SEND_DEBUG); // Set the UART channel to send data on
 80011c4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80011c8:	2201      	movs	r2, #1
 80011ca:	2102      	movs	r1, #2
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff fb30 	bl	8000832 <_ZN7CommandC1E15GLOBAL_COMMANDSt>
		
		//Copy data into the command
		cmd.CopyDataToCommand(str_buffer, buflen);
 80011d2:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	; 0xd6
 80011d6:	1d39      	adds	r1, r7, #4
 80011d8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff fb81 	bl	80008e4 <_ZN7Command17CopyDataToCommandEPht>
			
		//Send this packet off to the UART Task
		UARTTask::Inst().GetEventQueue()->Send(cmd);
 80011e2:	f7ff fa03 	bl	80005ec <_ZN8UARTTask4InstEv>
 80011e6:	4603      	mov	r3, r0
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff ff6d 	bl	80010c8 <_ZNK4Task13GetEventQueueEv>
 80011ee:	4602      	mov	r2, r0
 80011f0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80011f4:	4619      	mov	r1, r3
 80011f6:	4610      	mov	r0, r2
 80011f8:	f7ff fcae 	bl	8000b58 <_ZN5Queue4SendER7Command>
	else
	{
		//TODO: Print out that we could not acquire the VA list mutex
		SOAR_ASSERT(false, "Could not acquire VA_LIST mutex");
	}
}
 80011fc:	e005      	b.n	800120a <_Z5printPKcz+0xaa>
		SOAR_ASSERT(false, "Could not acquire VA_LIST mutex");
 80011fe:	4b07      	ldr	r3, [pc, #28]	; (800121c <_Z5printPKcz+0xbc>)
 8001200:	2266      	movs	r2, #102	; 0x66
 8001202:	4907      	ldr	r1, [pc, #28]	; (8001220 <_Z5printPKcz+0xc0>)
 8001204:	2000      	movs	r0, #0
 8001206:	f000 f80d 	bl	8001224 <_Z17soar_assert_debugbPKctS0_z>
}
 800120a:	bf00      	nop
 800120c:	37d8      	adds	r7, #216	; 0xd8
 800120e:	46bd      	mov	sp, r7
 8001210:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001214:	b004      	add	sp, #16
 8001216:	4770      	bx	lr
 8001218:	200000cc 	.word	0x200000cc
 800121c:	08009a60 	.word	0x08009a60
 8001220:	08009a24 	.word	0x08009a24

08001224 <_Z17soar_assert_debugbPKctS0_z>:
 * @param file File that the assertion is in (__FILE__)
 * @param line Line number that the assertion is on (__LINE__)
 * @param str Optional message to print if assertion fails. Must be less than 192 characters AFTER formatting
 * @param ... Additional arguments to print if assertion fails, in same format as printf
 */
void soar_assert_debug(bool condition, const char* file, const uint16_t line, const char* str, ...) {
 8001224:	b408      	push	{r3}
 8001226:	b580      	push	{r7, lr}
 8001228:	b0d9      	sub	sp, #356	; 0x164
 800122a:	af02      	add	r7, sp, #8
 800122c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001230:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001234:	6019      	str	r1, [r3, #0]
 8001236:	4611      	mov	r1, r2
 8001238:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800123c:	f2a3 1351 	subw	r3, r3, #337	; 0x151
 8001240:	4602      	mov	r2, r0
 8001242:	701a      	strb	r2, [r3, #0]
 8001244:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001248:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800124c:	460a      	mov	r2, r1
 800124e:	801a      	strh	r2, [r3, #0]
	// If assertion succeeds, do nothing
	if (condition) {
 8001250:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001254:	f2a3 1351 	subw	r3, r3, #337	; 0x151
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b00      	cmp	r3, #0
 800125c:	f040 8092 	bne.w	8001384 <_Z17soar_assert_debugbPKctS0_z+0x160>
		return;
	}

	bool printMessage = false;
 8001260:	2300      	movs	r3, #0
 8001262:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157

	// NOTE: Be careful! If va_list funcs while RTOS is active ALL calls to any vsnprint functions MUST have a mutex lock/unlock
	// NOTE: https://nadler.com/embedded/newlibAndFreeRTOS.html

	// We have an assert fail, we try to take control of the Debug semaphore, and then suspend all other parts of the system
	if (Global::vaListMutex.Lock(ASSERT_TAKE_MAX_TIME_MS)) {
 8001266:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800126a:	484a      	ldr	r0, [pc, #296]	; (8001394 <_Z17soar_assert_debugbPKctS0_z+0x170>)
 800126c:	f7ff fc0a 	bl	8000a84 <_ZN5Mutex4LockEm>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d002      	beq.n	800127c <_Z17soar_assert_debugbPKctS0_z+0x58>
		// We have the mutex, we can now safely print the message
		printMessage = true;
 8001276:	2301      	movs	r3, #1
 8001278:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
	}
	
	vTaskSuspendAll();
 800127c:	f006 f938 	bl	80074f0 <vTaskSuspendAll>

	//If we have the vaListMutex, we can safely use vsnprintf
	if (printMessage) {
 8001280:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8001284:	2b00      	cmp	r3, #0
 8001286:	d072      	beq.n	800136e <_Z17soar_assert_debugbPKctS0_z+0x14a>
		// Print out the assertion header through the supported interface, we don't have a UART task running, so we directly use HAL
		uint8_t header_buf[ASSERT_BUFFER_MAX_SIZE] = {};
 8001288:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800128c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	3304      	adds	r3, #4
 8001296:	229c      	movs	r2, #156	; 0x9c
 8001298:	2100      	movs	r1, #0
 800129a:	4618      	mov	r0, r3
 800129c:	f007 fbc8 	bl	8008a30 <memset>
		int16_t res = snprintf(reinterpret_cast<char*>(header_buf), ASSERT_BUFFER_MAX_SIZE - 1, "\r\n\n-- ASSERTION FAILED --\r\nFile [%s] @ Line # [%d]\r\n", file, line);
 80012a0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80012a4:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80012a8:	881a      	ldrh	r2, [r3, #0]
 80012aa:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80012ae:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80012b2:	f107 000c 	add.w	r0, r7, #12
 80012b6:	9200      	str	r2, [sp, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a37      	ldr	r2, [pc, #220]	; (8001398 <_Z17soar_assert_debugbPKctS0_z+0x174>)
 80012bc:	219f      	movs	r1, #159	; 0x9f
 80012be:	f007 fd5d 	bl	8008d7c <sniprintf>
 80012c2:	4603      	mov	r3, r0
 80012c4:	f8a7 3154 	strh.w	r3, [r7, #340]	; 0x154
		if (res < 0) {
 80012c8:	f9b7 3154 	ldrsh.w	r3, [r7, #340]	; 0x154
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	da0a      	bge.n	80012e6 <_Z17soar_assert_debugbPKctS0_z+0xc2>
			// If we failed to generate the header, just format the line number
			snprintf(reinterpret_cast<char*>(header_buf), ASSERT_BUFFER_MAX_SIZE - 1, "\r\n\n-- ASSERTION FAILED --\r\nFile [PATH_TOO_LONG] @ Line # [%d]\r\n", line);
 80012d0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80012d4:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80012d8:	881b      	ldrh	r3, [r3, #0]
 80012da:	f107 000c 	add.w	r0, r7, #12
 80012de:	4a2f      	ldr	r2, [pc, #188]	; (800139c <_Z17soar_assert_debugbPKctS0_z+0x178>)
 80012e0:	219f      	movs	r1, #159	; 0x9f
 80012e2:	f007 fd4b 	bl	8008d7c <sniprintf>
		}

		// Output the header to the debug port
		HAL_UART_Transmit(DEFAULT_ASSERT_UART_HANDLE, header_buf, strlen(reinterpret_cast<char*>(header_buf)), ASSERT_SEND_MAX_TIME_MS);
 80012e6:	f107 030c 	add.w	r3, r7, #12
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7fe ff7a 	bl	80001e4 <strlen>
 80012f0:	4603      	mov	r3, r0
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	f107 010c 	add.w	r1, r7, #12
 80012f8:	23fa      	movs	r3, #250	; 0xfa
 80012fa:	4829      	ldr	r0, [pc, #164]	; (80013a0 <_Z17soar_assert_debugbPKctS0_z+0x17c>)
 80012fc:	f004 f860 	bl	80053c0 <HAL_UART_Transmit>

		// If we have a message, and can use VA list, extract the string into a new buffer, and null terminate it
		if (printMessage && str != nullptr) {
 8001300:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8001304:	2b00      	cmp	r3, #0
 8001306:	d038      	beq.n	800137a <_Z17soar_assert_debugbPKctS0_z+0x156>
 8001308:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800130c:	2b00      	cmp	r3, #0
 800130e:	d034      	beq.n	800137a <_Z17soar_assert_debugbPKctS0_z+0x156>
			uint8_t str_buffer[ASSERT_BUFFER_MAX_SIZE] = {};
 8001310:	2300      	movs	r3, #0
 8001312:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001316:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800131a:	229c      	movs	r2, #156	; 0x9c
 800131c:	2100      	movs	r1, #0
 800131e:	4618      	mov	r0, r3
 8001320:	f007 fb86 	bl	8008a30 <memset>
			va_list argument_list;
			va_start(argument_list, str);
 8001324:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001328:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
			int16_t buflen = vsnprintf(reinterpret_cast<char*>(str_buffer), sizeof(str_buffer) - 1, str, argument_list);
 800132c:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8001330:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001334:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8001338:	219f      	movs	r1, #159	; 0x9f
 800133a:	f007 fd7f 	bl	8008e3c <vsniprintf>
 800133e:	4603      	mov	r3, r0
 8001340:	f8a7 3152 	strh.w	r3, [r7, #338]	; 0x152
			va_end(argument_list);
			if (buflen > 0) {
 8001344:	f9b7 3152 	ldrsh.w	r3, [r7, #338]	; 0x152
 8001348:	2b00      	cmp	r3, #0
 800134a:	dd16      	ble.n	800137a <_Z17soar_assert_debugbPKctS0_z+0x156>
				str_buffer[buflen] = '\0';
 800134c:	f9b7 3152 	ldrsh.w	r3, [r7, #338]	; 0x152
 8001350:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8001354:	443b      	add	r3, r7
 8001356:	2200      	movs	r2, #0
 8001358:	f803 2cac 	strb.w	r2, [r3, #-172]
				HAL_UART_Transmit(DEFAULT_ASSERT_UART_HANDLE, str_buffer, buflen, ASSERT_SEND_MAX_TIME_MS);
 800135c:	f8b7 2152 	ldrh.w	r2, [r7, #338]	; 0x152
 8001360:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 8001364:	23fa      	movs	r3, #250	; 0xfa
 8001366:	480e      	ldr	r0, [pc, #56]	; (80013a0 <_Z17soar_assert_debugbPKctS0_z+0x17c>)
 8001368:	f004 f82a 	bl	80053c0 <HAL_UART_Transmit>
 800136c:	e005      	b.n	800137a <_Z17soar_assert_debugbPKctS0_z+0x156>
			}
		}
	}
	else {
		//TODO: Should manually print out the assertion header
		HAL_UART_Transmit(DEFAULT_ASSERT_UART_HANDLE, (uint8_t*)"-- ASSERTION FAILED --\r\nCould not acquire vaListMutex\r\n", 55, ASSERT_SEND_MAX_TIME_MS);
 800136e:	23fa      	movs	r3, #250	; 0xfa
 8001370:	2237      	movs	r2, #55	; 0x37
 8001372:	490c      	ldr	r1, [pc, #48]	; (80013a4 <_Z17soar_assert_debugbPKctS0_z+0x180>)
 8001374:	480a      	ldr	r0, [pc, #40]	; (80013a0 <_Z17soar_assert_debugbPKctS0_z+0x17c>)
 8001376:	f004 f823 	bl	80053c0 <HAL_UART_Transmit>
	}

	HAL_NVIC_SystemReset();
 800137a:	f001 ff32 	bl	80031e2 <HAL_NVIC_SystemReset>

	// We should not reach this code, but if we do, we should resume the scheduler
	xTaskResumeAll();
 800137e:	f006 f8c5 	bl	800750c <xTaskResumeAll>
 8001382:	e000      	b.n	8001386 <_Z17soar_assert_debugbPKctS0_z+0x162>
		return;
 8001384:	bf00      	nop
}
 8001386:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 800138a:	46bd      	mov	sp, r7
 800138c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001390:	b001      	add	sp, #4
 8001392:	4770      	bx	lr
 8001394:	200000cc 	.word	0x200000cc
 8001398:	08009a80 	.word	0x08009a80
 800139c:	08009ab8 	.word	0x08009ab8
 80013a0:	200005ec 	.word	0x200005ec
 80013a4:	08009af8 	.word	0x08009af8

080013a8 <_Z41__static_initialization_and_destruction_0ii>:
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d107      	bne.n	80013c8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013be:	4293      	cmp	r3, r2
 80013c0:	d102      	bne.n	80013c8 <_Z41__static_initialization_and_destruction_0ii+0x20>
Mutex Global::vaListMutex;
 80013c2:	4809      	ldr	r0, [pc, #36]	; (80013e8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80013c4:	f7ff fb32 	bl	8000a2c <_ZN5MutexC1Ev>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d107      	bne.n	80013de <_Z41__static_initialization_and_destruction_0ii+0x36>
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d102      	bne.n	80013de <_Z41__static_initialization_and_destruction_0ii+0x36>
 80013d8:	4803      	ldr	r0, [pc, #12]	; (80013e8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80013da:	f7ff fb45 	bl	8000a68 <_ZN5MutexD1Ev>
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	200000cc 	.word	0x200000cc

080013ec <_GLOBAL__sub_I__ZN6Global11vaListMutexE>:
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80013f4:	2001      	movs	r0, #1
 80013f6:	f7ff ffd7 	bl	80013a8 <_Z41__static_initialization_and_destruction_0ii>
 80013fa:	bd80      	pop	{r7, pc}

080013fc <_GLOBAL__sub_D__ZN6Global11vaListMutexE>:
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
 8001400:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001404:	2000      	movs	r0, #0
 8001406:	f7ff ffcf 	bl	80013a8 <_Z41__static_initialization_and_destruction_0ii>
 800140a:	bd80      	pop	{r7, pc}

0800140c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	4a07      	ldr	r2, [pc, #28]	; (8001438 <vApplicationGetIdleTaskMemory+0x2c>)
 800141c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	4a06      	ldr	r2, [pc, #24]	; (800143c <vApplicationGetIdleTaskMemory+0x30>)
 8001422:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2280      	movs	r2, #128	; 0x80
 8001428:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800142a:	bf00      	nop
 800142c:	3714      	adds	r7, #20
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	200000d0 	.word	0x200000d0
 800143c:	20000184 	.word	0x20000184

08001440 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001444:	f000 fee7 	bl	8002216 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001448:	f000 f817 	bl	800147a <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800144c:	f000 fa64 	bl	8001918 <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 8001450:	f000 f868 	bl	8001524 <_ZL12MX_ADC1_Initv>
  MX_I2C1_Init();
 8001454:	f000 f8fc 	bl	8001650 <_ZL12MX_I2C1_Initv>
  MX_LPUART1_UART_Init();
 8001458:	f000 f948 	bl	80016ec <_ZL20MX_LPUART1_UART_Initv>
  MX_USART1_UART_Init();
 800145c:	f000 f97a 	bl	8001754 <_ZL19MX_USART1_UART_Initv>
  MX_USART2_UART_Init();
 8001460:	f000 f9ac 	bl	80017bc <_ZL19MX_USART2_UART_Initv>
  MX_USART3_UART_Init();
 8001464:	f000 f9de 	bl	8001824 <_ZL19MX_USART3_UART_Initv>
  MX_SPI2_Init();
 8001468:	f000 fa14 	bl	8001894 <_ZL12MX_SPI2_Initv>
  MX_CRC_Init();
 800146c:	f000 f8c8 	bl	8001600 <_ZL11MX_CRC_Initv>
  /* USER CODE BEGIN 2 */

  run_main();
 8001470:	f7ff fe36 	bl	80010e0 <_Z8run_mainv>
    /* USER CODE BEGIN 3 */
  }

#endif
  /* USER CODE END 3 */
}
 8001474:	2300      	movs	r3, #0
 8001476:	4618      	mov	r0, r3
 8001478:	bd80      	pop	{r7, pc}

0800147a <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b096      	sub	sp, #88	; 0x58
 800147e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001480:	f107 0314 	add.w	r3, r7, #20
 8001484:	2244      	movs	r2, #68	; 0x44
 8001486:	2100      	movs	r1, #0
 8001488:	4618      	mov	r0, r3
 800148a:	f007 fad1 	bl	8008a30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800148e:	463b      	mov	r3, r7
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800149c:	f44f 7000 	mov.w	r0, #512	; 0x200
 80014a0:	f002 fa54 	bl	800394c <HAL_PWREx_ControlVoltageScaling>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	bf14      	ite	ne
 80014aa:	2301      	movne	r3, #1
 80014ac:	2300      	moveq	r3, #0
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 80014b4:	f000 fad4 	bl	8001a60 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80014b8:	2310      	movs	r3, #16
 80014ba:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80014bc:	2301      	movs	r3, #1
 80014be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80014c4:	2360      	movs	r3, #96	; 0x60
 80014c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014c8:	2300      	movs	r3, #0
 80014ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014cc:	f107 0314 	add.w	r3, r7, #20
 80014d0:	4618      	mov	r0, r3
 80014d2:	f002 fa91 	bl	80039f8 <HAL_RCC_OscConfig>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	bf14      	ite	ne
 80014dc:	2301      	movne	r3, #1
 80014de:	2300      	moveq	r3, #0
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 80014e6:	f000 fabb 	bl	8001a60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014ea:	230f      	movs	r3, #15
 80014ec:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80014ee:	2300      	movs	r3, #0
 80014f0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014f2:	2300      	movs	r3, #0
 80014f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014f6:	2300      	movs	r3, #0
 80014f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014fa:	2300      	movs	r3, #0
 80014fc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014fe:	463b      	mov	r3, r7
 8001500:	2100      	movs	r1, #0
 8001502:	4618      	mov	r0, r3
 8001504:	f002 fe8c 	bl	8004220 <HAL_RCC_ClockConfig>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	bf14      	ite	ne
 800150e:	2301      	movne	r3, #1
 8001510:	2300      	moveq	r3, #0
 8001512:	b2db      	uxtb	r3, r3
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8001518:	f000 faa2 	bl	8001a60 <Error_Handler>
  }
}
 800151c:	bf00      	nop
 800151e:	3758      	adds	r7, #88	; 0x58
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800152a:	463b      	mov	r3, r7
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]
 8001538:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800153a:	4b2e      	ldr	r3, [pc, #184]	; (80015f4 <_ZL12MX_ADC1_Initv+0xd0>)
 800153c:	4a2e      	ldr	r2, [pc, #184]	; (80015f8 <_ZL12MX_ADC1_Initv+0xd4>)
 800153e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001540:	4b2c      	ldr	r3, [pc, #176]	; (80015f4 <_ZL12MX_ADC1_Initv+0xd0>)
 8001542:	2200      	movs	r2, #0
 8001544:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001546:	4b2b      	ldr	r3, [pc, #172]	; (80015f4 <_ZL12MX_ADC1_Initv+0xd0>)
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800154c:	4b29      	ldr	r3, [pc, #164]	; (80015f4 <_ZL12MX_ADC1_Initv+0xd0>)
 800154e:	2200      	movs	r2, #0
 8001550:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001552:	4b28      	ldr	r3, [pc, #160]	; (80015f4 <_ZL12MX_ADC1_Initv+0xd0>)
 8001554:	2200      	movs	r2, #0
 8001556:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001558:	4b26      	ldr	r3, [pc, #152]	; (80015f4 <_ZL12MX_ADC1_Initv+0xd0>)
 800155a:	2204      	movs	r2, #4
 800155c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800155e:	4b25      	ldr	r3, [pc, #148]	; (80015f4 <_ZL12MX_ADC1_Initv+0xd0>)
 8001560:	2200      	movs	r2, #0
 8001562:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001564:	4b23      	ldr	r3, [pc, #140]	; (80015f4 <_ZL12MX_ADC1_Initv+0xd0>)
 8001566:	2200      	movs	r2, #0
 8001568:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800156a:	4b22      	ldr	r3, [pc, #136]	; (80015f4 <_ZL12MX_ADC1_Initv+0xd0>)
 800156c:	2201      	movs	r2, #1
 800156e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001570:	4b20      	ldr	r3, [pc, #128]	; (80015f4 <_ZL12MX_ADC1_Initv+0xd0>)
 8001572:	2200      	movs	r2, #0
 8001574:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001578:	4b1e      	ldr	r3, [pc, #120]	; (80015f4 <_ZL12MX_ADC1_Initv+0xd0>)
 800157a:	2200      	movs	r2, #0
 800157c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800157e:	4b1d      	ldr	r3, [pc, #116]	; (80015f4 <_ZL12MX_ADC1_Initv+0xd0>)
 8001580:	2200      	movs	r2, #0
 8001582:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001584:	4b1b      	ldr	r3, [pc, #108]	; (80015f4 <_ZL12MX_ADC1_Initv+0xd0>)
 8001586:	2200      	movs	r2, #0
 8001588:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800158c:	4b19      	ldr	r3, [pc, #100]	; (80015f4 <_ZL12MX_ADC1_Initv+0xd0>)
 800158e:	2200      	movs	r2, #0
 8001590:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001592:	4b18      	ldr	r3, [pc, #96]	; (80015f4 <_ZL12MX_ADC1_Initv+0xd0>)
 8001594:	2200      	movs	r2, #0
 8001596:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800159a:	4816      	ldr	r0, [pc, #88]	; (80015f4 <_ZL12MX_ADC1_Initv+0xd0>)
 800159c:	f001 f800 	bl	80025a0 <HAL_ADC_Init>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	bf14      	ite	ne
 80015a6:	2301      	movne	r3, #1
 80015a8:	2300      	moveq	r3, #0
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <_ZL12MX_ADC1_Initv+0x90>
  {
    Error_Handler();
 80015b0:	f000 fa56 	bl	8001a60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015b4:	4b11      	ldr	r3, [pc, #68]	; (80015fc <_ZL12MX_ADC1_Initv+0xd8>)
 80015b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015b8:	2306      	movs	r3, #6
 80015ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80015bc:	2300      	movs	r3, #0
 80015be:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80015c0:	237f      	movs	r3, #127	; 0x7f
 80015c2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015c4:	2304      	movs	r3, #4
 80015c6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015cc:	463b      	mov	r3, r7
 80015ce:	4619      	mov	r1, r3
 80015d0:	4808      	ldr	r0, [pc, #32]	; (80015f4 <_ZL12MX_ADC1_Initv+0xd0>)
 80015d2:	f001 f92d 	bl	8002830 <HAL_ADC_ConfigChannel>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	bf14      	ite	ne
 80015dc:	2301      	movne	r3, #1
 80015de:	2300      	moveq	r3, #0
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <_ZL12MX_ADC1_Initv+0xc6>
  {
    Error_Handler();
 80015e6:	f000 fa3b 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015ea:	bf00      	nop
 80015ec:	3718      	adds	r7, #24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20000384 	.word	0x20000384
 80015f8:	50040000 	.word	0x50040000
 80015fc:	04300002 	.word	0x04300002

08001600 <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001604:	4b10      	ldr	r3, [pc, #64]	; (8001648 <_ZL11MX_CRC_Initv+0x48>)
 8001606:	4a11      	ldr	r2, [pc, #68]	; (800164c <_ZL11MX_CRC_Initv+0x4c>)
 8001608:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800160a:	4b0f      	ldr	r3, [pc, #60]	; (8001648 <_ZL11MX_CRC_Initv+0x48>)
 800160c:	2200      	movs	r2, #0
 800160e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001610:	4b0d      	ldr	r3, [pc, #52]	; (8001648 <_ZL11MX_CRC_Initv+0x48>)
 8001612:	2200      	movs	r2, #0
 8001614:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001616:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <_ZL11MX_CRC_Initv+0x48>)
 8001618:	2200      	movs	r2, #0
 800161a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800161c:	4b0a      	ldr	r3, [pc, #40]	; (8001648 <_ZL11MX_CRC_Initv+0x48>)
 800161e:	2200      	movs	r2, #0
 8001620:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001622:	4b09      	ldr	r3, [pc, #36]	; (8001648 <_ZL11MX_CRC_Initv+0x48>)
 8001624:	2201      	movs	r2, #1
 8001626:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001628:	4807      	ldr	r0, [pc, #28]	; (8001648 <_ZL11MX_CRC_Initv+0x48>)
 800162a:	f001 fddf 	bl	80031ec <HAL_CRC_Init>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	bf14      	ite	ne
 8001634:	2301      	movne	r3, #1
 8001636:	2300      	moveq	r3, #0
 8001638:	b2db      	uxtb	r3, r3
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <_ZL11MX_CRC_Initv+0x42>
  {
    Error_Handler();
 800163e:	f000 fa0f 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	200003e8 	.word	0x200003e8
 800164c:	40023000 	.word	0x40023000

08001650 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001654:	4b23      	ldr	r3, [pc, #140]	; (80016e4 <_ZL12MX_I2C1_Initv+0x94>)
 8001656:	4a24      	ldr	r2, [pc, #144]	; (80016e8 <_ZL12MX_I2C1_Initv+0x98>)
 8001658:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 800165a:	4b22      	ldr	r3, [pc, #136]	; (80016e4 <_ZL12MX_I2C1_Initv+0x94>)
 800165c:	f640 6214 	movw	r2, #3604	; 0xe14
 8001660:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001662:	4b20      	ldr	r3, [pc, #128]	; (80016e4 <_ZL12MX_I2C1_Initv+0x94>)
 8001664:	2200      	movs	r2, #0
 8001666:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001668:	4b1e      	ldr	r3, [pc, #120]	; (80016e4 <_ZL12MX_I2C1_Initv+0x94>)
 800166a:	2201      	movs	r2, #1
 800166c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800166e:	4b1d      	ldr	r3, [pc, #116]	; (80016e4 <_ZL12MX_I2C1_Initv+0x94>)
 8001670:	2200      	movs	r2, #0
 8001672:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001674:	4b1b      	ldr	r3, [pc, #108]	; (80016e4 <_ZL12MX_I2C1_Initv+0x94>)
 8001676:	2200      	movs	r2, #0
 8001678:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800167a:	4b1a      	ldr	r3, [pc, #104]	; (80016e4 <_ZL12MX_I2C1_Initv+0x94>)
 800167c:	2200      	movs	r2, #0
 800167e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001680:	4b18      	ldr	r3, [pc, #96]	; (80016e4 <_ZL12MX_I2C1_Initv+0x94>)
 8001682:	2200      	movs	r2, #0
 8001684:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001686:	4b17      	ldr	r3, [pc, #92]	; (80016e4 <_ZL12MX_I2C1_Initv+0x94>)
 8001688:	2200      	movs	r2, #0
 800168a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800168c:	4815      	ldr	r0, [pc, #84]	; (80016e4 <_ZL12MX_I2C1_Initv+0x94>)
 800168e:	f002 f829 	bl	80036e4 <HAL_I2C_Init>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	bf14      	ite	ne
 8001698:	2301      	movne	r3, #1
 800169a:	2300      	moveq	r3, #0
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 80016a2:	f000 f9dd 	bl	8001a60 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016a6:	2100      	movs	r1, #0
 80016a8:	480e      	ldr	r0, [pc, #56]	; (80016e4 <_ZL12MX_I2C1_Initv+0x94>)
 80016aa:	f002 f8aa 	bl	8003802 <HAL_I2CEx_ConfigAnalogFilter>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	bf14      	ite	ne
 80016b4:	2301      	movne	r3, #1
 80016b6:	2300      	moveq	r3, #0
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <_ZL12MX_I2C1_Initv+0x72>
  {
    Error_Handler();
 80016be:	f000 f9cf 	bl	8001a60 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016c2:	2100      	movs	r1, #0
 80016c4:	4807      	ldr	r0, [pc, #28]	; (80016e4 <_ZL12MX_I2C1_Initv+0x94>)
 80016c6:	f002 f8e7 	bl	8003898 <HAL_I2CEx_ConfigDigitalFilter>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	bf14      	ite	ne
 80016d0:	2301      	movne	r3, #1
 80016d2:	2300      	moveq	r3, #0
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <_ZL12MX_I2C1_Initv+0x8e>
  {
    Error_Handler();
 80016da:	f000 f9c1 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	2000040c 	.word	0x2000040c
 80016e8:	40005400 	.word	0x40005400

080016ec <_ZL20MX_LPUART1_UART_Initv>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80016f0:	4b15      	ldr	r3, [pc, #84]	; (8001748 <_ZL20MX_LPUART1_UART_Initv+0x5c>)
 80016f2:	4a16      	ldr	r2, [pc, #88]	; (800174c <_ZL20MX_LPUART1_UART_Initv+0x60>)
 80016f4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80016f6:	4b14      	ldr	r3, [pc, #80]	; (8001748 <_ZL20MX_LPUART1_UART_Initv+0x5c>)
 80016f8:	4a15      	ldr	r2, [pc, #84]	; (8001750 <_ZL20MX_LPUART1_UART_Initv+0x64>)
 80016fa:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 80016fc:	4b12      	ldr	r3, [pc, #72]	; (8001748 <_ZL20MX_LPUART1_UART_Initv+0x5c>)
 80016fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001702:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001704:	4b10      	ldr	r3, [pc, #64]	; (8001748 <_ZL20MX_LPUART1_UART_Initv+0x5c>)
 8001706:	2200      	movs	r2, #0
 8001708:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800170a:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <_ZL20MX_LPUART1_UART_Initv+0x5c>)
 800170c:	2200      	movs	r2, #0
 800170e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001710:	4b0d      	ldr	r3, [pc, #52]	; (8001748 <_ZL20MX_LPUART1_UART_Initv+0x5c>)
 8001712:	220c      	movs	r2, #12
 8001714:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001716:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <_ZL20MX_LPUART1_UART_Initv+0x5c>)
 8001718:	2200      	movs	r2, #0
 800171a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800171c:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <_ZL20MX_LPUART1_UART_Initv+0x5c>)
 800171e:	2200      	movs	r2, #0
 8001720:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001722:	4b09      	ldr	r3, [pc, #36]	; (8001748 <_ZL20MX_LPUART1_UART_Initv+0x5c>)
 8001724:	2200      	movs	r2, #0
 8001726:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001728:	4807      	ldr	r0, [pc, #28]	; (8001748 <_ZL20MX_LPUART1_UART_Initv+0x5c>)
 800172a:	f003 fdfb 	bl	8005324 <HAL_UART_Init>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	bf14      	ite	ne
 8001734:	2301      	movne	r3, #1
 8001736:	2300      	moveq	r3, #0
 8001738:	b2db      	uxtb	r3, r3
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <_ZL20MX_LPUART1_UART_Initv+0x56>
  {
    Error_Handler();
 800173e:	f000 f98f 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000460 	.word	0x20000460
 800174c:	40008000 	.word	0x40008000
 8001750:	00033324 	.word	0x00033324

08001754 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001758:	4b16      	ldr	r3, [pc, #88]	; (80017b4 <_ZL19MX_USART1_UART_Initv+0x60>)
 800175a:	4a17      	ldr	r2, [pc, #92]	; (80017b8 <_ZL19MX_USART1_UART_Initv+0x64>)
 800175c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800175e:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001760:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001764:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001766:	4b13      	ldr	r3, [pc, #76]	; (80017b4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001768:	2200      	movs	r2, #0
 800176a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800176c:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <_ZL19MX_USART1_UART_Initv+0x60>)
 800176e:	2200      	movs	r2, #0
 8001770:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001772:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001774:	2200      	movs	r2, #0
 8001776:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001778:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <_ZL19MX_USART1_UART_Initv+0x60>)
 800177a:	220c      	movs	r2, #12
 800177c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800177e:	4b0d      	ldr	r3, [pc, #52]	; (80017b4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001780:	2200      	movs	r2, #0
 8001782:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001784:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001786:	2200      	movs	r2, #0
 8001788:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800178a:	4b0a      	ldr	r3, [pc, #40]	; (80017b4 <_ZL19MX_USART1_UART_Initv+0x60>)
 800178c:	2200      	movs	r2, #0
 800178e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001790:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001792:	2200      	movs	r2, #0
 8001794:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001796:	4807      	ldr	r0, [pc, #28]	; (80017b4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001798:	f003 fdc4 	bl	8005324 <HAL_UART_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	bf14      	ite	ne
 80017a2:	2301      	movne	r3, #1
 80017a4:	2300      	moveq	r3, #0
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 80017ac:	f000 f958 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017b0:	bf00      	nop
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	200004e4 	.word	0x200004e4
 80017b8:	40013800 	.word	0x40013800

080017bc <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017c0:	4b16      	ldr	r3, [pc, #88]	; (800181c <_ZL19MX_USART2_UART_Initv+0x60>)
 80017c2:	4a17      	ldr	r2, [pc, #92]	; (8001820 <_ZL19MX_USART2_UART_Initv+0x64>)
 80017c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017c6:	4b15      	ldr	r3, [pc, #84]	; (800181c <_ZL19MX_USART2_UART_Initv+0x60>)
 80017c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017ce:	4b13      	ldr	r3, [pc, #76]	; (800181c <_ZL19MX_USART2_UART_Initv+0x60>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017d4:	4b11      	ldr	r3, [pc, #68]	; (800181c <_ZL19MX_USART2_UART_Initv+0x60>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017da:	4b10      	ldr	r3, [pc, #64]	; (800181c <_ZL19MX_USART2_UART_Initv+0x60>)
 80017dc:	2200      	movs	r2, #0
 80017de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017e0:	4b0e      	ldr	r3, [pc, #56]	; (800181c <_ZL19MX_USART2_UART_Initv+0x60>)
 80017e2:	220c      	movs	r2, #12
 80017e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017e6:	4b0d      	ldr	r3, [pc, #52]	; (800181c <_ZL19MX_USART2_UART_Initv+0x60>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017ec:	4b0b      	ldr	r3, [pc, #44]	; (800181c <_ZL19MX_USART2_UART_Initv+0x60>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017f2:	4b0a      	ldr	r3, [pc, #40]	; (800181c <_ZL19MX_USART2_UART_Initv+0x60>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017f8:	4b08      	ldr	r3, [pc, #32]	; (800181c <_ZL19MX_USART2_UART_Initv+0x60>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017fe:	4807      	ldr	r0, [pc, #28]	; (800181c <_ZL19MX_USART2_UART_Initv+0x60>)
 8001800:	f003 fd90 	bl	8005324 <HAL_UART_Init>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	bf14      	ite	ne
 800180a:	2301      	movne	r3, #1
 800180c:	2300      	moveq	r3, #0
 800180e:	b2db      	uxtb	r3, r3
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 8001814:	f000 f924 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001818:	bf00      	nop
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20000568 	.word	0x20000568
 8001820:	40004400 	.word	0x40004400

08001824 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001828:	4b18      	ldr	r3, [pc, #96]	; (800188c <_ZL19MX_USART3_UART_Initv+0x68>)
 800182a:	4a19      	ldr	r2, [pc, #100]	; (8001890 <_ZL19MX_USART3_UART_Initv+0x6c>)
 800182c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800182e:	4b17      	ldr	r3, [pc, #92]	; (800188c <_ZL19MX_USART3_UART_Initv+0x68>)
 8001830:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001834:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001836:	4b15      	ldr	r3, [pc, #84]	; (800188c <_ZL19MX_USART3_UART_Initv+0x68>)
 8001838:	2200      	movs	r2, #0
 800183a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800183c:	4b13      	ldr	r3, [pc, #76]	; (800188c <_ZL19MX_USART3_UART_Initv+0x68>)
 800183e:	2200      	movs	r2, #0
 8001840:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001842:	4b12      	ldr	r3, [pc, #72]	; (800188c <_ZL19MX_USART3_UART_Initv+0x68>)
 8001844:	2200      	movs	r2, #0
 8001846:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001848:	4b10      	ldr	r3, [pc, #64]	; (800188c <_ZL19MX_USART3_UART_Initv+0x68>)
 800184a:	220c      	movs	r2, #12
 800184c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800184e:	4b0f      	ldr	r3, [pc, #60]	; (800188c <_ZL19MX_USART3_UART_Initv+0x68>)
 8001850:	2200      	movs	r2, #0
 8001852:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001854:	4b0d      	ldr	r3, [pc, #52]	; (800188c <_ZL19MX_USART3_UART_Initv+0x68>)
 8001856:	2200      	movs	r2, #0
 8001858:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800185a:	4b0c      	ldr	r3, [pc, #48]	; (800188c <_ZL19MX_USART3_UART_Initv+0x68>)
 800185c:	2200      	movs	r2, #0
 800185e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001860:	4b0a      	ldr	r3, [pc, #40]	; (800188c <_ZL19MX_USART3_UART_Initv+0x68>)
 8001862:	2200      	movs	r2, #0
 8001864:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RS485Ex_Init(&huart3, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8001866:	2300      	movs	r3, #0
 8001868:	2200      	movs	r2, #0
 800186a:	2100      	movs	r1, #0
 800186c:	4807      	ldr	r0, [pc, #28]	; (800188c <_ZL19MX_USART3_UART_Initv+0x68>)
 800186e:	f004 fcd1 	bl	8006214 <HAL_RS485Ex_Init>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	bf14      	ite	ne
 8001878:	2301      	movne	r3, #1
 800187a:	2300      	moveq	r3, #0
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <_ZL19MX_USART3_UART_Initv+0x62>
  {
    Error_Handler();
 8001882:	f000 f8ed 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	200005ec 	.word	0x200005ec
 8001890:	40004800 	.word	0x40004800

08001894 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001898:	4b1d      	ldr	r3, [pc, #116]	; (8001910 <_ZL12MX_SPI2_Initv+0x7c>)
 800189a:	4a1e      	ldr	r2, [pc, #120]	; (8001914 <_ZL12MX_SPI2_Initv+0x80>)
 800189c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800189e:	4b1c      	ldr	r3, [pc, #112]	; (8001910 <_ZL12MX_SPI2_Initv+0x7c>)
 80018a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018a4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80018a6:	4b1a      	ldr	r3, [pc, #104]	; (8001910 <_ZL12MX_SPI2_Initv+0x7c>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80018ac:	4b18      	ldr	r3, [pc, #96]	; (8001910 <_ZL12MX_SPI2_Initv+0x7c>)
 80018ae:	f44f 7240 	mov.w	r2, #768	; 0x300
 80018b2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018b4:	4b16      	ldr	r3, [pc, #88]	; (8001910 <_ZL12MX_SPI2_Initv+0x7c>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018ba:	4b15      	ldr	r3, [pc, #84]	; (8001910 <_ZL12MX_SPI2_Initv+0x7c>)
 80018bc:	2200      	movs	r2, #0
 80018be:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80018c0:	4b13      	ldr	r3, [pc, #76]	; (8001910 <_ZL12MX_SPI2_Initv+0x7c>)
 80018c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018c6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018c8:	4b11      	ldr	r3, [pc, #68]	; (8001910 <_ZL12MX_SPI2_Initv+0x7c>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018ce:	4b10      	ldr	r3, [pc, #64]	; (8001910 <_ZL12MX_SPI2_Initv+0x7c>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80018d4:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <_ZL12MX_SPI2_Initv+0x7c>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018da:	4b0d      	ldr	r3, [pc, #52]	; (8001910 <_ZL12MX_SPI2_Initv+0x7c>)
 80018dc:	2200      	movs	r2, #0
 80018de:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80018e0:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <_ZL12MX_SPI2_Initv+0x7c>)
 80018e2:	2207      	movs	r2, #7
 80018e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80018e6:	4b0a      	ldr	r3, [pc, #40]	; (8001910 <_ZL12MX_SPI2_Initv+0x7c>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018ec:	4b08      	ldr	r3, [pc, #32]	; (8001910 <_ZL12MX_SPI2_Initv+0x7c>)
 80018ee:	2208      	movs	r2, #8
 80018f0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80018f2:	4807      	ldr	r0, [pc, #28]	; (8001910 <_ZL12MX_SPI2_Initv+0x7c>)
 80018f4:	f003 f9f4 	bl	8004ce0 <HAL_SPI_Init>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	bf14      	ite	ne
 80018fe:	2301      	movne	r3, #1
 8001900:	2300      	moveq	r3, #0
 8001902:	b2db      	uxtb	r3, r3
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <_ZL12MX_SPI2_Initv+0x78>
  {
    Error_Handler();
 8001908:	f000 f8aa 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800190c:	bf00      	nop
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20000670 	.word	0x20000670
 8001914:	40003800 	.word	0x40003800

08001918 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b08a      	sub	sp, #40	; 0x28
 800191c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191e:	f107 0314 	add.w	r3, r7, #20
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	605a      	str	r2, [r3, #4]
 8001928:	609a      	str	r2, [r3, #8]
 800192a:	60da      	str	r2, [r3, #12]
 800192c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800192e:	4b40      	ldr	r3, [pc, #256]	; (8001a30 <_ZL12MX_GPIO_Initv+0x118>)
 8001930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001932:	4a3f      	ldr	r2, [pc, #252]	; (8001a30 <_ZL12MX_GPIO_Initv+0x118>)
 8001934:	f043 0304 	orr.w	r3, r3, #4
 8001938:	64d3      	str	r3, [r2, #76]	; 0x4c
 800193a:	4b3d      	ldr	r3, [pc, #244]	; (8001a30 <_ZL12MX_GPIO_Initv+0x118>)
 800193c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193e:	f003 0304 	and.w	r3, r3, #4
 8001942:	613b      	str	r3, [r7, #16]
 8001944:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001946:	4b3a      	ldr	r3, [pc, #232]	; (8001a30 <_ZL12MX_GPIO_Initv+0x118>)
 8001948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194a:	4a39      	ldr	r2, [pc, #228]	; (8001a30 <_ZL12MX_GPIO_Initv+0x118>)
 800194c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001950:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001952:	4b37      	ldr	r3, [pc, #220]	; (8001a30 <_ZL12MX_GPIO_Initv+0x118>)
 8001954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800195e:	4b34      	ldr	r3, [pc, #208]	; (8001a30 <_ZL12MX_GPIO_Initv+0x118>)
 8001960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001962:	4a33      	ldr	r2, [pc, #204]	; (8001a30 <_ZL12MX_GPIO_Initv+0x118>)
 8001964:	f043 0301 	orr.w	r3, r3, #1
 8001968:	64d3      	str	r3, [r2, #76]	; 0x4c
 800196a:	4b31      	ldr	r3, [pc, #196]	; (8001a30 <_ZL12MX_GPIO_Initv+0x118>)
 800196c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	60bb      	str	r3, [r7, #8]
 8001974:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001976:	4b2e      	ldr	r3, [pc, #184]	; (8001a30 <_ZL12MX_GPIO_Initv+0x118>)
 8001978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197a:	4a2d      	ldr	r2, [pc, #180]	; (8001a30 <_ZL12MX_GPIO_Initv+0x118>)
 800197c:	f043 0302 	orr.w	r3, r3, #2
 8001980:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001982:	4b2b      	ldr	r3, [pc, #172]	; (8001a30 <_ZL12MX_GPIO_Initv+0x118>)
 8001984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	607b      	str	r3, [r7, #4]
 800198c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800198e:	4b28      	ldr	r3, [pc, #160]	; (8001a30 <_ZL12MX_GPIO_Initv+0x118>)
 8001990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001992:	4a27      	ldr	r2, [pc, #156]	; (8001a30 <_ZL12MX_GPIO_Initv+0x118>)
 8001994:	f043 0308 	orr.w	r3, r3, #8
 8001998:	64d3      	str	r3, [r2, #76]	; 0x4c
 800199a:	4b25      	ldr	r3, [pc, #148]	; (8001a30 <_ZL12MX_GPIO_Initv+0x118>)
 800199c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199e:	f003 0308 	and.w	r3, r3, #8
 80019a2:	603b      	str	r3, [r7, #0]
 80019a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CONT_CK0_Pin|CONT_CK1_Pin|RELAY9_Pin|TC1_NCS_Pin
 80019a6:	2200      	movs	r2, #0
 80019a8:	f247 31e0 	movw	r1, #29664	; 0x73e0
 80019ac:	4821      	ldr	r0, [pc, #132]	; (8001a34 <_ZL12MX_GPIO_Initv+0x11c>)
 80019ae:	f001 fe81 	bl	80036b4 <HAL_GPIO_WritePin>
                          |TC2_NCS_Pin|RELAY4_Pin|RELAY3_Pin|RS422_TX_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RELAY11_Pin|RELAY10_Pin|RELAY2_Pin|RELAY1_Pin
 80019b2:	2200      	movs	r2, #0
 80019b4:	f641 1103 	movw	r1, #6403	; 0x1903
 80019b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019bc:	f001 fe7a 	bl	80036b4 <HAL_GPIO_WritePin>
                          |RELAY0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RELAY8_Pin|RELAY7_Pin|RELAY6_Pin|RELAY5_Pin
 80019c0:	2200      	movs	r2, #0
 80019c2:	f241 01e7 	movw	r1, #4327	; 0x10e7
 80019c6:	481c      	ldr	r0, [pc, #112]	; (8001a38 <_ZL12MX_GPIO_Initv+0x120>)
 80019c8:	f001 fe74 	bl	80036b4 <HAL_GPIO_WritePin>
                          |LED_2_Pin|LED_1_Pin|LED_0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CONT_CK0_Pin CONT_CK1_Pin RELAY9_Pin TC1_NCS_Pin
                           TC2_NCS_Pin RELAY4_Pin RELAY3_Pin RS422_TX_EN_Pin */
  GPIO_InitStruct.Pin = CONT_CK0_Pin|CONT_CK1_Pin|RELAY9_Pin|TC1_NCS_Pin
 80019cc:	f247 33e0 	movw	r3, #29664	; 0x73e0
 80019d0:	617b      	str	r3, [r7, #20]
                          |TC2_NCS_Pin|RELAY4_Pin|RELAY3_Pin|RS422_TX_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d2:	2301      	movs	r3, #1
 80019d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019da:	2300      	movs	r3, #0
 80019dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019de:	f107 0314 	add.w	r3, r7, #20
 80019e2:	4619      	mov	r1, r3
 80019e4:	4813      	ldr	r0, [pc, #76]	; (8001a34 <_ZL12MX_GPIO_Initv+0x11c>)
 80019e6:	f001 fceb 	bl	80033c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY11_Pin RELAY10_Pin RELAY2_Pin RELAY1_Pin
                           RELAY0_Pin */
  GPIO_InitStruct.Pin = RELAY11_Pin|RELAY10_Pin|RELAY2_Pin|RELAY1_Pin
 80019ea:	f641 1303 	movw	r3, #6403	; 0x1903
 80019ee:	617b      	str	r3, [r7, #20]
                          |RELAY0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f0:	2301      	movs	r3, #1
 80019f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f8:	2300      	movs	r3, #0
 80019fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fc:	f107 0314 	add.w	r3, r7, #20
 8001a00:	4619      	mov	r1, r3
 8001a02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a06:	f001 fcdb 	bl	80033c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY8_Pin RELAY7_Pin RELAY6_Pin RELAY5_Pin
                           LED_2_Pin LED_1_Pin LED_0_Pin */
  GPIO_InitStruct.Pin = RELAY8_Pin|RELAY7_Pin|RELAY6_Pin|RELAY5_Pin
 8001a0a:	f241 03e7 	movw	r3, #4327	; 0x10e7
 8001a0e:	617b      	str	r3, [r7, #20]
                          |LED_2_Pin|LED_1_Pin|LED_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a10:	2301      	movs	r3, #1
 8001a12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a1c:	f107 0314 	add.w	r3, r7, #20
 8001a20:	4619      	mov	r1, r3
 8001a22:	4805      	ldr	r0, [pc, #20]	; (8001a38 <_ZL12MX_GPIO_Initv+0x120>)
 8001a24:	f001 fccc 	bl	80033c0 <HAL_GPIO_Init>

}
 8001a28:	bf00      	nop
 8001a2a:	3728      	adds	r7, #40	; 0x28
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40021000 	.word	0x40021000
 8001a34:	48000800 	.word	0x48000800
 8001a38:	48000400 	.word	0x48000400

08001a3c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a04      	ldr	r2, [pc, #16]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d101      	bne.n	8001a52 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a4e:	f000 fbfb 	bl	8002248 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a52:	bf00      	nop
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40012c00 	.word	0x40012c00

08001a60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a64:	b672      	cpsid	i
}
 8001a66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a68:	e7fe      	b.n	8001a68 <Error_Handler+0x8>
	...

08001a6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a72:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <HAL_MspInit+0x4c>)
 8001a74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a76:	4a10      	ldr	r2, [pc, #64]	; (8001ab8 <HAL_MspInit+0x4c>)
 8001a78:	f043 0301 	orr.w	r3, r3, #1
 8001a7c:	6613      	str	r3, [r2, #96]	; 0x60
 8001a7e:	4b0e      	ldr	r3, [pc, #56]	; (8001ab8 <HAL_MspInit+0x4c>)
 8001a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	607b      	str	r3, [r7, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a8a:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <HAL_MspInit+0x4c>)
 8001a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a8e:	4a0a      	ldr	r2, [pc, #40]	; (8001ab8 <HAL_MspInit+0x4c>)
 8001a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a94:	6593      	str	r3, [r2, #88]	; 0x58
 8001a96:	4b08      	ldr	r3, [pc, #32]	; (8001ab8 <HAL_MspInit+0x4c>)
 8001a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9e:	603b      	str	r3, [r7, #0]
 8001aa0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	210f      	movs	r1, #15
 8001aa6:	f06f 0001 	mvn.w	r0, #1
 8001aaa:	f001 fb70 	bl	800318e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40021000 	.word	0x40021000

08001abc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b0a2      	sub	sp, #136	; 0x88
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	60da      	str	r2, [r3, #12]
 8001ad2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ad4:	f107 0318 	add.w	r3, r7, #24
 8001ad8:	225c      	movs	r2, #92	; 0x5c
 8001ada:	2100      	movs	r1, #0
 8001adc:	4618      	mov	r0, r3
 8001ade:	f006 ffa7 	bl	8008a30 <memset>
  if(hadc->Instance==ADC1)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a31      	ldr	r2, [pc, #196]	; (8001bac <HAL_ADC_MspInit+0xf0>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d15b      	bne.n	8001ba4 <HAL_ADC_MspInit+0xe8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001aec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001af0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001af2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001af6:	66bb      	str	r3, [r7, #104]	; 0x68
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001af8:	2301      	movs	r3, #1
 8001afa:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001afc:	2301      	movs	r3, #1
 8001afe:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001b00:	2310      	movs	r3, #16
 8001b02:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001b04:	2307      	movs	r3, #7
 8001b06:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001b10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b14:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b16:	f107 0318 	add.w	r3, r7, #24
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f002 fdd6 	bl	80046cc <HAL_RCCEx_PeriphCLKConfig>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8001b26:	f7ff ff9b 	bl	8001a60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001b2a:	4b21      	ldr	r3, [pc, #132]	; (8001bb0 <HAL_ADC_MspInit+0xf4>)
 8001b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2e:	4a20      	ldr	r2, [pc, #128]	; (8001bb0 <HAL_ADC_MspInit+0xf4>)
 8001b30:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b36:	4b1e      	ldr	r3, [pc, #120]	; (8001bb0 <HAL_ADC_MspInit+0xf4>)
 8001b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b3e:	617b      	str	r3, [r7, #20]
 8001b40:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b42:	4b1b      	ldr	r3, [pc, #108]	; (8001bb0 <HAL_ADC_MspInit+0xf4>)
 8001b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b46:	4a1a      	ldr	r2, [pc, #104]	; (8001bb0 <HAL_ADC_MspInit+0xf4>)
 8001b48:	f043 0304 	orr.w	r3, r3, #4
 8001b4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b4e:	4b18      	ldr	r3, [pc, #96]	; (8001bb0 <HAL_ADC_MspInit+0xf4>)
 8001b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b52:	f003 0304 	and.w	r3, r3, #4
 8001b56:	613b      	str	r3, [r7, #16]
 8001b58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5a:	4b15      	ldr	r3, [pc, #84]	; (8001bb0 <HAL_ADC_MspInit+0xf4>)
 8001b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b5e:	4a14      	ldr	r2, [pc, #80]	; (8001bb0 <HAL_ADC_MspInit+0xf4>)
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b66:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <HAL_ADC_MspInit+0xf4>)
 8001b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001b72:	230f      	movs	r3, #15
 8001b74:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001b76:	230b      	movs	r3, #11
 8001b78:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b7e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001b82:	4619      	mov	r1, r3
 8001b84:	480b      	ldr	r0, [pc, #44]	; (8001bb4 <HAL_ADC_MspInit+0xf8>)
 8001b86:	f001 fc1b 	bl	80033c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001b8a:	23f0      	movs	r3, #240	; 0xf0
 8001b8c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001b8e:	230b      	movs	r3, #11
 8001b90:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b96:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ba0:	f001 fc0e 	bl	80033c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ba4:	bf00      	nop
 8001ba6:	3788      	adds	r7, #136	; 0x88
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	50040000 	.word	0x50040000
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	48000800 	.word	0x48000800

08001bb8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a0a      	ldr	r2, [pc, #40]	; (8001bf0 <HAL_CRC_MspInit+0x38>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d10b      	bne.n	8001be2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001bca:	4b0a      	ldr	r3, [pc, #40]	; (8001bf4 <HAL_CRC_MspInit+0x3c>)
 8001bcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bce:	4a09      	ldr	r2, [pc, #36]	; (8001bf4 <HAL_CRC_MspInit+0x3c>)
 8001bd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bd4:	6493      	str	r3, [r2, #72]	; 0x48
 8001bd6:	4b07      	ldr	r3, [pc, #28]	; (8001bf4 <HAL_CRC_MspInit+0x3c>)
 8001bd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001be2:	bf00      	nop
 8001be4:	3714      	adds	r7, #20
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	40023000 	.word	0x40023000
 8001bf4:	40021000 	.word	0x40021000

08001bf8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b0a0      	sub	sp, #128	; 0x80
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c00:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c10:	f107 0310 	add.w	r3, r7, #16
 8001c14:	225c      	movs	r2, #92	; 0x5c
 8001c16:	2100      	movs	r1, #0
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f006 ff09 	bl	8008a30 <memset>
  if(hi2c->Instance==I2C1)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a1f      	ldr	r2, [pc, #124]	; (8001ca0 <HAL_I2C_MspInit+0xa8>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d136      	bne.n	8001c96 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001c28:	2340      	movs	r3, #64	; 0x40
 8001c2a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c30:	f107 0310 	add.w	r3, r7, #16
 8001c34:	4618      	mov	r0, r3
 8001c36:	f002 fd49 	bl	80046cc <HAL_RCCEx_PeriphCLKConfig>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001c40:	f7ff ff0e 	bl	8001a60 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c44:	4b17      	ldr	r3, [pc, #92]	; (8001ca4 <HAL_I2C_MspInit+0xac>)
 8001c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c48:	4a16      	ldr	r2, [pc, #88]	; (8001ca4 <HAL_I2C_MspInit+0xac>)
 8001c4a:	f043 0302 	orr.w	r3, r3, #2
 8001c4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c50:	4b14      	ldr	r3, [pc, #80]	; (8001ca4 <HAL_I2C_MspInit+0xac>)
 8001c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c5c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c60:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c62:	2312      	movs	r3, #18
 8001c64:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c66:	2300      	movs	r3, #0
 8001c68:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c6e:	2304      	movs	r3, #4
 8001c70:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c72:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c76:	4619      	mov	r1, r3
 8001c78:	480b      	ldr	r0, [pc, #44]	; (8001ca8 <HAL_I2C_MspInit+0xb0>)
 8001c7a:	f001 fba1 	bl	80033c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c7e:	4b09      	ldr	r3, [pc, #36]	; (8001ca4 <HAL_I2C_MspInit+0xac>)
 8001c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c82:	4a08      	ldr	r2, [pc, #32]	; (8001ca4 <HAL_I2C_MspInit+0xac>)
 8001c84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c88:	6593      	str	r3, [r2, #88]	; 0x58
 8001c8a:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <HAL_I2C_MspInit+0xac>)
 8001c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c92:	60bb      	str	r3, [r7, #8]
 8001c94:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c96:	bf00      	nop
 8001c98:	3780      	adds	r7, #128	; 0x80
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40005400 	.word	0x40005400
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	48000400 	.word	0x48000400

08001cac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b0a8      	sub	sp, #160	; 0xa0
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
 8001cc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cc4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cc8:	225c      	movs	r2, #92	; 0x5c
 8001cca:	2100      	movs	r1, #0
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f006 feaf 	bl	8008a30 <memset>
  if(huart->Instance==LPUART1)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a95      	ldr	r2, [pc, #596]	; (8001f2c <HAL_UART_MspInit+0x280>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d13c      	bne.n	8001d56 <HAL_UART_MspInit+0xaa>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001cdc:	2320      	movs	r3, #32
 8001cde:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ce4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f002 fcef 	bl	80046cc <HAL_RCCEx_PeriphCLKConfig>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001cf4:	f7ff feb4 	bl	8001a60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001cf8:	4b8d      	ldr	r3, [pc, #564]	; (8001f30 <HAL_UART_MspInit+0x284>)
 8001cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cfc:	4a8c      	ldr	r2, [pc, #560]	; (8001f30 <HAL_UART_MspInit+0x284>)
 8001cfe:	f043 0301 	orr.w	r3, r3, #1
 8001d02:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001d04:	4b8a      	ldr	r3, [pc, #552]	; (8001f30 <HAL_UART_MspInit+0x284>)
 8001d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d08:	f003 0301 	and.w	r3, r3, #1
 8001d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d10:	4b87      	ldr	r3, [pc, #540]	; (8001f30 <HAL_UART_MspInit+0x284>)
 8001d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d14:	4a86      	ldr	r2, [pc, #536]	; (8001f30 <HAL_UART_MspInit+0x284>)
 8001d16:	f043 0302 	orr.w	r3, r3, #2
 8001d1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d1c:	4b84      	ldr	r3, [pc, #528]	; (8001f30 <HAL_UART_MspInit+0x284>)
 8001d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d28:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d30:	2302      	movs	r3, #2
 8001d32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d36:	2300      	movs	r3, #0
 8001d38:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001d42:	2308      	movs	r3, #8
 8001d44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d48:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4879      	ldr	r0, [pc, #484]	; (8001f34 <HAL_UART_MspInit+0x288>)
 8001d50:	f001 fb36 	bl	80033c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001d54:	e0e6      	b.n	8001f24 <HAL_UART_MspInit+0x278>
  else if(huart->Instance==USART1)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a77      	ldr	r2, [pc, #476]	; (8001f38 <HAL_UART_MspInit+0x28c>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d13d      	bne.n	8001ddc <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001d60:	2301      	movs	r3, #1
 8001d62:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001d64:	2300      	movs	r3, #0
 8001d66:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f002 fcad 	bl	80046cc <HAL_RCCEx_PeriphCLKConfig>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8001d78:	f7ff fe72 	bl	8001a60 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d7c:	4b6c      	ldr	r3, [pc, #432]	; (8001f30 <HAL_UART_MspInit+0x284>)
 8001d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d80:	4a6b      	ldr	r2, [pc, #428]	; (8001f30 <HAL_UART_MspInit+0x284>)
 8001d82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d86:	6613      	str	r3, [r2, #96]	; 0x60
 8001d88:	4b69      	ldr	r3, [pc, #420]	; (8001f30 <HAL_UART_MspInit+0x284>)
 8001d8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d90:	627b      	str	r3, [r7, #36]	; 0x24
 8001d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d94:	4b66      	ldr	r3, [pc, #408]	; (8001f30 <HAL_UART_MspInit+0x284>)
 8001d96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d98:	4a65      	ldr	r2, [pc, #404]	; (8001f30 <HAL_UART_MspInit+0x284>)
 8001d9a:	f043 0301 	orr.w	r3, r3, #1
 8001d9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001da0:	4b63      	ldr	r3, [pc, #396]	; (8001f30 <HAL_UART_MspInit+0x284>)
 8001da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	623b      	str	r3, [r7, #32]
 8001daa:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001dac:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001db0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db4:	2302      	movs	r3, #2
 8001db6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001dc6:	2307      	movs	r3, #7
 8001dc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dcc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dd6:	f001 faf3 	bl	80033c0 <HAL_GPIO_Init>
}
 8001dda:	e0a3      	b.n	8001f24 <HAL_UART_MspInit+0x278>
  else if(huart->Instance==USART2)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a56      	ldr	r2, [pc, #344]	; (8001f3c <HAL_UART_MspInit+0x290>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d13c      	bne.n	8001e60 <HAL_UART_MspInit+0x1b4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001de6:	2302      	movs	r3, #2
 8001de8:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001dea:	2300      	movs	r3, #0
 8001dec:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001df2:	4618      	mov	r0, r3
 8001df4:	f002 fc6a 	bl	80046cc <HAL_RCCEx_PeriphCLKConfig>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <HAL_UART_MspInit+0x156>
      Error_Handler();
 8001dfe:	f7ff fe2f 	bl	8001a60 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e02:	4b4b      	ldr	r3, [pc, #300]	; (8001f30 <HAL_UART_MspInit+0x284>)
 8001e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e06:	4a4a      	ldr	r2, [pc, #296]	; (8001f30 <HAL_UART_MspInit+0x284>)
 8001e08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e0c:	6593      	str	r3, [r2, #88]	; 0x58
 8001e0e:	4b48      	ldr	r3, [pc, #288]	; (8001f30 <HAL_UART_MspInit+0x284>)
 8001e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e16:	61fb      	str	r3, [r7, #28]
 8001e18:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1a:	4b45      	ldr	r3, [pc, #276]	; (8001f30 <HAL_UART_MspInit+0x284>)
 8001e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1e:	4a44      	ldr	r2, [pc, #272]	; (8001f30 <HAL_UART_MspInit+0x284>)
 8001e20:	f043 0301 	orr.w	r3, r3, #1
 8001e24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e26:	4b42      	ldr	r3, [pc, #264]	; (8001f30 <HAL_UART_MspInit+0x284>)
 8001e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	61bb      	str	r3, [r7, #24]
 8001e30:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e32:	230c      	movs	r3, #12
 8001e34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e44:	2303      	movs	r3, #3
 8001e46:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e4a:	2307      	movs	r3, #7
 8001e4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e50:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001e54:	4619      	mov	r1, r3
 8001e56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e5a:	f001 fab1 	bl	80033c0 <HAL_GPIO_Init>
}
 8001e5e:	e061      	b.n	8001f24 <HAL_UART_MspInit+0x278>
  else if(huart->Instance==USART3)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a36      	ldr	r2, [pc, #216]	; (8001f40 <HAL_UART_MspInit+0x294>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d15c      	bne.n	8001f24 <HAL_UART_MspInit+0x278>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001e6a:	2304      	movs	r3, #4
 8001e6c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e76:	4618      	mov	r0, r3
 8001e78:	f002 fc28 	bl	80046cc <HAL_RCCEx_PeriphCLKConfig>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <HAL_UART_MspInit+0x1da>
      Error_Handler();
 8001e82:	f7ff fded 	bl	8001a60 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e86:	4b2a      	ldr	r3, [pc, #168]	; (8001f30 <HAL_UART_MspInit+0x284>)
 8001e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8a:	4a29      	ldr	r2, [pc, #164]	; (8001f30 <HAL_UART_MspInit+0x284>)
 8001e8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e90:	6593      	str	r3, [r2, #88]	; 0x58
 8001e92:	4b27      	ldr	r3, [pc, #156]	; (8001f30 <HAL_UART_MspInit+0x284>)
 8001e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e9a:	617b      	str	r3, [r7, #20]
 8001e9c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e9e:	4b24      	ldr	r3, [pc, #144]	; (8001f30 <HAL_UART_MspInit+0x284>)
 8001ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea2:	4a23      	ldr	r2, [pc, #140]	; (8001f30 <HAL_UART_MspInit+0x284>)
 8001ea4:	f043 0304 	orr.w	r3, r3, #4
 8001ea8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eaa:	4b21      	ldr	r3, [pc, #132]	; (8001f30 <HAL_UART_MspInit+0x284>)
 8001eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eae:	f003 0304 	and.w	r3, r3, #4
 8001eb2:	613b      	str	r3, [r7, #16]
 8001eb4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eb6:	4b1e      	ldr	r3, [pc, #120]	; (8001f30 <HAL_UART_MspInit+0x284>)
 8001eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eba:	4a1d      	ldr	r2, [pc, #116]	; (8001f30 <HAL_UART_MspInit+0x284>)
 8001ebc:	f043 0308 	orr.w	r3, r3, #8
 8001ec0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ec2:	4b1b      	ldr	r3, [pc, #108]	; (8001f30 <HAL_UART_MspInit+0x284>)
 8001ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec6:	f003 0308 	and.w	r3, r3, #8
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001ece:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001ed2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001edc:	2300      	movs	r3, #0
 8001ede:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ee8:	2307      	movs	r3, #7
 8001eea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eee:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4813      	ldr	r0, [pc, #76]	; (8001f44 <HAL_UART_MspInit+0x298>)
 8001ef6:	f001 fa63 	bl	80033c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001efa:	2304      	movs	r3, #4
 8001efc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f00:	2302      	movs	r3, #2
 8001f02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f06:	2300      	movs	r3, #0
 8001f08:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f12:	2307      	movs	r3, #7
 8001f14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f18:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	480a      	ldr	r0, [pc, #40]	; (8001f48 <HAL_UART_MspInit+0x29c>)
 8001f20:	f001 fa4e 	bl	80033c0 <HAL_GPIO_Init>
}
 8001f24:	bf00      	nop
 8001f26:	37a0      	adds	r7, #160	; 0xa0
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40008000 	.word	0x40008000
 8001f30:	40021000 	.word	0x40021000
 8001f34:	48000400 	.word	0x48000400
 8001f38:	40013800 	.word	0x40013800
 8001f3c:	40004400 	.word	0x40004400
 8001f40:	40004800 	.word	0x40004800
 8001f44:	48000800 	.word	0x48000800
 8001f48:	48000c00 	.word	0x48000c00

08001f4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b08a      	sub	sp, #40	; 0x28
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f54:	f107 0314 	add.w	r3, r7, #20
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	605a      	str	r2, [r3, #4]
 8001f5e:	609a      	str	r2, [r3, #8]
 8001f60:	60da      	str	r2, [r3, #12]
 8001f62:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a17      	ldr	r2, [pc, #92]	; (8001fc8 <HAL_SPI_MspInit+0x7c>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d128      	bne.n	8001fc0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f6e:	4b17      	ldr	r3, [pc, #92]	; (8001fcc <HAL_SPI_MspInit+0x80>)
 8001f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f72:	4a16      	ldr	r2, [pc, #88]	; (8001fcc <HAL_SPI_MspInit+0x80>)
 8001f74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f78:	6593      	str	r3, [r2, #88]	; 0x58
 8001f7a:	4b14      	ldr	r3, [pc, #80]	; (8001fcc <HAL_SPI_MspInit+0x80>)
 8001f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f82:	613b      	str	r3, [r7, #16]
 8001f84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f86:	4b11      	ldr	r3, [pc, #68]	; (8001fcc <HAL_SPI_MspInit+0x80>)
 8001f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f8a:	4a10      	ldr	r2, [pc, #64]	; (8001fcc <HAL_SPI_MspInit+0x80>)
 8001f8c:	f043 0302 	orr.w	r3, r3, #2
 8001f90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f92:	4b0e      	ldr	r3, [pc, #56]	; (8001fcc <HAL_SPI_MspInit+0x80>)
 8001f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001f9e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001fa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fac:	2303      	movs	r3, #3
 8001fae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001fb0:	2305      	movs	r3, #5
 8001fb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fb4:	f107 0314 	add.w	r3, r7, #20
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4805      	ldr	r0, [pc, #20]	; (8001fd0 <HAL_SPI_MspInit+0x84>)
 8001fbc:	f001 fa00 	bl	80033c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001fc0:	bf00      	nop
 8001fc2:	3728      	adds	r7, #40	; 0x28
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40003800 	.word	0x40003800
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	48000400 	.word	0x48000400

08001fd4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b08c      	sub	sp, #48	; 0x30
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001fe2:	4b2e      	ldr	r3, [pc, #184]	; (800209c <HAL_InitTick+0xc8>)
 8001fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fe6:	4a2d      	ldr	r2, [pc, #180]	; (800209c <HAL_InitTick+0xc8>)
 8001fe8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001fec:	6613      	str	r3, [r2, #96]	; 0x60
 8001fee:	4b2b      	ldr	r3, [pc, #172]	; (800209c <HAL_InitTick+0xc8>)
 8001ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ff2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ff6:	60bb      	str	r3, [r7, #8]
 8001ff8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ffa:	f107 020c 	add.w	r2, r7, #12
 8001ffe:	f107 0310 	add.w	r3, r7, #16
 8002002:	4611      	mov	r1, r2
 8002004:	4618      	mov	r0, r3
 8002006:	f002 facf 	bl	80045a8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800200a:	f002 fab7 	bl	800457c <HAL_RCC_GetPCLK2Freq>
 800200e:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002012:	4a23      	ldr	r2, [pc, #140]	; (80020a0 <HAL_InitTick+0xcc>)
 8002014:	fba2 2303 	umull	r2, r3, r2, r3
 8002018:	0c9b      	lsrs	r3, r3, #18
 800201a:	3b01      	subs	r3, #1
 800201c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800201e:	4b21      	ldr	r3, [pc, #132]	; (80020a4 <HAL_InitTick+0xd0>)
 8002020:	4a21      	ldr	r2, [pc, #132]	; (80020a8 <HAL_InitTick+0xd4>)
 8002022:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002024:	4b1f      	ldr	r3, [pc, #124]	; (80020a4 <HAL_InitTick+0xd0>)
 8002026:	f240 32e7 	movw	r2, #999	; 0x3e7
 800202a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800202c:	4a1d      	ldr	r2, [pc, #116]	; (80020a4 <HAL_InitTick+0xd0>)
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002032:	4b1c      	ldr	r3, [pc, #112]	; (80020a4 <HAL_InitTick+0xd0>)
 8002034:	2200      	movs	r2, #0
 8002036:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002038:	4b1a      	ldr	r3, [pc, #104]	; (80020a4 <HAL_InitTick+0xd0>)
 800203a:	2200      	movs	r2, #0
 800203c:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800203e:	4b19      	ldr	r3, [pc, #100]	; (80020a4 <HAL_InitTick+0xd0>)
 8002040:	2200      	movs	r2, #0
 8002042:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002044:	4817      	ldr	r0, [pc, #92]	; (80020a4 <HAL_InitTick+0xd0>)
 8002046:	f002 feee 	bl	8004e26 <HAL_TIM_Base_Init>
 800204a:	4603      	mov	r3, r0
 800204c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002050:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002054:	2b00      	cmp	r3, #0
 8002056:	d11b      	bne.n	8002090 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002058:	4812      	ldr	r0, [pc, #72]	; (80020a4 <HAL_InitTick+0xd0>)
 800205a:	f002 ff45 	bl	8004ee8 <HAL_TIM_Base_Start_IT>
 800205e:	4603      	mov	r3, r0
 8002060:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002064:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002068:	2b00      	cmp	r3, #0
 800206a:	d111      	bne.n	8002090 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800206c:	2019      	movs	r0, #25
 800206e:	f001 f8aa 	bl	80031c6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2b0f      	cmp	r3, #15
 8002076:	d808      	bhi.n	800208a <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8002078:	2200      	movs	r2, #0
 800207a:	6879      	ldr	r1, [r7, #4]
 800207c:	2019      	movs	r0, #25
 800207e:	f001 f886 	bl	800318e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002082:	4a0a      	ldr	r2, [pc, #40]	; (80020ac <HAL_InitTick+0xd8>)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6013      	str	r3, [r2, #0]
 8002088:	e002      	b.n	8002090 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002090:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002094:	4618      	mov	r0, r3
 8002096:	3730      	adds	r7, #48	; 0x30
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40021000 	.word	0x40021000
 80020a0:	431bde83 	.word	0x431bde83
 80020a4:	200006d4 	.word	0x200006d4
 80020a8:	40012c00 	.word	0x40012c00
 80020ac:	20000004 	.word	0x20000004

080020b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020b4:	e7fe      	b.n	80020b4 <NMI_Handler+0x4>

080020b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020b6:	b480      	push	{r7}
 80020b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020ba:	e7fe      	b.n	80020ba <HardFault_Handler+0x4>

080020bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020c0:	e7fe      	b.n	80020c0 <MemManage_Handler+0x4>

080020c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020c2:	b480      	push	{r7}
 80020c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020c6:	e7fe      	b.n	80020c6 <BusFault_Handler+0x4>

080020c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020cc:	e7fe      	b.n	80020cc <UsageFault_Handler+0x4>

080020ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020ce:	b480      	push	{r7}
 80020d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020d2:	bf00      	nop
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80020e0:	4802      	ldr	r0, [pc, #8]	; (80020ec <TIM1_UP_TIM16_IRQHandler+0x10>)
 80020e2:	f002 ff55 	bl	8004f90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80020e6:	bf00      	nop
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	200006d4 	.word	0x200006d4

080020f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  return 1;
 80020f4:	2301      	movs	r3, #1
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <_kill>:

int _kill(int pid, int sig)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800210a:	f006 fc4f 	bl	80089ac <__errno>
 800210e:	4603      	mov	r3, r0
 8002110:	2216      	movs	r2, #22
 8002112:	601a      	str	r2, [r3, #0]
  return -1;
 8002114:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002118:	4618      	mov	r0, r3
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <_exit>:

void _exit (int status)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002128:	f04f 31ff 	mov.w	r1, #4294967295
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f7ff ffe7 	bl	8002100 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002132:	e7fe      	b.n	8002132 <_exit+0x12>

08002134 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800213c:	4a14      	ldr	r2, [pc, #80]	; (8002190 <_sbrk+0x5c>)
 800213e:	4b15      	ldr	r3, [pc, #84]	; (8002194 <_sbrk+0x60>)
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002148:	4b13      	ldr	r3, [pc, #76]	; (8002198 <_sbrk+0x64>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d102      	bne.n	8002156 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002150:	4b11      	ldr	r3, [pc, #68]	; (8002198 <_sbrk+0x64>)
 8002152:	4a12      	ldr	r2, [pc, #72]	; (800219c <_sbrk+0x68>)
 8002154:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002156:	4b10      	ldr	r3, [pc, #64]	; (8002198 <_sbrk+0x64>)
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4413      	add	r3, r2
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	429a      	cmp	r2, r3
 8002162:	d207      	bcs.n	8002174 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002164:	f006 fc22 	bl	80089ac <__errno>
 8002168:	4603      	mov	r3, r0
 800216a:	220c      	movs	r2, #12
 800216c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800216e:	f04f 33ff 	mov.w	r3, #4294967295
 8002172:	e009      	b.n	8002188 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002174:	4b08      	ldr	r3, [pc, #32]	; (8002198 <_sbrk+0x64>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800217a:	4b07      	ldr	r3, [pc, #28]	; (8002198 <_sbrk+0x64>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4413      	add	r3, r2
 8002182:	4a05      	ldr	r2, [pc, #20]	; (8002198 <_sbrk+0x64>)
 8002184:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002186:	68fb      	ldr	r3, [r7, #12]
}
 8002188:	4618      	mov	r0, r3
 800218a:	3718      	adds	r7, #24
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	20010000 	.word	0x20010000
 8002194:	00000400 	.word	0x00000400
 8002198:	20000720 	.word	0x20000720
 800219c:	20001488 	.word	0x20001488

080021a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80021a4:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <SystemInit+0x20>)
 80021a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021aa:	4a05      	ldr	r2, [pc, #20]	; (80021c0 <SystemInit+0x20>)
 80021ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80021b4:	bf00      	nop
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	e000ed00 	.word	0xe000ed00

080021c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80021c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021fc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80021c8:	f7ff ffea 	bl	80021a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021cc:	480c      	ldr	r0, [pc, #48]	; (8002200 <LoopForever+0x6>)
  ldr r1, =_edata
 80021ce:	490d      	ldr	r1, [pc, #52]	; (8002204 <LoopForever+0xa>)
  ldr r2, =_sidata
 80021d0:	4a0d      	ldr	r2, [pc, #52]	; (8002208 <LoopForever+0xe>)
  movs r3, #0
 80021d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021d4:	e002      	b.n	80021dc <LoopCopyDataInit>

080021d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021da:	3304      	adds	r3, #4

080021dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021e0:	d3f9      	bcc.n	80021d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021e2:	4a0a      	ldr	r2, [pc, #40]	; (800220c <LoopForever+0x12>)
  ldr r4, =_ebss
 80021e4:	4c0a      	ldr	r4, [pc, #40]	; (8002210 <LoopForever+0x16>)
  movs r3, #0
 80021e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021e8:	e001      	b.n	80021ee <LoopFillZerobss>

080021ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021ec:	3204      	adds	r2, #4

080021ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021f0:	d3fb      	bcc.n	80021ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021f2:	f006 fbe1 	bl	80089b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80021f6:	f7ff f923 	bl	8001440 <main>

080021fa <LoopForever>:

LoopForever:
    b LoopForever
 80021fa:	e7fe      	b.n	80021fa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80021fc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002200:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002204:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002208:	08009c2c 	.word	0x08009c2c
  ldr r2, =_sbss
 800220c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002210:	20001488 	.word	0x20001488

08002214 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002214:	e7fe      	b.n	8002214 <ADC1_IRQHandler>

08002216 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b082      	sub	sp, #8
 800221a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800221c:	2300      	movs	r3, #0
 800221e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002220:	2003      	movs	r0, #3
 8002222:	f000 ffa9 	bl	8003178 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002226:	200f      	movs	r0, #15
 8002228:	f7ff fed4 	bl	8001fd4 <HAL_InitTick>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d002      	beq.n	8002238 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	71fb      	strb	r3, [r7, #7]
 8002236:	e001      	b.n	800223c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002238:	f7ff fc18 	bl	8001a6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800223c:	79fb      	ldrb	r3, [r7, #7]
}
 800223e:	4618      	mov	r0, r3
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
	...

08002248 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800224c:	4b06      	ldr	r3, [pc, #24]	; (8002268 <HAL_IncTick+0x20>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	461a      	mov	r2, r3
 8002252:	4b06      	ldr	r3, [pc, #24]	; (800226c <HAL_IncTick+0x24>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4413      	add	r3, r2
 8002258:	4a04      	ldr	r2, [pc, #16]	; (800226c <HAL_IncTick+0x24>)
 800225a:	6013      	str	r3, [r2, #0]
}
 800225c:	bf00      	nop
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	20000008 	.word	0x20000008
 800226c:	20000724 	.word	0x20000724

08002270 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  return uwTick;
 8002274:	4b03      	ldr	r3, [pc, #12]	; (8002284 <HAL_GetTick+0x14>)
 8002276:	681b      	ldr	r3, [r3, #0]
}
 8002278:	4618      	mov	r0, r3
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	20000724 	.word	0x20000724

08002288 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	431a      	orrs	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	609a      	str	r2, [r3, #8]
}
 80022a2:	bf00      	nop
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80022ae:	b480      	push	{r7}
 80022b0:	b083      	sub	sp, #12
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
 80022b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	431a      	orrs	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	609a      	str	r2, [r3, #8]
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b087      	sub	sp, #28
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
 80022fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	3360      	adds	r3, #96	; 0x60
 8002302:	461a      	mov	r2, r3
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	4b08      	ldr	r3, [pc, #32]	; (8002334 <LL_ADC_SetOffset+0x44>)
 8002312:	4013      	ands	r3, r2
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	430a      	orrs	r2, r1
 800231e:	4313      	orrs	r3, r2
 8002320:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002328:	bf00      	nop
 800232a:	371c      	adds	r7, #28
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	03fff000 	.word	0x03fff000

08002338 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	3360      	adds	r3, #96	; 0x60
 8002346:	461a      	mov	r2, r3
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4413      	add	r3, r2
 800234e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002358:	4618      	mov	r0, r3
 800235a:	3714      	adds	r7, #20
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002364:	b480      	push	{r7}
 8002366:	b087      	sub	sp, #28
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	3360      	adds	r3, #96	; 0x60
 8002374:	461a      	mov	r2, r3
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	4413      	add	r3, r2
 800237c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	431a      	orrs	r2, r3
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800238e:	bf00      	nop
 8002390:	371c      	adds	r7, #28
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800239a:	b480      	push	{r7}
 800239c:	b087      	sub	sp, #28
 800239e:	af00      	add	r7, sp, #0
 80023a0:	60f8      	str	r0, [r7, #12]
 80023a2:	60b9      	str	r1, [r7, #8]
 80023a4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	3330      	adds	r3, #48	; 0x30
 80023aa:	461a      	mov	r2, r3
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	0a1b      	lsrs	r3, r3, #8
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	f003 030c 	and.w	r3, r3, #12
 80023b6:	4413      	add	r3, r2
 80023b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	f003 031f 	and.w	r3, r3, #31
 80023c4:	211f      	movs	r1, #31
 80023c6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ca:	43db      	mvns	r3, r3
 80023cc:	401a      	ands	r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	0e9b      	lsrs	r3, r3, #26
 80023d2:	f003 011f 	and.w	r1, r3, #31
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	f003 031f 	and.w	r3, r3, #31
 80023dc:	fa01 f303 	lsl.w	r3, r1, r3
 80023e0:	431a      	orrs	r2, r3
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80023e6:	bf00      	nop
 80023e8:	371c      	adds	r7, #28
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr

080023f2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80023f2:	b480      	push	{r7}
 80023f4:	b087      	sub	sp, #28
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	60f8      	str	r0, [r7, #12]
 80023fa:	60b9      	str	r1, [r7, #8]
 80023fc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	3314      	adds	r3, #20
 8002402:	461a      	mov	r2, r3
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	0e5b      	lsrs	r3, r3, #25
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	f003 0304 	and.w	r3, r3, #4
 800240e:	4413      	add	r3, r2
 8002410:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	0d1b      	lsrs	r3, r3, #20
 800241a:	f003 031f 	and.w	r3, r3, #31
 800241e:	2107      	movs	r1, #7
 8002420:	fa01 f303 	lsl.w	r3, r1, r3
 8002424:	43db      	mvns	r3, r3
 8002426:	401a      	ands	r2, r3
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	0d1b      	lsrs	r3, r3, #20
 800242c:	f003 031f 	and.w	r3, r3, #31
 8002430:	6879      	ldr	r1, [r7, #4]
 8002432:	fa01 f303 	lsl.w	r3, r1, r3
 8002436:	431a      	orrs	r2, r3
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800243c:	bf00      	nop
 800243e:	371c      	adds	r7, #28
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002460:	43db      	mvns	r3, r3
 8002462:	401a      	ands	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f003 0318 	and.w	r3, r3, #24
 800246a:	4908      	ldr	r1, [pc, #32]	; (800248c <LL_ADC_SetChannelSingleDiff+0x44>)
 800246c:	40d9      	lsrs	r1, r3
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	400b      	ands	r3, r1
 8002472:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002476:	431a      	orrs	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800247e:	bf00      	nop
 8002480:	3714      	adds	r7, #20
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	0007ffff 	.word	0x0007ffff

08002490 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80024a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	6093      	str	r3, [r2, #8]
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80024c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024c8:	d101      	bne.n	80024ce <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80024ca:	2301      	movs	r3, #1
 80024cc:	e000      	b.n	80024d0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80024ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024f0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002514:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002518:	d101      	bne.n	800251e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800251a:	2301      	movs	r3, #1
 800251c:	e000      	b.n	8002520 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	2b01      	cmp	r3, #1
 800253e:	d101      	bne.n	8002544 <LL_ADC_IsEnabled+0x18>
 8002540:	2301      	movs	r3, #1
 8002542:	e000      	b.n	8002546 <LL_ADC_IsEnabled+0x1a>
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002552:	b480      	push	{r7}
 8002554:	b083      	sub	sp, #12
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 0304 	and.w	r3, r3, #4
 8002562:	2b04      	cmp	r3, #4
 8002564:	d101      	bne.n	800256a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002566:	2301      	movs	r3, #1
 8002568:	e000      	b.n	800256c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f003 0308 	and.w	r3, r3, #8
 8002588:	2b08      	cmp	r3, #8
 800258a:	d101      	bne.n	8002590 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800258c:	2301      	movs	r3, #1
 800258e:	e000      	b.n	8002592 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
	...

080025a0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b088      	sub	sp, #32
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025a8:	2300      	movs	r3, #0
 80025aa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80025ac:	2300      	movs	r3, #0
 80025ae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e12c      	b.n	8002814 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d109      	bne.n	80025dc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f7ff fa77 	bl	8001abc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7ff ff67 	bl	80024b4 <LL_ADC_IsDeepPowerDownEnabled>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d004      	beq.n	80025f6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff ff4d 	bl	8002490 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff ff82 	bl	8002504 <LL_ADC_IsInternalRegulatorEnabled>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d115      	bne.n	8002632 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f7ff ff66 	bl	80024dc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002610:	4b82      	ldr	r3, [pc, #520]	; (800281c <HAL_ADC_Init+0x27c>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	099b      	lsrs	r3, r3, #6
 8002616:	4a82      	ldr	r2, [pc, #520]	; (8002820 <HAL_ADC_Init+0x280>)
 8002618:	fba2 2303 	umull	r2, r3, r2, r3
 800261c:	099b      	lsrs	r3, r3, #6
 800261e:	3301      	adds	r3, #1
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002624:	e002      	b.n	800262c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	3b01      	subs	r3, #1
 800262a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1f9      	bne.n	8002626 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff ff64 	bl	8002504 <LL_ADC_IsInternalRegulatorEnabled>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d10d      	bne.n	800265e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002646:	f043 0210 	orr.w	r2, r3, #16
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002652:	f043 0201 	orr.w	r2, r3, #1
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff ff75 	bl	8002552 <LL_ADC_REG_IsConversionOngoing>
 8002668:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800266e:	f003 0310 	and.w	r3, r3, #16
 8002672:	2b00      	cmp	r3, #0
 8002674:	f040 80c5 	bne.w	8002802 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	2b00      	cmp	r3, #0
 800267c:	f040 80c1 	bne.w	8002802 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002684:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002688:	f043 0202 	orr.w	r2, r3, #2
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff ff49 	bl	800252c <LL_ADC_IsEnabled>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d10b      	bne.n	80026b8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026a0:	4860      	ldr	r0, [pc, #384]	; (8002824 <HAL_ADC_Init+0x284>)
 80026a2:	f7ff ff43 	bl	800252c <LL_ADC_IsEnabled>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d105      	bne.n	80026b8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	4619      	mov	r1, r3
 80026b2:	485d      	ldr	r0, [pc, #372]	; (8002828 <HAL_ADC_Init+0x288>)
 80026b4:	f7ff fde8 	bl	8002288 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	7e5b      	ldrb	r3, [r3, #25]
 80026bc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026c2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80026c8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80026ce:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026d6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026d8:	4313      	orrs	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d106      	bne.n	80026f4 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ea:	3b01      	subs	r3, #1
 80026ec:	045b      	lsls	r3, r3, #17
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d009      	beq.n	8002710 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002700:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002708:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	4313      	orrs	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68da      	ldr	r2, [r3, #12]
 8002716:	4b45      	ldr	r3, [pc, #276]	; (800282c <HAL_ADC_Init+0x28c>)
 8002718:	4013      	ands	r3, r2
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	6812      	ldr	r2, [r2, #0]
 800271e:	69b9      	ldr	r1, [r7, #24]
 8002720:	430b      	orrs	r3, r1
 8002722:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff ff12 	bl	8002552 <LL_ADC_REG_IsConversionOngoing>
 800272e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff ff1f 	bl	8002578 <LL_ADC_INJ_IsConversionOngoing>
 800273a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d13d      	bne.n	80027be <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d13a      	bne.n	80027be <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800274c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002754:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002756:	4313      	orrs	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002764:	f023 0302 	bic.w	r3, r3, #2
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	6812      	ldr	r2, [r2, #0]
 800276c:	69b9      	ldr	r1, [r7, #24]
 800276e:	430b      	orrs	r3, r1
 8002770:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002778:	2b01      	cmp	r3, #1
 800277a:	d118      	bne.n	80027ae <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002786:	f023 0304 	bic.w	r3, r3, #4
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002792:	4311      	orrs	r1, r2
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002798:	4311      	orrs	r1, r2
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800279e:	430a      	orrs	r2, r1
 80027a0:	431a      	orrs	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f042 0201 	orr.w	r2, r2, #1
 80027aa:	611a      	str	r2, [r3, #16]
 80027ac:	e007      	b.n	80027be <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	691a      	ldr	r2, [r3, #16]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 0201 	bic.w	r2, r2, #1
 80027bc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d10c      	bne.n	80027e0 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027cc:	f023 010f 	bic.w	r1, r3, #15
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	69db      	ldr	r3, [r3, #28]
 80027d4:	1e5a      	subs	r2, r3, #1
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	430a      	orrs	r2, r1
 80027dc:	631a      	str	r2, [r3, #48]	; 0x30
 80027de:	e007      	b.n	80027f0 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f022 020f 	bic.w	r2, r2, #15
 80027ee:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f4:	f023 0303 	bic.w	r3, r3, #3
 80027f8:	f043 0201 	orr.w	r2, r3, #1
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	655a      	str	r2, [r3, #84]	; 0x54
 8002800:	e007      	b.n	8002812 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002806:	f043 0210 	orr.w	r2, r3, #16
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002812:	7ffb      	ldrb	r3, [r7, #31]
}
 8002814:	4618      	mov	r0, r3
 8002816:	3720      	adds	r7, #32
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	20000000 	.word	0x20000000
 8002820:	053e2d63 	.word	0x053e2d63
 8002824:	50040000 	.word	0x50040000
 8002828:	50040300 	.word	0x50040300
 800282c:	fff0c007 	.word	0xfff0c007

08002830 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b0b6      	sub	sp, #216	; 0xd8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800283a:	2300      	movs	r3, #0
 800283c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002840:	2300      	movs	r3, #0
 8002842:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800284a:	2b01      	cmp	r3, #1
 800284c:	d101      	bne.n	8002852 <HAL_ADC_ConfigChannel+0x22>
 800284e:	2302      	movs	r3, #2
 8002850:	e3b9      	b.n	8002fc6 <HAL_ADC_ConfigChannel+0x796>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2201      	movs	r2, #1
 8002856:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff fe77 	bl	8002552 <LL_ADC_REG_IsConversionOngoing>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	f040 839e 	bne.w	8002fa8 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	2b05      	cmp	r3, #5
 8002872:	d824      	bhi.n	80028be <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	3b02      	subs	r3, #2
 800287a:	2b03      	cmp	r3, #3
 800287c:	d81b      	bhi.n	80028b6 <HAL_ADC_ConfigChannel+0x86>
 800287e:	a201      	add	r2, pc, #4	; (adr r2, 8002884 <HAL_ADC_ConfigChannel+0x54>)
 8002880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002884:	08002895 	.word	0x08002895
 8002888:	0800289d 	.word	0x0800289d
 800288c:	080028a5 	.word	0x080028a5
 8002890:	080028ad 	.word	0x080028ad
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	220c      	movs	r2, #12
 8002898:	605a      	str	r2, [r3, #4]
          break;
 800289a:	e011      	b.n	80028c0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	2212      	movs	r2, #18
 80028a0:	605a      	str	r2, [r3, #4]
          break;
 80028a2:	e00d      	b.n	80028c0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	2218      	movs	r2, #24
 80028a8:	605a      	str	r2, [r3, #4]
          break;
 80028aa:	e009      	b.n	80028c0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028b2:	605a      	str	r2, [r3, #4]
          break;
 80028b4:	e004      	b.n	80028c0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	2206      	movs	r2, #6
 80028ba:	605a      	str	r2, [r3, #4]
          break;
 80028bc:	e000      	b.n	80028c0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80028be:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6818      	ldr	r0, [r3, #0]
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	6859      	ldr	r1, [r3, #4]
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	461a      	mov	r2, r3
 80028ce:	f7ff fd64 	bl	800239a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7ff fe3b 	bl	8002552 <LL_ADC_REG_IsConversionOngoing>
 80028dc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7ff fe47 	bl	8002578 <LL_ADC_INJ_IsConversionOngoing>
 80028ea:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028ee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f040 81a6 	bne.w	8002c44 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80028f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f040 81a1 	bne.w	8002c44 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6818      	ldr	r0, [r3, #0]
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	6819      	ldr	r1, [r3, #0]
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	461a      	mov	r2, r3
 8002910:	f7ff fd6f 	bl	80023f2 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	695a      	ldr	r2, [r3, #20]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	08db      	lsrs	r3, r3, #3
 8002920:	f003 0303 	and.w	r3, r3, #3
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	2b04      	cmp	r3, #4
 8002934:	d00a      	beq.n	800294c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6818      	ldr	r0, [r3, #0]
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	6919      	ldr	r1, [r3, #16]
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002946:	f7ff fcd3 	bl	80022f0 <LL_ADC_SetOffset>
 800294a:	e17b      	b.n	8002c44 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2100      	movs	r1, #0
 8002952:	4618      	mov	r0, r3
 8002954:	f7ff fcf0 	bl	8002338 <LL_ADC_GetOffsetChannel>
 8002958:	4603      	mov	r3, r0
 800295a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800295e:	2b00      	cmp	r3, #0
 8002960:	d10a      	bne.n	8002978 <HAL_ADC_ConfigChannel+0x148>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2100      	movs	r1, #0
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff fce5 	bl	8002338 <LL_ADC_GetOffsetChannel>
 800296e:	4603      	mov	r3, r0
 8002970:	0e9b      	lsrs	r3, r3, #26
 8002972:	f003 021f 	and.w	r2, r3, #31
 8002976:	e01e      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x186>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2100      	movs	r1, #0
 800297e:	4618      	mov	r0, r3
 8002980:	f7ff fcda 	bl	8002338 <LL_ADC_GetOffsetChannel>
 8002984:	4603      	mov	r3, r0
 8002986:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800298e:	fa93 f3a3 	rbit	r3, r3
 8002992:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002996:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800299a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800299e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80029a6:	2320      	movs	r3, #32
 80029a8:	e004      	b.n	80029b4 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80029aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80029ae:	fab3 f383 	clz	r3, r3
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d105      	bne.n	80029ce <HAL_ADC_ConfigChannel+0x19e>
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	0e9b      	lsrs	r3, r3, #26
 80029c8:	f003 031f 	and.w	r3, r3, #31
 80029cc:	e018      	b.n	8002a00 <HAL_ADC_ConfigChannel+0x1d0>
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80029da:	fa93 f3a3 	rbit	r3, r3
 80029de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80029e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80029e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80029ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d101      	bne.n	80029f6 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80029f2:	2320      	movs	r3, #32
 80029f4:	e004      	b.n	8002a00 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80029f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80029fa:	fab3 f383 	clz	r3, r3
 80029fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d106      	bne.n	8002a12 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff fca9 	bl	8002364 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2101      	movs	r1, #1
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff fc8d 	bl	8002338 <LL_ADC_GetOffsetChannel>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d10a      	bne.n	8002a3e <HAL_ADC_ConfigChannel+0x20e>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff fc82 	bl	8002338 <LL_ADC_GetOffsetChannel>
 8002a34:	4603      	mov	r3, r0
 8002a36:	0e9b      	lsrs	r3, r3, #26
 8002a38:	f003 021f 	and.w	r2, r3, #31
 8002a3c:	e01e      	b.n	8002a7c <HAL_ADC_ConfigChannel+0x24c>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2101      	movs	r1, #1
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff fc77 	bl	8002338 <LL_ADC_GetOffsetChannel>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a50:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002a54:	fa93 f3a3 	rbit	r3, r3
 8002a58:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002a5c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002a64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d101      	bne.n	8002a70 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002a6c:	2320      	movs	r3, #32
 8002a6e:	e004      	b.n	8002a7a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002a70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a74:	fab3 f383 	clz	r3, r3
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d105      	bne.n	8002a94 <HAL_ADC_ConfigChannel+0x264>
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	0e9b      	lsrs	r3, r3, #26
 8002a8e:	f003 031f 	and.w	r3, r3, #31
 8002a92:	e018      	b.n	8002ac6 <HAL_ADC_ConfigChannel+0x296>
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002aa0:	fa93 f3a3 	rbit	r3, r3
 8002aa4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002aa8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002aac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002ab0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d101      	bne.n	8002abc <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002ab8:	2320      	movs	r3, #32
 8002aba:	e004      	b.n	8002ac6 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002abc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ac0:	fab3 f383 	clz	r3, r3
 8002ac4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d106      	bne.n	8002ad8 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	2101      	movs	r1, #1
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7ff fc46 	bl	8002364 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2102      	movs	r1, #2
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff fc2a 	bl	8002338 <LL_ADC_GetOffsetChannel>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10a      	bne.n	8002b04 <HAL_ADC_ConfigChannel+0x2d4>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2102      	movs	r1, #2
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7ff fc1f 	bl	8002338 <LL_ADC_GetOffsetChannel>
 8002afa:	4603      	mov	r3, r0
 8002afc:	0e9b      	lsrs	r3, r3, #26
 8002afe:	f003 021f 	and.w	r2, r3, #31
 8002b02:	e01e      	b.n	8002b42 <HAL_ADC_ConfigChannel+0x312>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2102      	movs	r1, #2
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7ff fc14 	bl	8002338 <LL_ADC_GetOffsetChannel>
 8002b10:	4603      	mov	r3, r0
 8002b12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b1a:	fa93 f3a3 	rbit	r3, r3
 8002b1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002b22:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002b2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002b32:	2320      	movs	r3, #32
 8002b34:	e004      	b.n	8002b40 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002b36:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b3a:	fab3 f383 	clz	r3, r3
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d105      	bne.n	8002b5a <HAL_ADC_ConfigChannel+0x32a>
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	0e9b      	lsrs	r3, r3, #26
 8002b54:	f003 031f 	and.w	r3, r3, #31
 8002b58:	e016      	b.n	8002b88 <HAL_ADC_ConfigChannel+0x358>
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b62:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b66:	fa93 f3a3 	rbit	r3, r3
 8002b6a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002b6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002b72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002b7a:	2320      	movs	r3, #32
 8002b7c:	e004      	b.n	8002b88 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002b7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b82:	fab3 f383 	clz	r3, r3
 8002b86:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d106      	bne.n	8002b9a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2200      	movs	r2, #0
 8002b92:	2102      	movs	r1, #2
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff fbe5 	bl	8002364 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2103      	movs	r1, #3
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff fbc9 	bl	8002338 <LL_ADC_GetOffsetChannel>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d10a      	bne.n	8002bc6 <HAL_ADC_ConfigChannel+0x396>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2103      	movs	r1, #3
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7ff fbbe 	bl	8002338 <LL_ADC_GetOffsetChannel>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	0e9b      	lsrs	r3, r3, #26
 8002bc0:	f003 021f 	and.w	r2, r3, #31
 8002bc4:	e017      	b.n	8002bf6 <HAL_ADC_ConfigChannel+0x3c6>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2103      	movs	r1, #3
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7ff fbb3 	bl	8002338 <LL_ADC_GetOffsetChannel>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bd8:	fa93 f3a3 	rbit	r3, r3
 8002bdc:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002bde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002be0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002be2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d101      	bne.n	8002bec <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002be8:	2320      	movs	r3, #32
 8002bea:	e003      	b.n	8002bf4 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002bec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bee:	fab3 f383 	clz	r3, r3
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d105      	bne.n	8002c0e <HAL_ADC_ConfigChannel+0x3de>
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	0e9b      	lsrs	r3, r3, #26
 8002c08:	f003 031f 	and.w	r3, r3, #31
 8002c0c:	e011      	b.n	8002c32 <HAL_ADC_ConfigChannel+0x402>
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c16:	fa93 f3a3 	rbit	r3, r3
 8002c1a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002c1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c1e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002c20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002c26:	2320      	movs	r3, #32
 8002c28:	e003      	b.n	8002c32 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002c2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c2c:	fab3 f383 	clz	r3, r3
 8002c30:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d106      	bne.n	8002c44 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	2103      	movs	r1, #3
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7ff fb90 	bl	8002364 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7ff fc6f 	bl	800252c <LL_ADC_IsEnabled>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f040 813f 	bne.w	8002ed4 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6818      	ldr	r0, [r3, #0]
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	6819      	ldr	r1, [r3, #0]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	461a      	mov	r2, r3
 8002c64:	f7ff fbf0 	bl	8002448 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	4a8e      	ldr	r2, [pc, #568]	; (8002ea8 <HAL_ADC_ConfigChannel+0x678>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	f040 8130 	bne.w	8002ed4 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d10b      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x46c>
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	0e9b      	lsrs	r3, r3, #26
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	f003 031f 	and.w	r3, r3, #31
 8002c90:	2b09      	cmp	r3, #9
 8002c92:	bf94      	ite	ls
 8002c94:	2301      	movls	r3, #1
 8002c96:	2300      	movhi	r3, #0
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	e019      	b.n	8002cd0 <HAL_ADC_ConfigChannel+0x4a0>
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ca4:	fa93 f3a3 	rbit	r3, r3
 8002ca8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002caa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cac:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002cae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d101      	bne.n	8002cb8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002cb4:	2320      	movs	r3, #32
 8002cb6:	e003      	b.n	8002cc0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002cb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cba:	fab3 f383 	clz	r3, r3
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	f003 031f 	and.w	r3, r3, #31
 8002cc6:	2b09      	cmp	r3, #9
 8002cc8:	bf94      	ite	ls
 8002cca:	2301      	movls	r3, #1
 8002ccc:	2300      	movhi	r3, #0
 8002cce:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d079      	beq.n	8002dc8 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d107      	bne.n	8002cf0 <HAL_ADC_ConfigChannel+0x4c0>
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	0e9b      	lsrs	r3, r3, #26
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	069b      	lsls	r3, r3, #26
 8002cea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cee:	e015      	b.n	8002d1c <HAL_ADC_ConfigChannel+0x4ec>
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cf8:	fa93 f3a3 	rbit	r3, r3
 8002cfc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002cfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d00:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002d02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d101      	bne.n	8002d0c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002d08:	2320      	movs	r3, #32
 8002d0a:	e003      	b.n	8002d14 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002d0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d0e:	fab3 f383 	clz	r3, r3
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	3301      	adds	r3, #1
 8002d16:	069b      	lsls	r3, r3, #26
 8002d18:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d109      	bne.n	8002d3c <HAL_ADC_ConfigChannel+0x50c>
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	0e9b      	lsrs	r3, r3, #26
 8002d2e:	3301      	adds	r3, #1
 8002d30:	f003 031f 	and.w	r3, r3, #31
 8002d34:	2101      	movs	r1, #1
 8002d36:	fa01 f303 	lsl.w	r3, r1, r3
 8002d3a:	e017      	b.n	8002d6c <HAL_ADC_ConfigChannel+0x53c>
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d44:	fa93 f3a3 	rbit	r3, r3
 8002d48:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002d4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d4c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002d4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d101      	bne.n	8002d58 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002d54:	2320      	movs	r3, #32
 8002d56:	e003      	b.n	8002d60 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002d58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d5a:	fab3 f383 	clz	r3, r3
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	3301      	adds	r3, #1
 8002d62:	f003 031f 	and.w	r3, r3, #31
 8002d66:	2101      	movs	r1, #1
 8002d68:	fa01 f303 	lsl.w	r3, r1, r3
 8002d6c:	ea42 0103 	orr.w	r1, r2, r3
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10a      	bne.n	8002d92 <HAL_ADC_ConfigChannel+0x562>
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	0e9b      	lsrs	r3, r3, #26
 8002d82:	3301      	adds	r3, #1
 8002d84:	f003 021f 	and.w	r2, r3, #31
 8002d88:	4613      	mov	r3, r2
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	4413      	add	r3, r2
 8002d8e:	051b      	lsls	r3, r3, #20
 8002d90:	e018      	b.n	8002dc4 <HAL_ADC_ConfigChannel+0x594>
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d9a:	fa93 f3a3 	rbit	r3, r3
 8002d9e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002da2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d101      	bne.n	8002dae <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002daa:	2320      	movs	r3, #32
 8002dac:	e003      	b.n	8002db6 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002dae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002db0:	fab3 f383 	clz	r3, r3
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	3301      	adds	r3, #1
 8002db8:	f003 021f 	and.w	r2, r3, #31
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	4413      	add	r3, r2
 8002dc2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dc4:	430b      	orrs	r3, r1
 8002dc6:	e080      	b.n	8002eca <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d107      	bne.n	8002de4 <HAL_ADC_ConfigChannel+0x5b4>
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	0e9b      	lsrs	r3, r3, #26
 8002dda:	3301      	adds	r3, #1
 8002ddc:	069b      	lsls	r3, r3, #26
 8002dde:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002de2:	e015      	b.n	8002e10 <HAL_ADC_ConfigChannel+0x5e0>
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dec:	fa93 f3a3 	rbit	r3, r3
 8002df0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d101      	bne.n	8002e00 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002dfc:	2320      	movs	r3, #32
 8002dfe:	e003      	b.n	8002e08 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e02:	fab3 f383 	clz	r3, r3
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	3301      	adds	r3, #1
 8002e0a:	069b      	lsls	r3, r3, #26
 8002e0c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d109      	bne.n	8002e30 <HAL_ADC_ConfigChannel+0x600>
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	0e9b      	lsrs	r3, r3, #26
 8002e22:	3301      	adds	r3, #1
 8002e24:	f003 031f 	and.w	r3, r3, #31
 8002e28:	2101      	movs	r1, #1
 8002e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e2e:	e017      	b.n	8002e60 <HAL_ADC_ConfigChannel+0x630>
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e36:	6a3b      	ldr	r3, [r7, #32]
 8002e38:	fa93 f3a3 	rbit	r3, r3
 8002e3c:	61fb      	str	r3, [r7, #28]
  return result;
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d101      	bne.n	8002e4c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002e48:	2320      	movs	r3, #32
 8002e4a:	e003      	b.n	8002e54 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4e:	fab3 f383 	clz	r3, r3
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	3301      	adds	r3, #1
 8002e56:	f003 031f 	and.w	r3, r3, #31
 8002e5a:	2101      	movs	r1, #1
 8002e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e60:	ea42 0103 	orr.w	r1, r2, r3
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d10d      	bne.n	8002e8c <HAL_ADC_ConfigChannel+0x65c>
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	0e9b      	lsrs	r3, r3, #26
 8002e76:	3301      	adds	r3, #1
 8002e78:	f003 021f 	and.w	r2, r3, #31
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	4413      	add	r3, r2
 8002e82:	3b1e      	subs	r3, #30
 8002e84:	051b      	lsls	r3, r3, #20
 8002e86:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e8a:	e01d      	b.n	8002ec8 <HAL_ADC_ConfigChannel+0x698>
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	fa93 f3a3 	rbit	r3, r3
 8002e98:	613b      	str	r3, [r7, #16]
  return result;
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d103      	bne.n	8002eac <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002ea4:	2320      	movs	r3, #32
 8002ea6:	e005      	b.n	8002eb4 <HAL_ADC_ConfigChannel+0x684>
 8002ea8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	fab3 f383 	clz	r3, r3
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	f003 021f 	and.w	r2, r3, #31
 8002eba:	4613      	mov	r3, r2
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	4413      	add	r3, r2
 8002ec0:	3b1e      	subs	r3, #30
 8002ec2:	051b      	lsls	r3, r3, #20
 8002ec4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ec8:	430b      	orrs	r3, r1
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	6892      	ldr	r2, [r2, #8]
 8002ece:	4619      	mov	r1, r3
 8002ed0:	f7ff fa8f 	bl	80023f2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	4b3d      	ldr	r3, [pc, #244]	; (8002fd0 <HAL_ADC_ConfigChannel+0x7a0>)
 8002eda:	4013      	ands	r3, r2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d06c      	beq.n	8002fba <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ee0:	483c      	ldr	r0, [pc, #240]	; (8002fd4 <HAL_ADC_ConfigChannel+0x7a4>)
 8002ee2:	f7ff f9f7 	bl	80022d4 <LL_ADC_GetCommonPathInternalCh>
 8002ee6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a3a      	ldr	r2, [pc, #232]	; (8002fd8 <HAL_ADC_ConfigChannel+0x7a8>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d127      	bne.n	8002f44 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ef4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ef8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d121      	bne.n	8002f44 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a35      	ldr	r2, [pc, #212]	; (8002fdc <HAL_ADC_ConfigChannel+0x7ac>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d157      	bne.n	8002fba <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f0a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f0e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f12:	4619      	mov	r1, r3
 8002f14:	482f      	ldr	r0, [pc, #188]	; (8002fd4 <HAL_ADC_ConfigChannel+0x7a4>)
 8002f16:	f7ff f9ca 	bl	80022ae <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f1a:	4b31      	ldr	r3, [pc, #196]	; (8002fe0 <HAL_ADC_ConfigChannel+0x7b0>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	099b      	lsrs	r3, r3, #6
 8002f20:	4a30      	ldr	r2, [pc, #192]	; (8002fe4 <HAL_ADC_ConfigChannel+0x7b4>)
 8002f22:	fba2 2303 	umull	r2, r3, r2, r3
 8002f26:	099b      	lsrs	r3, r3, #6
 8002f28:	1c5a      	adds	r2, r3, #1
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	4413      	add	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002f34:	e002      	b.n	8002f3c <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1f9      	bne.n	8002f36 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f42:	e03a      	b.n	8002fba <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a27      	ldr	r2, [pc, #156]	; (8002fe8 <HAL_ADC_ConfigChannel+0x7b8>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d113      	bne.n	8002f76 <HAL_ADC_ConfigChannel+0x746>
 8002f4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d10d      	bne.n	8002f76 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a1f      	ldr	r2, [pc, #124]	; (8002fdc <HAL_ADC_ConfigChannel+0x7ac>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d12a      	bne.n	8002fba <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	4819      	ldr	r0, [pc, #100]	; (8002fd4 <HAL_ADC_ConfigChannel+0x7a4>)
 8002f70:	f7ff f99d 	bl	80022ae <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f74:	e021      	b.n	8002fba <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a1c      	ldr	r2, [pc, #112]	; (8002fec <HAL_ADC_ConfigChannel+0x7bc>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d11c      	bne.n	8002fba <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002f80:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d116      	bne.n	8002fba <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a12      	ldr	r2, [pc, #72]	; (8002fdc <HAL_ADC_ConfigChannel+0x7ac>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d111      	bne.n	8002fba <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f96:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f9a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	480c      	ldr	r0, [pc, #48]	; (8002fd4 <HAL_ADC_ConfigChannel+0x7a4>)
 8002fa2:	f7ff f984 	bl	80022ae <LL_ADC_SetCommonPathInternalCh>
 8002fa6:	e008      	b.n	8002fba <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fac:	f043 0220 	orr.w	r2, r3, #32
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002fc2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	37d8      	adds	r7, #216	; 0xd8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	80080000 	.word	0x80080000
 8002fd4:	50040300 	.word	0x50040300
 8002fd8:	c7520000 	.word	0xc7520000
 8002fdc:	50040000 	.word	0x50040000
 8002fe0:	20000000 	.word	0x20000000
 8002fe4:	053e2d63 	.word	0x053e2d63
 8002fe8:	cb840000 	.word	0xcb840000
 8002fec:	80000001 	.word	0x80000001

08002ff0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f003 0307 	and.w	r3, r3, #7
 8002ffe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003000:	4b0c      	ldr	r3, [pc, #48]	; (8003034 <__NVIC_SetPriorityGrouping+0x44>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003006:	68ba      	ldr	r2, [r7, #8]
 8003008:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800300c:	4013      	ands	r3, r2
 800300e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003018:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800301c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003020:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003022:	4a04      	ldr	r2, [pc, #16]	; (8003034 <__NVIC_SetPriorityGrouping+0x44>)
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	60d3      	str	r3, [r2, #12]
}
 8003028:	bf00      	nop
 800302a:	3714      	adds	r7, #20
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	e000ed00 	.word	0xe000ed00

08003038 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800303c:	4b04      	ldr	r3, [pc, #16]	; (8003050 <__NVIC_GetPriorityGrouping+0x18>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	0a1b      	lsrs	r3, r3, #8
 8003042:	f003 0307 	and.w	r3, r3, #7
}
 8003046:	4618      	mov	r0, r3
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	e000ed00 	.word	0xe000ed00

08003054 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	4603      	mov	r3, r0
 800305c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800305e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003062:	2b00      	cmp	r3, #0
 8003064:	db0b      	blt.n	800307e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003066:	79fb      	ldrb	r3, [r7, #7]
 8003068:	f003 021f 	and.w	r2, r3, #31
 800306c:	4907      	ldr	r1, [pc, #28]	; (800308c <__NVIC_EnableIRQ+0x38>)
 800306e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003072:	095b      	lsrs	r3, r3, #5
 8003074:	2001      	movs	r0, #1
 8003076:	fa00 f202 	lsl.w	r2, r0, r2
 800307a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	e000e100 	.word	0xe000e100

08003090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	6039      	str	r1, [r7, #0]
 800309a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800309c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	db0a      	blt.n	80030ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	b2da      	uxtb	r2, r3
 80030a8:	490c      	ldr	r1, [pc, #48]	; (80030dc <__NVIC_SetPriority+0x4c>)
 80030aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ae:	0112      	lsls	r2, r2, #4
 80030b0:	b2d2      	uxtb	r2, r2
 80030b2:	440b      	add	r3, r1
 80030b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030b8:	e00a      	b.n	80030d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	b2da      	uxtb	r2, r3
 80030be:	4908      	ldr	r1, [pc, #32]	; (80030e0 <__NVIC_SetPriority+0x50>)
 80030c0:	79fb      	ldrb	r3, [r7, #7]
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	3b04      	subs	r3, #4
 80030c8:	0112      	lsls	r2, r2, #4
 80030ca:	b2d2      	uxtb	r2, r2
 80030cc:	440b      	add	r3, r1
 80030ce:	761a      	strb	r2, [r3, #24]
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	e000e100 	.word	0xe000e100
 80030e0:	e000ed00 	.word	0xe000ed00

080030e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b089      	sub	sp, #36	; 0x24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f003 0307 	and.w	r3, r3, #7
 80030f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	f1c3 0307 	rsb	r3, r3, #7
 80030fe:	2b04      	cmp	r3, #4
 8003100:	bf28      	it	cs
 8003102:	2304      	movcs	r3, #4
 8003104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	3304      	adds	r3, #4
 800310a:	2b06      	cmp	r3, #6
 800310c:	d902      	bls.n	8003114 <NVIC_EncodePriority+0x30>
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	3b03      	subs	r3, #3
 8003112:	e000      	b.n	8003116 <NVIC_EncodePriority+0x32>
 8003114:	2300      	movs	r3, #0
 8003116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003118:	f04f 32ff 	mov.w	r2, #4294967295
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	fa02 f303 	lsl.w	r3, r2, r3
 8003122:	43da      	mvns	r2, r3
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	401a      	ands	r2, r3
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800312c:	f04f 31ff 	mov.w	r1, #4294967295
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	fa01 f303 	lsl.w	r3, r1, r3
 8003136:	43d9      	mvns	r1, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800313c:	4313      	orrs	r3, r2
         );
}
 800313e:	4618      	mov	r0, r3
 8003140:	3724      	adds	r7, #36	; 0x24
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
	...

0800314c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8003150:	f3bf 8f4f 	dsb	sy
}
 8003154:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003156:	4b06      	ldr	r3, [pc, #24]	; (8003170 <__NVIC_SystemReset+0x24>)
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800315e:	4904      	ldr	r1, [pc, #16]	; (8003170 <__NVIC_SystemReset+0x24>)
 8003160:	4b04      	ldr	r3, [pc, #16]	; (8003174 <__NVIC_SystemReset+0x28>)
 8003162:	4313      	orrs	r3, r2
 8003164:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003166:	f3bf 8f4f 	dsb	sy
}
 800316a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800316c:	bf00      	nop
 800316e:	e7fd      	b.n	800316c <__NVIC_SystemReset+0x20>
 8003170:	e000ed00 	.word	0xe000ed00
 8003174:	05fa0004 	.word	0x05fa0004

08003178 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f7ff ff35 	bl	8002ff0 <__NVIC_SetPriorityGrouping>
}
 8003186:	bf00      	nop
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b086      	sub	sp, #24
 8003192:	af00      	add	r7, sp, #0
 8003194:	4603      	mov	r3, r0
 8003196:	60b9      	str	r1, [r7, #8]
 8003198:	607a      	str	r2, [r7, #4]
 800319a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800319c:	2300      	movs	r3, #0
 800319e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80031a0:	f7ff ff4a 	bl	8003038 <__NVIC_GetPriorityGrouping>
 80031a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	68b9      	ldr	r1, [r7, #8]
 80031aa:	6978      	ldr	r0, [r7, #20]
 80031ac:	f7ff ff9a 	bl	80030e4 <NVIC_EncodePriority>
 80031b0:	4602      	mov	r2, r0
 80031b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031b6:	4611      	mov	r1, r2
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff ff69 	bl	8003090 <__NVIC_SetPriority>
}
 80031be:	bf00      	nop
 80031c0:	3718      	adds	r7, #24
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b082      	sub	sp, #8
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	4603      	mov	r3, r0
 80031ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff ff3d 	bl	8003054 <__NVIC_EnableIRQ>
}
 80031da:	bf00      	nop
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80031e6:	f7ff ffb1 	bl	800314c <__NVIC_SystemReset>
	...

080031ec <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e054      	b.n	80032a8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	7f5b      	ldrb	r3, [r3, #29]
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b00      	cmp	r3, #0
 8003206:	d105      	bne.n	8003214 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f7fe fcd2 	bl	8001bb8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2202      	movs	r2, #2
 8003218:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	791b      	ldrb	r3, [r3, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d10c      	bne.n	800323c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a22      	ldr	r2, [pc, #136]	; (80032b0 <HAL_CRC_Init+0xc4>)
 8003228:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	689a      	ldr	r2, [r3, #8]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 0218 	bic.w	r2, r2, #24
 8003238:	609a      	str	r2, [r3, #8]
 800323a:	e00c      	b.n	8003256 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6899      	ldr	r1, [r3, #8]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	461a      	mov	r2, r3
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f834 	bl	80032b4 <HAL_CRCEx_Polynomial_Set>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e028      	b.n	80032a8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	795b      	ldrb	r3, [r3, #5]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d105      	bne.n	800326a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f04f 32ff 	mov.w	r2, #4294967295
 8003266:	611a      	str	r2, [r3, #16]
 8003268:	e004      	b.n	8003274 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	6912      	ldr	r2, [r2, #16]
 8003272:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	695a      	ldr	r2, [r3, #20]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	430a      	orrs	r2, r1
 8003288:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	699a      	ldr	r2, [r3, #24]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	430a      	orrs	r2, r1
 800329e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3708      	adds	r7, #8
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	04c11db7 	.word	0x04c11db7

080032b4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b087      	sub	sp, #28
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032c0:	2300      	movs	r3, #0
 80032c2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80032c4:	231f      	movs	r3, #31
 80032c6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80032c8:	bf00      	nop
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1e5a      	subs	r2, r3, #1
 80032ce:	613a      	str	r2, [r7, #16]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d009      	beq.n	80032e8 <HAL_CRCEx_Polynomial_Set+0x34>
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	f003 031f 	and.w	r3, r3, #31
 80032da:	68ba      	ldr	r2, [r7, #8]
 80032dc:	fa22 f303 	lsr.w	r3, r2, r3
 80032e0:	f003 0301 	and.w	r3, r3, #1
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d0f0      	beq.n	80032ca <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b18      	cmp	r3, #24
 80032ec:	d846      	bhi.n	800337c <HAL_CRCEx_Polynomial_Set+0xc8>
 80032ee:	a201      	add	r2, pc, #4	; (adr r2, 80032f4 <HAL_CRCEx_Polynomial_Set+0x40>)
 80032f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f4:	08003383 	.word	0x08003383
 80032f8:	0800337d 	.word	0x0800337d
 80032fc:	0800337d 	.word	0x0800337d
 8003300:	0800337d 	.word	0x0800337d
 8003304:	0800337d 	.word	0x0800337d
 8003308:	0800337d 	.word	0x0800337d
 800330c:	0800337d 	.word	0x0800337d
 8003310:	0800337d 	.word	0x0800337d
 8003314:	08003371 	.word	0x08003371
 8003318:	0800337d 	.word	0x0800337d
 800331c:	0800337d 	.word	0x0800337d
 8003320:	0800337d 	.word	0x0800337d
 8003324:	0800337d 	.word	0x0800337d
 8003328:	0800337d 	.word	0x0800337d
 800332c:	0800337d 	.word	0x0800337d
 8003330:	0800337d 	.word	0x0800337d
 8003334:	08003365 	.word	0x08003365
 8003338:	0800337d 	.word	0x0800337d
 800333c:	0800337d 	.word	0x0800337d
 8003340:	0800337d 	.word	0x0800337d
 8003344:	0800337d 	.word	0x0800337d
 8003348:	0800337d 	.word	0x0800337d
 800334c:	0800337d 	.word	0x0800337d
 8003350:	0800337d 	.word	0x0800337d
 8003354:	08003359 	.word	0x08003359
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	2b06      	cmp	r3, #6
 800335c:	d913      	bls.n	8003386 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003362:	e010      	b.n	8003386 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	2b07      	cmp	r3, #7
 8003368:	d90f      	bls.n	800338a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800336e:	e00c      	b.n	800338a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	2b0f      	cmp	r3, #15
 8003374:	d90b      	bls.n	800338e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800337a:	e008      	b.n	800338e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	75fb      	strb	r3, [r7, #23]
      break;
 8003380:	e006      	b.n	8003390 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003382:	bf00      	nop
 8003384:	e004      	b.n	8003390 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003386:	bf00      	nop
 8003388:	e002      	b.n	8003390 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800338a:	bf00      	nop
 800338c:	e000      	b.n	8003390 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800338e:	bf00      	nop
  }
  if (status == HAL_OK)
 8003390:	7dfb      	ldrb	r3, [r7, #23]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d10d      	bne.n	80033b2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f023 0118 	bic.w	r1, r3, #24
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	430a      	orrs	r2, r1
 80033b0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80033b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	371c      	adds	r7, #28
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b087      	sub	sp, #28
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033ca:	2300      	movs	r3, #0
 80033cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033ce:	e154      	b.n	800367a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	2101      	movs	r1, #1
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	fa01 f303 	lsl.w	r3, r1, r3
 80033dc:	4013      	ands	r3, r2
 80033de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f000 8146 	beq.w	8003674 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f003 0303 	and.w	r3, r3, #3
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d005      	beq.n	8003400 <HAL_GPIO_Init+0x40>
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f003 0303 	and.w	r3, r3, #3
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d130      	bne.n	8003462 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	2203      	movs	r2, #3
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	43db      	mvns	r3, r3
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	4013      	ands	r3, r2
 8003416:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	68da      	ldr	r2, [r3, #12]
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	4313      	orrs	r3, r2
 8003428:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003436:	2201      	movs	r2, #1
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	fa02 f303 	lsl.w	r3, r2, r3
 800343e:	43db      	mvns	r3, r3
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	4013      	ands	r3, r2
 8003444:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	091b      	lsrs	r3, r3, #4
 800344c:	f003 0201 	and.w	r2, r3, #1
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	4313      	orrs	r3, r2
 800345a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f003 0303 	and.w	r3, r3, #3
 800346a:	2b03      	cmp	r3, #3
 800346c:	d017      	beq.n	800349e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	2203      	movs	r2, #3
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	43db      	mvns	r3, r3
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	4013      	ands	r3, r2
 8003484:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	689a      	ldr	r2, [r3, #8]
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	4313      	orrs	r3, r2
 8003496:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f003 0303 	and.w	r3, r3, #3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d123      	bne.n	80034f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	08da      	lsrs	r2, r3, #3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	3208      	adds	r2, #8
 80034b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	f003 0307 	and.w	r3, r3, #7
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	220f      	movs	r2, #15
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	43db      	mvns	r3, r3
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	4013      	ands	r3, r2
 80034cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	691a      	ldr	r2, [r3, #16]
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	f003 0307 	and.w	r3, r3, #7
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	fa02 f303 	lsl.w	r3, r2, r3
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	08da      	lsrs	r2, r3, #3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3208      	adds	r2, #8
 80034ec:	6939      	ldr	r1, [r7, #16]
 80034ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	2203      	movs	r2, #3
 80034fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003502:	43db      	mvns	r3, r3
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	4013      	ands	r3, r2
 8003508:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f003 0203 	and.w	r2, r3, #3
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	fa02 f303 	lsl.w	r3, r2, r3
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	4313      	orrs	r3, r2
 800351e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800352e:	2b00      	cmp	r3, #0
 8003530:	f000 80a0 	beq.w	8003674 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003534:	4b58      	ldr	r3, [pc, #352]	; (8003698 <HAL_GPIO_Init+0x2d8>)
 8003536:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003538:	4a57      	ldr	r2, [pc, #348]	; (8003698 <HAL_GPIO_Init+0x2d8>)
 800353a:	f043 0301 	orr.w	r3, r3, #1
 800353e:	6613      	str	r3, [r2, #96]	; 0x60
 8003540:	4b55      	ldr	r3, [pc, #340]	; (8003698 <HAL_GPIO_Init+0x2d8>)
 8003542:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	60bb      	str	r3, [r7, #8]
 800354a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800354c:	4a53      	ldr	r2, [pc, #332]	; (800369c <HAL_GPIO_Init+0x2dc>)
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	089b      	lsrs	r3, r3, #2
 8003552:	3302      	adds	r3, #2
 8003554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003558:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	f003 0303 	and.w	r3, r3, #3
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	220f      	movs	r2, #15
 8003564:	fa02 f303 	lsl.w	r3, r2, r3
 8003568:	43db      	mvns	r3, r3
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	4013      	ands	r3, r2
 800356e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003576:	d019      	beq.n	80035ac <HAL_GPIO_Init+0x1ec>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a49      	ldr	r2, [pc, #292]	; (80036a0 <HAL_GPIO_Init+0x2e0>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d013      	beq.n	80035a8 <HAL_GPIO_Init+0x1e8>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a48      	ldr	r2, [pc, #288]	; (80036a4 <HAL_GPIO_Init+0x2e4>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d00d      	beq.n	80035a4 <HAL_GPIO_Init+0x1e4>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a47      	ldr	r2, [pc, #284]	; (80036a8 <HAL_GPIO_Init+0x2e8>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d007      	beq.n	80035a0 <HAL_GPIO_Init+0x1e0>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a46      	ldr	r2, [pc, #280]	; (80036ac <HAL_GPIO_Init+0x2ec>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d101      	bne.n	800359c <HAL_GPIO_Init+0x1dc>
 8003598:	2304      	movs	r3, #4
 800359a:	e008      	b.n	80035ae <HAL_GPIO_Init+0x1ee>
 800359c:	2307      	movs	r3, #7
 800359e:	e006      	b.n	80035ae <HAL_GPIO_Init+0x1ee>
 80035a0:	2303      	movs	r3, #3
 80035a2:	e004      	b.n	80035ae <HAL_GPIO_Init+0x1ee>
 80035a4:	2302      	movs	r3, #2
 80035a6:	e002      	b.n	80035ae <HAL_GPIO_Init+0x1ee>
 80035a8:	2301      	movs	r3, #1
 80035aa:	e000      	b.n	80035ae <HAL_GPIO_Init+0x1ee>
 80035ac:	2300      	movs	r3, #0
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	f002 0203 	and.w	r2, r2, #3
 80035b4:	0092      	lsls	r2, r2, #2
 80035b6:	4093      	lsls	r3, r2
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80035be:	4937      	ldr	r1, [pc, #220]	; (800369c <HAL_GPIO_Init+0x2dc>)
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	089b      	lsrs	r3, r3, #2
 80035c4:	3302      	adds	r3, #2
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80035cc:	4b38      	ldr	r3, [pc, #224]	; (80036b0 <HAL_GPIO_Init+0x2f0>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	43db      	mvns	r3, r3
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	4013      	ands	r3, r2
 80035da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d003      	beq.n	80035f0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80035f0:	4a2f      	ldr	r2, [pc, #188]	; (80036b0 <HAL_GPIO_Init+0x2f0>)
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80035f6:	4b2e      	ldr	r3, [pc, #184]	; (80036b0 <HAL_GPIO_Init+0x2f0>)
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	43db      	mvns	r3, r3
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	4013      	ands	r3, r2
 8003604:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d003      	beq.n	800361a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	4313      	orrs	r3, r2
 8003618:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800361a:	4a25      	ldr	r2, [pc, #148]	; (80036b0 <HAL_GPIO_Init+0x2f0>)
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003620:	4b23      	ldr	r3, [pc, #140]	; (80036b0 <HAL_GPIO_Init+0x2f0>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	43db      	mvns	r3, r3
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	4013      	ands	r3, r2
 800362e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d003      	beq.n	8003644 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800363c:	693a      	ldr	r2, [r7, #16]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	4313      	orrs	r3, r2
 8003642:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003644:	4a1a      	ldr	r2, [pc, #104]	; (80036b0 <HAL_GPIO_Init+0x2f0>)
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800364a:	4b19      	ldr	r3, [pc, #100]	; (80036b0 <HAL_GPIO_Init+0x2f0>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	43db      	mvns	r3, r3
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	4013      	ands	r3, r2
 8003658:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d003      	beq.n	800366e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	4313      	orrs	r3, r2
 800366c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800366e:	4a10      	ldr	r2, [pc, #64]	; (80036b0 <HAL_GPIO_Init+0x2f0>)
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	3301      	adds	r3, #1
 8003678:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	fa22 f303 	lsr.w	r3, r2, r3
 8003684:	2b00      	cmp	r3, #0
 8003686:	f47f aea3 	bne.w	80033d0 <HAL_GPIO_Init+0x10>
  }
}
 800368a:	bf00      	nop
 800368c:	bf00      	nop
 800368e:	371c      	adds	r7, #28
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr
 8003698:	40021000 	.word	0x40021000
 800369c:	40010000 	.word	0x40010000
 80036a0:	48000400 	.word	0x48000400
 80036a4:	48000800 	.word	0x48000800
 80036a8:	48000c00 	.word	0x48000c00
 80036ac:	48001000 	.word	0x48001000
 80036b0:	40010400 	.word	0x40010400

080036b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	460b      	mov	r3, r1
 80036be:	807b      	strh	r3, [r7, #2]
 80036c0:	4613      	mov	r3, r2
 80036c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036c4:	787b      	ldrb	r3, [r7, #1]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d003      	beq.n	80036d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036ca:	887a      	ldrh	r2, [r7, #2]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80036d0:	e002      	b.n	80036d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036d2:	887a      	ldrh	r2, [r7, #2]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e081      	b.n	80037fa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d106      	bne.n	8003710 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f7fe fa74 	bl	8001bf8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2224      	movs	r2, #36	; 0x24
 8003714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f022 0201 	bic.w	r2, r2, #1
 8003726:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685a      	ldr	r2, [r3, #4]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003734:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003744:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d107      	bne.n	800375e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	689a      	ldr	r2, [r3, #8]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800375a:	609a      	str	r2, [r3, #8]
 800375c:	e006      	b.n	800376c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	689a      	ldr	r2, [r3, #8]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800376a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	2b02      	cmp	r3, #2
 8003772:	d104      	bne.n	800377e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800377c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	6812      	ldr	r2, [r2, #0]
 8003788:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800378c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003790:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68da      	ldr	r2, [r3, #12]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	691a      	ldr	r2, [r3, #16]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	430a      	orrs	r2, r1
 80037ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	69d9      	ldr	r1, [r3, #28]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a1a      	ldr	r2, [r3, #32]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f042 0201 	orr.w	r2, r2, #1
 80037da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2220      	movs	r2, #32
 80037e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003802:	b480      	push	{r7}
 8003804:	b083      	sub	sp, #12
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
 800380a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b20      	cmp	r3, #32
 8003816:	d138      	bne.n	800388a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800381e:	2b01      	cmp	r3, #1
 8003820:	d101      	bne.n	8003826 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003822:	2302      	movs	r3, #2
 8003824:	e032      	b.n	800388c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2201      	movs	r2, #1
 800382a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2224      	movs	r2, #36	; 0x24
 8003832:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 0201 	bic.w	r2, r2, #1
 8003844:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003854:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6819      	ldr	r1, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	683a      	ldr	r2, [r7, #0]
 8003862:	430a      	orrs	r2, r1
 8003864:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f042 0201 	orr.w	r2, r2, #1
 8003874:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2220      	movs	r2, #32
 800387a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003886:	2300      	movs	r3, #0
 8003888:	e000      	b.n	800388c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800388a:	2302      	movs	r3, #2
  }
}
 800388c:	4618      	mov	r0, r3
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b20      	cmp	r3, #32
 80038ac:	d139      	bne.n	8003922 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d101      	bne.n	80038bc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80038b8:	2302      	movs	r3, #2
 80038ba:	e033      	b.n	8003924 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2224      	movs	r2, #36	; 0x24
 80038c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0201 	bic.w	r2, r2, #1
 80038da:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80038ea:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	021b      	lsls	r3, r3, #8
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f042 0201 	orr.w	r2, r2, #1
 800390c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2220      	movs	r2, #32
 8003912:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800391e:	2300      	movs	r3, #0
 8003920:	e000      	b.n	8003924 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003922:	2302      	movs	r3, #2
  }
}
 8003924:	4618      	mov	r0, r3
 8003926:	3714      	adds	r7, #20
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003930:	b480      	push	{r7}
 8003932:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003934:	4b04      	ldr	r3, [pc, #16]	; (8003948 <HAL_PWREx_GetVoltageRange+0x18>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800393c:	4618      	mov	r0, r3
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	40007000 	.word	0x40007000

0800394c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800395a:	d130      	bne.n	80039be <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800395c:	4b23      	ldr	r3, [pc, #140]	; (80039ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003964:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003968:	d038      	beq.n	80039dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800396a:	4b20      	ldr	r3, [pc, #128]	; (80039ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003972:	4a1e      	ldr	r2, [pc, #120]	; (80039ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003974:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003978:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800397a:	4b1d      	ldr	r3, [pc, #116]	; (80039f0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2232      	movs	r2, #50	; 0x32
 8003980:	fb02 f303 	mul.w	r3, r2, r3
 8003984:	4a1b      	ldr	r2, [pc, #108]	; (80039f4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003986:	fba2 2303 	umull	r2, r3, r2, r3
 800398a:	0c9b      	lsrs	r3, r3, #18
 800398c:	3301      	adds	r3, #1
 800398e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003990:	e002      	b.n	8003998 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	3b01      	subs	r3, #1
 8003996:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003998:	4b14      	ldr	r3, [pc, #80]	; (80039ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800399a:	695b      	ldr	r3, [r3, #20]
 800399c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039a4:	d102      	bne.n	80039ac <HAL_PWREx_ControlVoltageScaling+0x60>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d1f2      	bne.n	8003992 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80039ac:	4b0f      	ldr	r3, [pc, #60]	; (80039ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039ae:	695b      	ldr	r3, [r3, #20]
 80039b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039b8:	d110      	bne.n	80039dc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e00f      	b.n	80039de <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80039be:	4b0b      	ldr	r3, [pc, #44]	; (80039ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80039c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039ca:	d007      	beq.n	80039dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80039cc:	4b07      	ldr	r3, [pc, #28]	; (80039ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80039d4:	4a05      	ldr	r2, [pc, #20]	; (80039ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039da:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3714      	adds	r7, #20
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	40007000 	.word	0x40007000
 80039f0:	20000000 	.word	0x20000000
 80039f4:	431bde83 	.word	0x431bde83

080039f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b088      	sub	sp, #32
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d102      	bne.n	8003a0c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	f000 bc02 	b.w	8004210 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a0c:	4b96      	ldr	r3, [pc, #600]	; (8003c68 <HAL_RCC_OscConfig+0x270>)
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f003 030c 	and.w	r3, r3, #12
 8003a14:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a16:	4b94      	ldr	r3, [pc, #592]	; (8003c68 <HAL_RCC_OscConfig+0x270>)
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	f003 0303 	and.w	r3, r3, #3
 8003a1e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0310 	and.w	r3, r3, #16
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f000 80e4 	beq.w	8003bf6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d007      	beq.n	8003a44 <HAL_RCC_OscConfig+0x4c>
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	2b0c      	cmp	r3, #12
 8003a38:	f040 808b 	bne.w	8003b52 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	f040 8087 	bne.w	8003b52 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a44:	4b88      	ldr	r3, [pc, #544]	; (8003c68 <HAL_RCC_OscConfig+0x270>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d005      	beq.n	8003a5c <HAL_RCC_OscConfig+0x64>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d101      	bne.n	8003a5c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e3d9      	b.n	8004210 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a1a      	ldr	r2, [r3, #32]
 8003a60:	4b81      	ldr	r3, [pc, #516]	; (8003c68 <HAL_RCC_OscConfig+0x270>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0308 	and.w	r3, r3, #8
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d004      	beq.n	8003a76 <HAL_RCC_OscConfig+0x7e>
 8003a6c:	4b7e      	ldr	r3, [pc, #504]	; (8003c68 <HAL_RCC_OscConfig+0x270>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a74:	e005      	b.n	8003a82 <HAL_RCC_OscConfig+0x8a>
 8003a76:	4b7c      	ldr	r3, [pc, #496]	; (8003c68 <HAL_RCC_OscConfig+0x270>)
 8003a78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a7c:	091b      	lsrs	r3, r3, #4
 8003a7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d223      	bcs.n	8003ace <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f000 fdbe 	bl	800460c <RCC_SetFlashLatencyFromMSIRange>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e3ba      	b.n	8004210 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a9a:	4b73      	ldr	r3, [pc, #460]	; (8003c68 <HAL_RCC_OscConfig+0x270>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a72      	ldr	r2, [pc, #456]	; (8003c68 <HAL_RCC_OscConfig+0x270>)
 8003aa0:	f043 0308 	orr.w	r3, r3, #8
 8003aa4:	6013      	str	r3, [r2, #0]
 8003aa6:	4b70      	ldr	r3, [pc, #448]	; (8003c68 <HAL_RCC_OscConfig+0x270>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a1b      	ldr	r3, [r3, #32]
 8003ab2:	496d      	ldr	r1, [pc, #436]	; (8003c68 <HAL_RCC_OscConfig+0x270>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ab8:	4b6b      	ldr	r3, [pc, #428]	; (8003c68 <HAL_RCC_OscConfig+0x270>)
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	69db      	ldr	r3, [r3, #28]
 8003ac4:	021b      	lsls	r3, r3, #8
 8003ac6:	4968      	ldr	r1, [pc, #416]	; (8003c68 <HAL_RCC_OscConfig+0x270>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	604b      	str	r3, [r1, #4]
 8003acc:	e025      	b.n	8003b1a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ace:	4b66      	ldr	r3, [pc, #408]	; (8003c68 <HAL_RCC_OscConfig+0x270>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a65      	ldr	r2, [pc, #404]	; (8003c68 <HAL_RCC_OscConfig+0x270>)
 8003ad4:	f043 0308 	orr.w	r3, r3, #8
 8003ad8:	6013      	str	r3, [r2, #0]
 8003ada:	4b63      	ldr	r3, [pc, #396]	; (8003c68 <HAL_RCC_OscConfig+0x270>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a1b      	ldr	r3, [r3, #32]
 8003ae6:	4960      	ldr	r1, [pc, #384]	; (8003c68 <HAL_RCC_OscConfig+0x270>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003aec:	4b5e      	ldr	r3, [pc, #376]	; (8003c68 <HAL_RCC_OscConfig+0x270>)
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	69db      	ldr	r3, [r3, #28]
 8003af8:	021b      	lsls	r3, r3, #8
 8003afa:	495b      	ldr	r1, [pc, #364]	; (8003c68 <HAL_RCC_OscConfig+0x270>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d109      	bne.n	8003b1a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a1b      	ldr	r3, [r3, #32]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f000 fd7e 	bl	800460c <RCC_SetFlashLatencyFromMSIRange>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d001      	beq.n	8003b1a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e37a      	b.n	8004210 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b1a:	f000 fc81 	bl	8004420 <HAL_RCC_GetSysClockFreq>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	4b51      	ldr	r3, [pc, #324]	; (8003c68 <HAL_RCC_OscConfig+0x270>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	091b      	lsrs	r3, r3, #4
 8003b26:	f003 030f 	and.w	r3, r3, #15
 8003b2a:	4950      	ldr	r1, [pc, #320]	; (8003c6c <HAL_RCC_OscConfig+0x274>)
 8003b2c:	5ccb      	ldrb	r3, [r1, r3]
 8003b2e:	f003 031f 	and.w	r3, r3, #31
 8003b32:	fa22 f303 	lsr.w	r3, r2, r3
 8003b36:	4a4e      	ldr	r2, [pc, #312]	; (8003c70 <HAL_RCC_OscConfig+0x278>)
 8003b38:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003b3a:	4b4e      	ldr	r3, [pc, #312]	; (8003c74 <HAL_RCC_OscConfig+0x27c>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7fe fa48 	bl	8001fd4 <HAL_InitTick>
 8003b44:	4603      	mov	r3, r0
 8003b46:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003b48:	7bfb      	ldrb	r3, [r7, #15]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d052      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003b4e:	7bfb      	ldrb	r3, [r7, #15]
 8003b50:	e35e      	b.n	8004210 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d032      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003b5a:	4b43      	ldr	r3, [pc, #268]	; (8003c68 <HAL_RCC_OscConfig+0x270>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a42      	ldr	r2, [pc, #264]	; (8003c68 <HAL_RCC_OscConfig+0x270>)
 8003b60:	f043 0301 	orr.w	r3, r3, #1
 8003b64:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b66:	f7fe fb83 	bl	8002270 <HAL_GetTick>
 8003b6a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b6c:	e008      	b.n	8003b80 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b6e:	f7fe fb7f 	bl	8002270 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d901      	bls.n	8003b80 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e347      	b.n	8004210 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b80:	4b39      	ldr	r3, [pc, #228]	; (8003c68 <HAL_RCC_OscConfig+0x270>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0302 	and.w	r3, r3, #2
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d0f0      	beq.n	8003b6e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b8c:	4b36      	ldr	r3, [pc, #216]	; (8003c68 <HAL_RCC_OscConfig+0x270>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a35      	ldr	r2, [pc, #212]	; (8003c68 <HAL_RCC_OscConfig+0x270>)
 8003b92:	f043 0308 	orr.w	r3, r3, #8
 8003b96:	6013      	str	r3, [r2, #0]
 8003b98:	4b33      	ldr	r3, [pc, #204]	; (8003c68 <HAL_RCC_OscConfig+0x270>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a1b      	ldr	r3, [r3, #32]
 8003ba4:	4930      	ldr	r1, [pc, #192]	; (8003c68 <HAL_RCC_OscConfig+0x270>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003baa:	4b2f      	ldr	r3, [pc, #188]	; (8003c68 <HAL_RCC_OscConfig+0x270>)
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	69db      	ldr	r3, [r3, #28]
 8003bb6:	021b      	lsls	r3, r3, #8
 8003bb8:	492b      	ldr	r1, [pc, #172]	; (8003c68 <HAL_RCC_OscConfig+0x270>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	604b      	str	r3, [r1, #4]
 8003bbe:	e01a      	b.n	8003bf6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003bc0:	4b29      	ldr	r3, [pc, #164]	; (8003c68 <HAL_RCC_OscConfig+0x270>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a28      	ldr	r2, [pc, #160]	; (8003c68 <HAL_RCC_OscConfig+0x270>)
 8003bc6:	f023 0301 	bic.w	r3, r3, #1
 8003bca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003bcc:	f7fe fb50 	bl	8002270 <HAL_GetTick>
 8003bd0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003bd2:	e008      	b.n	8003be6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003bd4:	f7fe fb4c 	bl	8002270 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e314      	b.n	8004210 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003be6:	4b20      	ldr	r3, [pc, #128]	; (8003c68 <HAL_RCC_OscConfig+0x270>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0302 	and.w	r3, r3, #2
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1f0      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x1dc>
 8003bf2:	e000      	b.n	8003bf6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003bf4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d073      	beq.n	8003cea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	2b08      	cmp	r3, #8
 8003c06:	d005      	beq.n	8003c14 <HAL_RCC_OscConfig+0x21c>
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	2b0c      	cmp	r3, #12
 8003c0c:	d10e      	bne.n	8003c2c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	2b03      	cmp	r3, #3
 8003c12:	d10b      	bne.n	8003c2c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c14:	4b14      	ldr	r3, [pc, #80]	; (8003c68 <HAL_RCC_OscConfig+0x270>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d063      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x2f0>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d15f      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e2f1      	b.n	8004210 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c34:	d106      	bne.n	8003c44 <HAL_RCC_OscConfig+0x24c>
 8003c36:	4b0c      	ldr	r3, [pc, #48]	; (8003c68 <HAL_RCC_OscConfig+0x270>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a0b      	ldr	r2, [pc, #44]	; (8003c68 <HAL_RCC_OscConfig+0x270>)
 8003c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c40:	6013      	str	r3, [r2, #0]
 8003c42:	e025      	b.n	8003c90 <HAL_RCC_OscConfig+0x298>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c4c:	d114      	bne.n	8003c78 <HAL_RCC_OscConfig+0x280>
 8003c4e:	4b06      	ldr	r3, [pc, #24]	; (8003c68 <HAL_RCC_OscConfig+0x270>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a05      	ldr	r2, [pc, #20]	; (8003c68 <HAL_RCC_OscConfig+0x270>)
 8003c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c58:	6013      	str	r3, [r2, #0]
 8003c5a:	4b03      	ldr	r3, [pc, #12]	; (8003c68 <HAL_RCC_OscConfig+0x270>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a02      	ldr	r2, [pc, #8]	; (8003c68 <HAL_RCC_OscConfig+0x270>)
 8003c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c64:	6013      	str	r3, [r2, #0]
 8003c66:	e013      	b.n	8003c90 <HAL_RCC_OscConfig+0x298>
 8003c68:	40021000 	.word	0x40021000
 8003c6c:	08009b38 	.word	0x08009b38
 8003c70:	20000000 	.word	0x20000000
 8003c74:	20000004 	.word	0x20000004
 8003c78:	4ba0      	ldr	r3, [pc, #640]	; (8003efc <HAL_RCC_OscConfig+0x504>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a9f      	ldr	r2, [pc, #636]	; (8003efc <HAL_RCC_OscConfig+0x504>)
 8003c7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c82:	6013      	str	r3, [r2, #0]
 8003c84:	4b9d      	ldr	r3, [pc, #628]	; (8003efc <HAL_RCC_OscConfig+0x504>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a9c      	ldr	r2, [pc, #624]	; (8003efc <HAL_RCC_OscConfig+0x504>)
 8003c8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d013      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c98:	f7fe faea 	bl	8002270 <HAL_GetTick>
 8003c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c9e:	e008      	b.n	8003cb2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ca0:	f7fe fae6 	bl	8002270 <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b64      	cmp	r3, #100	; 0x64
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e2ae      	b.n	8004210 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cb2:	4b92      	ldr	r3, [pc, #584]	; (8003efc <HAL_RCC_OscConfig+0x504>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d0f0      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x2a8>
 8003cbe:	e014      	b.n	8003cea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc0:	f7fe fad6 	bl	8002270 <HAL_GetTick>
 8003cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003cc6:	e008      	b.n	8003cda <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cc8:	f7fe fad2 	bl	8002270 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b64      	cmp	r3, #100	; 0x64
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e29a      	b.n	8004210 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003cda:	4b88      	ldr	r3, [pc, #544]	; (8003efc <HAL_RCC_OscConfig+0x504>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1f0      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x2d0>
 8003ce6:	e000      	b.n	8003cea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ce8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d060      	beq.n	8003db8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	2b04      	cmp	r3, #4
 8003cfa:	d005      	beq.n	8003d08 <HAL_RCC_OscConfig+0x310>
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	2b0c      	cmp	r3, #12
 8003d00:	d119      	bne.n	8003d36 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d116      	bne.n	8003d36 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d08:	4b7c      	ldr	r3, [pc, #496]	; (8003efc <HAL_RCC_OscConfig+0x504>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d005      	beq.n	8003d20 <HAL_RCC_OscConfig+0x328>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d101      	bne.n	8003d20 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e277      	b.n	8004210 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d20:	4b76      	ldr	r3, [pc, #472]	; (8003efc <HAL_RCC_OscConfig+0x504>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	061b      	lsls	r3, r3, #24
 8003d2e:	4973      	ldr	r1, [pc, #460]	; (8003efc <HAL_RCC_OscConfig+0x504>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d34:	e040      	b.n	8003db8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d023      	beq.n	8003d86 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d3e:	4b6f      	ldr	r3, [pc, #444]	; (8003efc <HAL_RCC_OscConfig+0x504>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a6e      	ldr	r2, [pc, #440]	; (8003efc <HAL_RCC_OscConfig+0x504>)
 8003d44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d4a:	f7fe fa91 	bl	8002270 <HAL_GetTick>
 8003d4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d50:	e008      	b.n	8003d64 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d52:	f7fe fa8d 	bl	8002270 <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d901      	bls.n	8003d64 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e255      	b.n	8004210 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d64:	4b65      	ldr	r3, [pc, #404]	; (8003efc <HAL_RCC_OscConfig+0x504>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d0f0      	beq.n	8003d52 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d70:	4b62      	ldr	r3, [pc, #392]	; (8003efc <HAL_RCC_OscConfig+0x504>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	061b      	lsls	r3, r3, #24
 8003d7e:	495f      	ldr	r1, [pc, #380]	; (8003efc <HAL_RCC_OscConfig+0x504>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	604b      	str	r3, [r1, #4]
 8003d84:	e018      	b.n	8003db8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d86:	4b5d      	ldr	r3, [pc, #372]	; (8003efc <HAL_RCC_OscConfig+0x504>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a5c      	ldr	r2, [pc, #368]	; (8003efc <HAL_RCC_OscConfig+0x504>)
 8003d8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d92:	f7fe fa6d 	bl	8002270 <HAL_GetTick>
 8003d96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d98:	e008      	b.n	8003dac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d9a:	f7fe fa69 	bl	8002270 <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d901      	bls.n	8003dac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e231      	b.n	8004210 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003dac:	4b53      	ldr	r3, [pc, #332]	; (8003efc <HAL_RCC_OscConfig+0x504>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d1f0      	bne.n	8003d9a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0308 	and.w	r3, r3, #8
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d03c      	beq.n	8003e3e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d01c      	beq.n	8003e06 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dcc:	4b4b      	ldr	r3, [pc, #300]	; (8003efc <HAL_RCC_OscConfig+0x504>)
 8003dce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dd2:	4a4a      	ldr	r2, [pc, #296]	; (8003efc <HAL_RCC_OscConfig+0x504>)
 8003dd4:	f043 0301 	orr.w	r3, r3, #1
 8003dd8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ddc:	f7fe fa48 	bl	8002270 <HAL_GetTick>
 8003de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003de2:	e008      	b.n	8003df6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003de4:	f7fe fa44 	bl	8002270 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e20c      	b.n	8004210 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003df6:	4b41      	ldr	r3, [pc, #260]	; (8003efc <HAL_RCC_OscConfig+0x504>)
 8003df8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dfc:	f003 0302 	and.w	r3, r3, #2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d0ef      	beq.n	8003de4 <HAL_RCC_OscConfig+0x3ec>
 8003e04:	e01b      	b.n	8003e3e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e06:	4b3d      	ldr	r3, [pc, #244]	; (8003efc <HAL_RCC_OscConfig+0x504>)
 8003e08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e0c:	4a3b      	ldr	r2, [pc, #236]	; (8003efc <HAL_RCC_OscConfig+0x504>)
 8003e0e:	f023 0301 	bic.w	r3, r3, #1
 8003e12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e16:	f7fe fa2b 	bl	8002270 <HAL_GetTick>
 8003e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e1c:	e008      	b.n	8003e30 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e1e:	f7fe fa27 	bl	8002270 <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d901      	bls.n	8003e30 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e1ef      	b.n	8004210 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e30:	4b32      	ldr	r3, [pc, #200]	; (8003efc <HAL_RCC_OscConfig+0x504>)
 8003e32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1ef      	bne.n	8003e1e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0304 	and.w	r3, r3, #4
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f000 80a6 	beq.w	8003f98 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003e50:	4b2a      	ldr	r3, [pc, #168]	; (8003efc <HAL_RCC_OscConfig+0x504>)
 8003e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d10d      	bne.n	8003e78 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e5c:	4b27      	ldr	r3, [pc, #156]	; (8003efc <HAL_RCC_OscConfig+0x504>)
 8003e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e60:	4a26      	ldr	r2, [pc, #152]	; (8003efc <HAL_RCC_OscConfig+0x504>)
 8003e62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e66:	6593      	str	r3, [r2, #88]	; 0x58
 8003e68:	4b24      	ldr	r3, [pc, #144]	; (8003efc <HAL_RCC_OscConfig+0x504>)
 8003e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e70:	60bb      	str	r3, [r7, #8]
 8003e72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e74:	2301      	movs	r3, #1
 8003e76:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e78:	4b21      	ldr	r3, [pc, #132]	; (8003f00 <HAL_RCC_OscConfig+0x508>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d118      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e84:	4b1e      	ldr	r3, [pc, #120]	; (8003f00 <HAL_RCC_OscConfig+0x508>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a1d      	ldr	r2, [pc, #116]	; (8003f00 <HAL_RCC_OscConfig+0x508>)
 8003e8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e8e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e90:	f7fe f9ee 	bl	8002270 <HAL_GetTick>
 8003e94:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e96:	e008      	b.n	8003eaa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e98:	f7fe f9ea 	bl	8002270 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e1b2      	b.n	8004210 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003eaa:	4b15      	ldr	r3, [pc, #84]	; (8003f00 <HAL_RCC_OscConfig+0x508>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d0f0      	beq.n	8003e98 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d108      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x4d8>
 8003ebe:	4b0f      	ldr	r3, [pc, #60]	; (8003efc <HAL_RCC_OscConfig+0x504>)
 8003ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec4:	4a0d      	ldr	r2, [pc, #52]	; (8003efc <HAL_RCC_OscConfig+0x504>)
 8003ec6:	f043 0301 	orr.w	r3, r3, #1
 8003eca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ece:	e029      	b.n	8003f24 <HAL_RCC_OscConfig+0x52c>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	2b05      	cmp	r3, #5
 8003ed6:	d115      	bne.n	8003f04 <HAL_RCC_OscConfig+0x50c>
 8003ed8:	4b08      	ldr	r3, [pc, #32]	; (8003efc <HAL_RCC_OscConfig+0x504>)
 8003eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ede:	4a07      	ldr	r2, [pc, #28]	; (8003efc <HAL_RCC_OscConfig+0x504>)
 8003ee0:	f043 0304 	orr.w	r3, r3, #4
 8003ee4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ee8:	4b04      	ldr	r3, [pc, #16]	; (8003efc <HAL_RCC_OscConfig+0x504>)
 8003eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eee:	4a03      	ldr	r2, [pc, #12]	; (8003efc <HAL_RCC_OscConfig+0x504>)
 8003ef0:	f043 0301 	orr.w	r3, r3, #1
 8003ef4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ef8:	e014      	b.n	8003f24 <HAL_RCC_OscConfig+0x52c>
 8003efa:	bf00      	nop
 8003efc:	40021000 	.word	0x40021000
 8003f00:	40007000 	.word	0x40007000
 8003f04:	4b9a      	ldr	r3, [pc, #616]	; (8004170 <HAL_RCC_OscConfig+0x778>)
 8003f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f0a:	4a99      	ldr	r2, [pc, #612]	; (8004170 <HAL_RCC_OscConfig+0x778>)
 8003f0c:	f023 0301 	bic.w	r3, r3, #1
 8003f10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f14:	4b96      	ldr	r3, [pc, #600]	; (8004170 <HAL_RCC_OscConfig+0x778>)
 8003f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f1a:	4a95      	ldr	r2, [pc, #596]	; (8004170 <HAL_RCC_OscConfig+0x778>)
 8003f1c:	f023 0304 	bic.w	r3, r3, #4
 8003f20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d016      	beq.n	8003f5a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f2c:	f7fe f9a0 	bl	8002270 <HAL_GetTick>
 8003f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f32:	e00a      	b.n	8003f4a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f34:	f7fe f99c 	bl	8002270 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e162      	b.n	8004210 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f4a:	4b89      	ldr	r3, [pc, #548]	; (8004170 <HAL_RCC_OscConfig+0x778>)
 8003f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f50:	f003 0302 	and.w	r3, r3, #2
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d0ed      	beq.n	8003f34 <HAL_RCC_OscConfig+0x53c>
 8003f58:	e015      	b.n	8003f86 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f5a:	f7fe f989 	bl	8002270 <HAL_GetTick>
 8003f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f60:	e00a      	b.n	8003f78 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f62:	f7fe f985 	bl	8002270 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d901      	bls.n	8003f78 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e14b      	b.n	8004210 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f78:	4b7d      	ldr	r3, [pc, #500]	; (8004170 <HAL_RCC_OscConfig+0x778>)
 8003f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1ed      	bne.n	8003f62 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f86:	7ffb      	ldrb	r3, [r7, #31]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d105      	bne.n	8003f98 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f8c:	4b78      	ldr	r3, [pc, #480]	; (8004170 <HAL_RCC_OscConfig+0x778>)
 8003f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f90:	4a77      	ldr	r2, [pc, #476]	; (8004170 <HAL_RCC_OscConfig+0x778>)
 8003f92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f96:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0320 	and.w	r3, r3, #32
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d03c      	beq.n	800401e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d01c      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003fac:	4b70      	ldr	r3, [pc, #448]	; (8004170 <HAL_RCC_OscConfig+0x778>)
 8003fae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fb2:	4a6f      	ldr	r2, [pc, #444]	; (8004170 <HAL_RCC_OscConfig+0x778>)
 8003fb4:	f043 0301 	orr.w	r3, r3, #1
 8003fb8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fbc:	f7fe f958 	bl	8002270 <HAL_GetTick>
 8003fc0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003fc2:	e008      	b.n	8003fd6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fc4:	f7fe f954 	bl	8002270 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d901      	bls.n	8003fd6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e11c      	b.n	8004210 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003fd6:	4b66      	ldr	r3, [pc, #408]	; (8004170 <HAL_RCC_OscConfig+0x778>)
 8003fd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fdc:	f003 0302 	and.w	r3, r3, #2
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d0ef      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x5cc>
 8003fe4:	e01b      	b.n	800401e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003fe6:	4b62      	ldr	r3, [pc, #392]	; (8004170 <HAL_RCC_OscConfig+0x778>)
 8003fe8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fec:	4a60      	ldr	r2, [pc, #384]	; (8004170 <HAL_RCC_OscConfig+0x778>)
 8003fee:	f023 0301 	bic.w	r3, r3, #1
 8003ff2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ff6:	f7fe f93b 	bl	8002270 <HAL_GetTick>
 8003ffa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ffc:	e008      	b.n	8004010 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ffe:	f7fe f937 	bl	8002270 <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	2b02      	cmp	r3, #2
 800400a:	d901      	bls.n	8004010 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e0ff      	b.n	8004210 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004010:	4b57      	ldr	r3, [pc, #348]	; (8004170 <HAL_RCC_OscConfig+0x778>)
 8004012:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1ef      	bne.n	8003ffe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004022:	2b00      	cmp	r3, #0
 8004024:	f000 80f3 	beq.w	800420e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800402c:	2b02      	cmp	r3, #2
 800402e:	f040 80c9 	bne.w	80041c4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004032:	4b4f      	ldr	r3, [pc, #316]	; (8004170 <HAL_RCC_OscConfig+0x778>)
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	f003 0203 	and.w	r2, r3, #3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004042:	429a      	cmp	r2, r3
 8004044:	d12c      	bne.n	80040a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004050:	3b01      	subs	r3, #1
 8004052:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004054:	429a      	cmp	r2, r3
 8004056:	d123      	bne.n	80040a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004062:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004064:	429a      	cmp	r2, r3
 8004066:	d11b      	bne.n	80040a0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004072:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004074:	429a      	cmp	r2, r3
 8004076:	d113      	bne.n	80040a0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004082:	085b      	lsrs	r3, r3, #1
 8004084:	3b01      	subs	r3, #1
 8004086:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004088:	429a      	cmp	r2, r3
 800408a:	d109      	bne.n	80040a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004096:	085b      	lsrs	r3, r3, #1
 8004098:	3b01      	subs	r3, #1
 800409a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800409c:	429a      	cmp	r2, r3
 800409e:	d06b      	beq.n	8004178 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	2b0c      	cmp	r3, #12
 80040a4:	d062      	beq.n	800416c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80040a6:	4b32      	ldr	r3, [pc, #200]	; (8004170 <HAL_RCC_OscConfig+0x778>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e0ac      	b.n	8004210 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80040b6:	4b2e      	ldr	r3, [pc, #184]	; (8004170 <HAL_RCC_OscConfig+0x778>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a2d      	ldr	r2, [pc, #180]	; (8004170 <HAL_RCC_OscConfig+0x778>)
 80040bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040c0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80040c2:	f7fe f8d5 	bl	8002270 <HAL_GetTick>
 80040c6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040c8:	e008      	b.n	80040dc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040ca:	f7fe f8d1 	bl	8002270 <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d901      	bls.n	80040dc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e099      	b.n	8004210 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040dc:	4b24      	ldr	r3, [pc, #144]	; (8004170 <HAL_RCC_OscConfig+0x778>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1f0      	bne.n	80040ca <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040e8:	4b21      	ldr	r3, [pc, #132]	; (8004170 <HAL_RCC_OscConfig+0x778>)
 80040ea:	68da      	ldr	r2, [r3, #12]
 80040ec:	4b21      	ldr	r3, [pc, #132]	; (8004174 <HAL_RCC_OscConfig+0x77c>)
 80040ee:	4013      	ands	r3, r2
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80040f8:	3a01      	subs	r2, #1
 80040fa:	0112      	lsls	r2, r2, #4
 80040fc:	4311      	orrs	r1, r2
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004102:	0212      	lsls	r2, r2, #8
 8004104:	4311      	orrs	r1, r2
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800410a:	0852      	lsrs	r2, r2, #1
 800410c:	3a01      	subs	r2, #1
 800410e:	0552      	lsls	r2, r2, #21
 8004110:	4311      	orrs	r1, r2
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004116:	0852      	lsrs	r2, r2, #1
 8004118:	3a01      	subs	r2, #1
 800411a:	0652      	lsls	r2, r2, #25
 800411c:	4311      	orrs	r1, r2
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004122:	06d2      	lsls	r2, r2, #27
 8004124:	430a      	orrs	r2, r1
 8004126:	4912      	ldr	r1, [pc, #72]	; (8004170 <HAL_RCC_OscConfig+0x778>)
 8004128:	4313      	orrs	r3, r2
 800412a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800412c:	4b10      	ldr	r3, [pc, #64]	; (8004170 <HAL_RCC_OscConfig+0x778>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a0f      	ldr	r2, [pc, #60]	; (8004170 <HAL_RCC_OscConfig+0x778>)
 8004132:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004136:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004138:	4b0d      	ldr	r3, [pc, #52]	; (8004170 <HAL_RCC_OscConfig+0x778>)
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	4a0c      	ldr	r2, [pc, #48]	; (8004170 <HAL_RCC_OscConfig+0x778>)
 800413e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004142:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004144:	f7fe f894 	bl	8002270 <HAL_GetTick>
 8004148:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800414a:	e008      	b.n	800415e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800414c:	f7fe f890 	bl	8002270 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b02      	cmp	r3, #2
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e058      	b.n	8004210 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800415e:	4b04      	ldr	r3, [pc, #16]	; (8004170 <HAL_RCC_OscConfig+0x778>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d0f0      	beq.n	800414c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800416a:	e050      	b.n	800420e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e04f      	b.n	8004210 <HAL_RCC_OscConfig+0x818>
 8004170:	40021000 	.word	0x40021000
 8004174:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004178:	4b27      	ldr	r3, [pc, #156]	; (8004218 <HAL_RCC_OscConfig+0x820>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d144      	bne.n	800420e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004184:	4b24      	ldr	r3, [pc, #144]	; (8004218 <HAL_RCC_OscConfig+0x820>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a23      	ldr	r2, [pc, #140]	; (8004218 <HAL_RCC_OscConfig+0x820>)
 800418a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800418e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004190:	4b21      	ldr	r3, [pc, #132]	; (8004218 <HAL_RCC_OscConfig+0x820>)
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	4a20      	ldr	r2, [pc, #128]	; (8004218 <HAL_RCC_OscConfig+0x820>)
 8004196:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800419a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800419c:	f7fe f868 	bl	8002270 <HAL_GetTick>
 80041a0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041a2:	e008      	b.n	80041b6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041a4:	f7fe f864 	bl	8002270 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e02c      	b.n	8004210 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041b6:	4b18      	ldr	r3, [pc, #96]	; (8004218 <HAL_RCC_OscConfig+0x820>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d0f0      	beq.n	80041a4 <HAL_RCC_OscConfig+0x7ac>
 80041c2:	e024      	b.n	800420e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	2b0c      	cmp	r3, #12
 80041c8:	d01f      	beq.n	800420a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ca:	4b13      	ldr	r3, [pc, #76]	; (8004218 <HAL_RCC_OscConfig+0x820>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a12      	ldr	r2, [pc, #72]	; (8004218 <HAL_RCC_OscConfig+0x820>)
 80041d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d6:	f7fe f84b 	bl	8002270 <HAL_GetTick>
 80041da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041dc:	e008      	b.n	80041f0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041de:	f7fe f847 	bl	8002270 <HAL_GetTick>
 80041e2:	4602      	mov	r2, r0
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d901      	bls.n	80041f0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e00f      	b.n	8004210 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041f0:	4b09      	ldr	r3, [pc, #36]	; (8004218 <HAL_RCC_OscConfig+0x820>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1f0      	bne.n	80041de <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80041fc:	4b06      	ldr	r3, [pc, #24]	; (8004218 <HAL_RCC_OscConfig+0x820>)
 80041fe:	68da      	ldr	r2, [r3, #12]
 8004200:	4905      	ldr	r1, [pc, #20]	; (8004218 <HAL_RCC_OscConfig+0x820>)
 8004202:	4b06      	ldr	r3, [pc, #24]	; (800421c <HAL_RCC_OscConfig+0x824>)
 8004204:	4013      	ands	r3, r2
 8004206:	60cb      	str	r3, [r1, #12]
 8004208:	e001      	b.n	800420e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e000      	b.n	8004210 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3720      	adds	r7, #32
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	40021000 	.word	0x40021000
 800421c:	feeefffc 	.word	0xfeeefffc

08004220 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d101      	bne.n	8004234 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e0e7      	b.n	8004404 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004234:	4b75      	ldr	r3, [pc, #468]	; (800440c <HAL_RCC_ClockConfig+0x1ec>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0307 	and.w	r3, r3, #7
 800423c:	683a      	ldr	r2, [r7, #0]
 800423e:	429a      	cmp	r2, r3
 8004240:	d910      	bls.n	8004264 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004242:	4b72      	ldr	r3, [pc, #456]	; (800440c <HAL_RCC_ClockConfig+0x1ec>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f023 0207 	bic.w	r2, r3, #7
 800424a:	4970      	ldr	r1, [pc, #448]	; (800440c <HAL_RCC_ClockConfig+0x1ec>)
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	4313      	orrs	r3, r2
 8004250:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004252:	4b6e      	ldr	r3, [pc, #440]	; (800440c <HAL_RCC_ClockConfig+0x1ec>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0307 	and.w	r3, r3, #7
 800425a:	683a      	ldr	r2, [r7, #0]
 800425c:	429a      	cmp	r2, r3
 800425e:	d001      	beq.n	8004264 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e0cf      	b.n	8004404 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0302 	and.w	r3, r3, #2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d010      	beq.n	8004292 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689a      	ldr	r2, [r3, #8]
 8004274:	4b66      	ldr	r3, [pc, #408]	; (8004410 <HAL_RCC_ClockConfig+0x1f0>)
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800427c:	429a      	cmp	r2, r3
 800427e:	d908      	bls.n	8004292 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004280:	4b63      	ldr	r3, [pc, #396]	; (8004410 <HAL_RCC_ClockConfig+0x1f0>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	4960      	ldr	r1, [pc, #384]	; (8004410 <HAL_RCC_ClockConfig+0x1f0>)
 800428e:	4313      	orrs	r3, r2
 8004290:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	2b00      	cmp	r3, #0
 800429c:	d04c      	beq.n	8004338 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	2b03      	cmp	r3, #3
 80042a4:	d107      	bne.n	80042b6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042a6:	4b5a      	ldr	r3, [pc, #360]	; (8004410 <HAL_RCC_ClockConfig+0x1f0>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d121      	bne.n	80042f6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e0a6      	b.n	8004404 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d107      	bne.n	80042ce <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042be:	4b54      	ldr	r3, [pc, #336]	; (8004410 <HAL_RCC_ClockConfig+0x1f0>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d115      	bne.n	80042f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e09a      	b.n	8004404 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d107      	bne.n	80042e6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042d6:	4b4e      	ldr	r3, [pc, #312]	; (8004410 <HAL_RCC_ClockConfig+0x1f0>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d109      	bne.n	80042f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e08e      	b.n	8004404 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042e6:	4b4a      	ldr	r3, [pc, #296]	; (8004410 <HAL_RCC_ClockConfig+0x1f0>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e086      	b.n	8004404 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042f6:	4b46      	ldr	r3, [pc, #280]	; (8004410 <HAL_RCC_ClockConfig+0x1f0>)
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f023 0203 	bic.w	r2, r3, #3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	4943      	ldr	r1, [pc, #268]	; (8004410 <HAL_RCC_ClockConfig+0x1f0>)
 8004304:	4313      	orrs	r3, r2
 8004306:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004308:	f7fd ffb2 	bl	8002270 <HAL_GetTick>
 800430c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800430e:	e00a      	b.n	8004326 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004310:	f7fd ffae 	bl	8002270 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	f241 3288 	movw	r2, #5000	; 0x1388
 800431e:	4293      	cmp	r3, r2
 8004320:	d901      	bls.n	8004326 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e06e      	b.n	8004404 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004326:	4b3a      	ldr	r3, [pc, #232]	; (8004410 <HAL_RCC_ClockConfig+0x1f0>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f003 020c 	and.w	r2, r3, #12
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	429a      	cmp	r2, r3
 8004336:	d1eb      	bne.n	8004310 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d010      	beq.n	8004366 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	689a      	ldr	r2, [r3, #8]
 8004348:	4b31      	ldr	r3, [pc, #196]	; (8004410 <HAL_RCC_ClockConfig+0x1f0>)
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004350:	429a      	cmp	r2, r3
 8004352:	d208      	bcs.n	8004366 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004354:	4b2e      	ldr	r3, [pc, #184]	; (8004410 <HAL_RCC_ClockConfig+0x1f0>)
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	492b      	ldr	r1, [pc, #172]	; (8004410 <HAL_RCC_ClockConfig+0x1f0>)
 8004362:	4313      	orrs	r3, r2
 8004364:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004366:	4b29      	ldr	r3, [pc, #164]	; (800440c <HAL_RCC_ClockConfig+0x1ec>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0307 	and.w	r3, r3, #7
 800436e:	683a      	ldr	r2, [r7, #0]
 8004370:	429a      	cmp	r2, r3
 8004372:	d210      	bcs.n	8004396 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004374:	4b25      	ldr	r3, [pc, #148]	; (800440c <HAL_RCC_ClockConfig+0x1ec>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f023 0207 	bic.w	r2, r3, #7
 800437c:	4923      	ldr	r1, [pc, #140]	; (800440c <HAL_RCC_ClockConfig+0x1ec>)
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	4313      	orrs	r3, r2
 8004382:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004384:	4b21      	ldr	r3, [pc, #132]	; (800440c <HAL_RCC_ClockConfig+0x1ec>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0307 	and.w	r3, r3, #7
 800438c:	683a      	ldr	r2, [r7, #0]
 800438e:	429a      	cmp	r2, r3
 8004390:	d001      	beq.n	8004396 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e036      	b.n	8004404 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0304 	and.w	r3, r3, #4
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d008      	beq.n	80043b4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043a2:	4b1b      	ldr	r3, [pc, #108]	; (8004410 <HAL_RCC_ClockConfig+0x1f0>)
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	4918      	ldr	r1, [pc, #96]	; (8004410 <HAL_RCC_ClockConfig+0x1f0>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0308 	and.w	r3, r3, #8
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d009      	beq.n	80043d4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043c0:	4b13      	ldr	r3, [pc, #76]	; (8004410 <HAL_RCC_ClockConfig+0x1f0>)
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	00db      	lsls	r3, r3, #3
 80043ce:	4910      	ldr	r1, [pc, #64]	; (8004410 <HAL_RCC_ClockConfig+0x1f0>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043d4:	f000 f824 	bl	8004420 <HAL_RCC_GetSysClockFreq>
 80043d8:	4602      	mov	r2, r0
 80043da:	4b0d      	ldr	r3, [pc, #52]	; (8004410 <HAL_RCC_ClockConfig+0x1f0>)
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	091b      	lsrs	r3, r3, #4
 80043e0:	f003 030f 	and.w	r3, r3, #15
 80043e4:	490b      	ldr	r1, [pc, #44]	; (8004414 <HAL_RCC_ClockConfig+0x1f4>)
 80043e6:	5ccb      	ldrb	r3, [r1, r3]
 80043e8:	f003 031f 	and.w	r3, r3, #31
 80043ec:	fa22 f303 	lsr.w	r3, r2, r3
 80043f0:	4a09      	ldr	r2, [pc, #36]	; (8004418 <HAL_RCC_ClockConfig+0x1f8>)
 80043f2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80043f4:	4b09      	ldr	r3, [pc, #36]	; (800441c <HAL_RCC_ClockConfig+0x1fc>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7fd fdeb 	bl	8001fd4 <HAL_InitTick>
 80043fe:	4603      	mov	r3, r0
 8004400:	72fb      	strb	r3, [r7, #11]

  return status;
 8004402:	7afb      	ldrb	r3, [r7, #11]
}
 8004404:	4618      	mov	r0, r3
 8004406:	3710      	adds	r7, #16
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	40022000 	.word	0x40022000
 8004410:	40021000 	.word	0x40021000
 8004414:	08009b38 	.word	0x08009b38
 8004418:	20000000 	.word	0x20000000
 800441c:	20000004 	.word	0x20000004

08004420 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004420:	b480      	push	{r7}
 8004422:	b089      	sub	sp, #36	; 0x24
 8004424:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004426:	2300      	movs	r3, #0
 8004428:	61fb      	str	r3, [r7, #28]
 800442a:	2300      	movs	r3, #0
 800442c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800442e:	4b3e      	ldr	r3, [pc, #248]	; (8004528 <HAL_RCC_GetSysClockFreq+0x108>)
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f003 030c 	and.w	r3, r3, #12
 8004436:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004438:	4b3b      	ldr	r3, [pc, #236]	; (8004528 <HAL_RCC_GetSysClockFreq+0x108>)
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	f003 0303 	and.w	r3, r3, #3
 8004440:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d005      	beq.n	8004454 <HAL_RCC_GetSysClockFreq+0x34>
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	2b0c      	cmp	r3, #12
 800444c:	d121      	bne.n	8004492 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2b01      	cmp	r3, #1
 8004452:	d11e      	bne.n	8004492 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004454:	4b34      	ldr	r3, [pc, #208]	; (8004528 <HAL_RCC_GetSysClockFreq+0x108>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0308 	and.w	r3, r3, #8
 800445c:	2b00      	cmp	r3, #0
 800445e:	d107      	bne.n	8004470 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004460:	4b31      	ldr	r3, [pc, #196]	; (8004528 <HAL_RCC_GetSysClockFreq+0x108>)
 8004462:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004466:	0a1b      	lsrs	r3, r3, #8
 8004468:	f003 030f 	and.w	r3, r3, #15
 800446c:	61fb      	str	r3, [r7, #28]
 800446e:	e005      	b.n	800447c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004470:	4b2d      	ldr	r3, [pc, #180]	; (8004528 <HAL_RCC_GetSysClockFreq+0x108>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	091b      	lsrs	r3, r3, #4
 8004476:	f003 030f 	and.w	r3, r3, #15
 800447a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800447c:	4a2b      	ldr	r2, [pc, #172]	; (800452c <HAL_RCC_GetSysClockFreq+0x10c>)
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004484:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d10d      	bne.n	80044a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004490:	e00a      	b.n	80044a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	2b04      	cmp	r3, #4
 8004496:	d102      	bne.n	800449e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004498:	4b25      	ldr	r3, [pc, #148]	; (8004530 <HAL_RCC_GetSysClockFreq+0x110>)
 800449a:	61bb      	str	r3, [r7, #24]
 800449c:	e004      	b.n	80044a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	2b08      	cmp	r3, #8
 80044a2:	d101      	bne.n	80044a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80044a4:	4b23      	ldr	r3, [pc, #140]	; (8004534 <HAL_RCC_GetSysClockFreq+0x114>)
 80044a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	2b0c      	cmp	r3, #12
 80044ac:	d134      	bne.n	8004518 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80044ae:	4b1e      	ldr	r3, [pc, #120]	; (8004528 <HAL_RCC_GetSysClockFreq+0x108>)
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	f003 0303 	and.w	r3, r3, #3
 80044b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d003      	beq.n	80044c6 <HAL_RCC_GetSysClockFreq+0xa6>
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	2b03      	cmp	r3, #3
 80044c2:	d003      	beq.n	80044cc <HAL_RCC_GetSysClockFreq+0xac>
 80044c4:	e005      	b.n	80044d2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80044c6:	4b1a      	ldr	r3, [pc, #104]	; (8004530 <HAL_RCC_GetSysClockFreq+0x110>)
 80044c8:	617b      	str	r3, [r7, #20]
      break;
 80044ca:	e005      	b.n	80044d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80044cc:	4b19      	ldr	r3, [pc, #100]	; (8004534 <HAL_RCC_GetSysClockFreq+0x114>)
 80044ce:	617b      	str	r3, [r7, #20]
      break;
 80044d0:	e002      	b.n	80044d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	617b      	str	r3, [r7, #20]
      break;
 80044d6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80044d8:	4b13      	ldr	r3, [pc, #76]	; (8004528 <HAL_RCC_GetSysClockFreq+0x108>)
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	091b      	lsrs	r3, r3, #4
 80044de:	f003 0307 	and.w	r3, r3, #7
 80044e2:	3301      	adds	r3, #1
 80044e4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80044e6:	4b10      	ldr	r3, [pc, #64]	; (8004528 <HAL_RCC_GetSysClockFreq+0x108>)
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	0a1b      	lsrs	r3, r3, #8
 80044ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	fb03 f202 	mul.w	r2, r3, r2
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044fc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80044fe:	4b0a      	ldr	r3, [pc, #40]	; (8004528 <HAL_RCC_GetSysClockFreq+0x108>)
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	0e5b      	lsrs	r3, r3, #25
 8004504:	f003 0303 	and.w	r3, r3, #3
 8004508:	3301      	adds	r3, #1
 800450a:	005b      	lsls	r3, r3, #1
 800450c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800450e:	697a      	ldr	r2, [r7, #20]
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	fbb2 f3f3 	udiv	r3, r2, r3
 8004516:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004518:	69bb      	ldr	r3, [r7, #24]
}
 800451a:	4618      	mov	r0, r3
 800451c:	3724      	adds	r7, #36	; 0x24
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	40021000 	.word	0x40021000
 800452c:	08009b50 	.word	0x08009b50
 8004530:	00f42400 	.word	0x00f42400
 8004534:	007a1200 	.word	0x007a1200

08004538 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004538:	b480      	push	{r7}
 800453a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800453c:	4b03      	ldr	r3, [pc, #12]	; (800454c <HAL_RCC_GetHCLKFreq+0x14>)
 800453e:	681b      	ldr	r3, [r3, #0]
}
 8004540:	4618      	mov	r0, r3
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	20000000 	.word	0x20000000

08004550 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004554:	f7ff fff0 	bl	8004538 <HAL_RCC_GetHCLKFreq>
 8004558:	4602      	mov	r2, r0
 800455a:	4b06      	ldr	r3, [pc, #24]	; (8004574 <HAL_RCC_GetPCLK1Freq+0x24>)
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	0a1b      	lsrs	r3, r3, #8
 8004560:	f003 0307 	and.w	r3, r3, #7
 8004564:	4904      	ldr	r1, [pc, #16]	; (8004578 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004566:	5ccb      	ldrb	r3, [r1, r3]
 8004568:	f003 031f 	and.w	r3, r3, #31
 800456c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004570:	4618      	mov	r0, r3
 8004572:	bd80      	pop	{r7, pc}
 8004574:	40021000 	.word	0x40021000
 8004578:	08009b48 	.word	0x08009b48

0800457c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004580:	f7ff ffda 	bl	8004538 <HAL_RCC_GetHCLKFreq>
 8004584:	4602      	mov	r2, r0
 8004586:	4b06      	ldr	r3, [pc, #24]	; (80045a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	0adb      	lsrs	r3, r3, #11
 800458c:	f003 0307 	and.w	r3, r3, #7
 8004590:	4904      	ldr	r1, [pc, #16]	; (80045a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004592:	5ccb      	ldrb	r3, [r1, r3]
 8004594:	f003 031f 	and.w	r3, r3, #31
 8004598:	fa22 f303 	lsr.w	r3, r2, r3
}
 800459c:	4618      	mov	r0, r3
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	40021000 	.word	0x40021000
 80045a4:	08009b48 	.word	0x08009b48

080045a8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	220f      	movs	r2, #15
 80045b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80045b8:	4b12      	ldr	r3, [pc, #72]	; (8004604 <HAL_RCC_GetClockConfig+0x5c>)
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f003 0203 	and.w	r2, r3, #3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80045c4:	4b0f      	ldr	r3, [pc, #60]	; (8004604 <HAL_RCC_GetClockConfig+0x5c>)
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80045d0:	4b0c      	ldr	r3, [pc, #48]	; (8004604 <HAL_RCC_GetClockConfig+0x5c>)
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80045dc:	4b09      	ldr	r3, [pc, #36]	; (8004604 <HAL_RCC_GetClockConfig+0x5c>)
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	08db      	lsrs	r3, r3, #3
 80045e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80045ea:	4b07      	ldr	r3, [pc, #28]	; (8004608 <HAL_RCC_GetClockConfig+0x60>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0207 	and.w	r2, r3, #7
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	601a      	str	r2, [r3, #0]
}
 80045f6:	bf00      	nop
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	40021000 	.word	0x40021000
 8004608:	40022000 	.word	0x40022000

0800460c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b086      	sub	sp, #24
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004614:	2300      	movs	r3, #0
 8004616:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004618:	4b2a      	ldr	r3, [pc, #168]	; (80046c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800461a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800461c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d003      	beq.n	800462c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004624:	f7ff f984 	bl	8003930 <HAL_PWREx_GetVoltageRange>
 8004628:	6178      	str	r0, [r7, #20]
 800462a:	e014      	b.n	8004656 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800462c:	4b25      	ldr	r3, [pc, #148]	; (80046c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800462e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004630:	4a24      	ldr	r2, [pc, #144]	; (80046c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004636:	6593      	str	r3, [r2, #88]	; 0x58
 8004638:	4b22      	ldr	r3, [pc, #136]	; (80046c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800463a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800463c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004640:	60fb      	str	r3, [r7, #12]
 8004642:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004644:	f7ff f974 	bl	8003930 <HAL_PWREx_GetVoltageRange>
 8004648:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800464a:	4b1e      	ldr	r3, [pc, #120]	; (80046c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800464c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800464e:	4a1d      	ldr	r2, [pc, #116]	; (80046c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004650:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004654:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800465c:	d10b      	bne.n	8004676 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2b80      	cmp	r3, #128	; 0x80
 8004662:	d919      	bls.n	8004698 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2ba0      	cmp	r3, #160	; 0xa0
 8004668:	d902      	bls.n	8004670 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800466a:	2302      	movs	r3, #2
 800466c:	613b      	str	r3, [r7, #16]
 800466e:	e013      	b.n	8004698 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004670:	2301      	movs	r3, #1
 8004672:	613b      	str	r3, [r7, #16]
 8004674:	e010      	b.n	8004698 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2b80      	cmp	r3, #128	; 0x80
 800467a:	d902      	bls.n	8004682 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800467c:	2303      	movs	r3, #3
 800467e:	613b      	str	r3, [r7, #16]
 8004680:	e00a      	b.n	8004698 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2b80      	cmp	r3, #128	; 0x80
 8004686:	d102      	bne.n	800468e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004688:	2302      	movs	r3, #2
 800468a:	613b      	str	r3, [r7, #16]
 800468c:	e004      	b.n	8004698 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2b70      	cmp	r3, #112	; 0x70
 8004692:	d101      	bne.n	8004698 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004694:	2301      	movs	r3, #1
 8004696:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004698:	4b0b      	ldr	r3, [pc, #44]	; (80046c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f023 0207 	bic.w	r2, r3, #7
 80046a0:	4909      	ldr	r1, [pc, #36]	; (80046c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80046a8:	4b07      	ldr	r3, [pc, #28]	; (80046c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0307 	and.w	r3, r3, #7
 80046b0:	693a      	ldr	r2, [r7, #16]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d001      	beq.n	80046ba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e000      	b.n	80046bc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3718      	adds	r7, #24
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	40021000 	.word	0x40021000
 80046c8:	40022000 	.word	0x40022000

080046cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80046d4:	2300      	movs	r3, #0
 80046d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80046d8:	2300      	movs	r3, #0
 80046da:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d031      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80046f0:	d01a      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80046f2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80046f6:	d814      	bhi.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d009      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80046fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004700:	d10f      	bne.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004702:	4b5d      	ldr	r3, [pc, #372]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	4a5c      	ldr	r2, [pc, #368]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800470c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800470e:	e00c      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	3304      	adds	r3, #4
 8004714:	2100      	movs	r1, #0
 8004716:	4618      	mov	r0, r3
 8004718:	f000 f9f0 	bl	8004afc <RCCEx_PLLSAI1_Config>
 800471c:	4603      	mov	r3, r0
 800471e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004720:	e003      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	74fb      	strb	r3, [r7, #19]
      break;
 8004726:	e000      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004728:	bf00      	nop
    }

    if(ret == HAL_OK)
 800472a:	7cfb      	ldrb	r3, [r7, #19]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d10b      	bne.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004730:	4b51      	ldr	r3, [pc, #324]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004736:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800473e:	494e      	ldr	r1, [pc, #312]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004740:	4313      	orrs	r3, r2
 8004742:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004746:	e001      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004748:	7cfb      	ldrb	r3, [r7, #19]
 800474a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004754:	2b00      	cmp	r3, #0
 8004756:	f000 809e 	beq.w	8004896 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800475a:	2300      	movs	r3, #0
 800475c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800475e:	4b46      	ldr	r3, [pc, #280]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800476a:	2301      	movs	r3, #1
 800476c:	e000      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800476e:	2300      	movs	r3, #0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00d      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004774:	4b40      	ldr	r3, [pc, #256]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004778:	4a3f      	ldr	r2, [pc, #252]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800477a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800477e:	6593      	str	r3, [r2, #88]	; 0x58
 8004780:	4b3d      	ldr	r3, [pc, #244]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004788:	60bb      	str	r3, [r7, #8]
 800478a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800478c:	2301      	movs	r3, #1
 800478e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004790:	4b3a      	ldr	r3, [pc, #232]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a39      	ldr	r2, [pc, #228]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004796:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800479a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800479c:	f7fd fd68 	bl	8002270 <HAL_GetTick>
 80047a0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80047a2:	e009      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047a4:	f7fd fd64 	bl	8002270 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d902      	bls.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	74fb      	strb	r3, [r7, #19]
        break;
 80047b6:	e005      	b.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80047b8:	4b30      	ldr	r3, [pc, #192]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d0ef      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80047c4:	7cfb      	ldrb	r3, [r7, #19]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d15a      	bne.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80047ca:	4b2b      	ldr	r3, [pc, #172]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047d4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d01e      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d019      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80047e6:	4b24      	ldr	r3, [pc, #144]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047f0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80047f2:	4b21      	ldr	r3, [pc, #132]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047f8:	4a1f      	ldr	r2, [pc, #124]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004802:	4b1d      	ldr	r3, [pc, #116]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004808:	4a1b      	ldr	r2, [pc, #108]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800480a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800480e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004812:	4a19      	ldr	r2, [pc, #100]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	f003 0301 	and.w	r3, r3, #1
 8004820:	2b00      	cmp	r3, #0
 8004822:	d016      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004824:	f7fd fd24 	bl	8002270 <HAL_GetTick>
 8004828:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800482a:	e00b      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800482c:	f7fd fd20 	bl	8002270 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	f241 3288 	movw	r2, #5000	; 0x1388
 800483a:	4293      	cmp	r3, r2
 800483c:	d902      	bls.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	74fb      	strb	r3, [r7, #19]
            break;
 8004842:	e006      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004844:	4b0c      	ldr	r3, [pc, #48]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800484a:	f003 0302 	and.w	r3, r3, #2
 800484e:	2b00      	cmp	r3, #0
 8004850:	d0ec      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004852:	7cfb      	ldrb	r3, [r7, #19]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d10b      	bne.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004858:	4b07      	ldr	r3, [pc, #28]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800485a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800485e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004866:	4904      	ldr	r1, [pc, #16]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004868:	4313      	orrs	r3, r2
 800486a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800486e:	e009      	b.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004870:	7cfb      	ldrb	r3, [r7, #19]
 8004872:	74bb      	strb	r3, [r7, #18]
 8004874:	e006      	b.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004876:	bf00      	nop
 8004878:	40021000 	.word	0x40021000
 800487c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004880:	7cfb      	ldrb	r3, [r7, #19]
 8004882:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004884:	7c7b      	ldrb	r3, [r7, #17]
 8004886:	2b01      	cmp	r3, #1
 8004888:	d105      	bne.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800488a:	4b9b      	ldr	r3, [pc, #620]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800488c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800488e:	4a9a      	ldr	r2, [pc, #616]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004890:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004894:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0301 	and.w	r3, r3, #1
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d00a      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048a2:	4b95      	ldr	r3, [pc, #596]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80048a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a8:	f023 0203 	bic.w	r2, r3, #3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a1b      	ldr	r3, [r3, #32]
 80048b0:	4991      	ldr	r1, [pc, #580]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0302 	and.w	r3, r3, #2
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d00a      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048c4:	4b8c      	ldr	r3, [pc, #560]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80048c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ca:	f023 020c 	bic.w	r2, r3, #12
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d2:	4989      	ldr	r1, [pc, #548]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0304 	and.w	r3, r3, #4
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00a      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80048e6:	4b84      	ldr	r3, [pc, #528]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80048e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f4:	4980      	ldr	r1, [pc, #512]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0320 	and.w	r3, r3, #32
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00a      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004908:	4b7b      	ldr	r3, [pc, #492]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800490a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800490e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004916:	4978      	ldr	r1, [pc, #480]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004918:	4313      	orrs	r3, r2
 800491a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00a      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800492a:	4b73      	ldr	r3, [pc, #460]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800492c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004930:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004938:	496f      	ldr	r1, [pc, #444]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800493a:	4313      	orrs	r3, r2
 800493c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004948:	2b00      	cmp	r3, #0
 800494a:	d00a      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800494c:	4b6a      	ldr	r3, [pc, #424]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800494e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004952:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495a:	4967      	ldr	r1, [pc, #412]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800495c:	4313      	orrs	r3, r2
 800495e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00a      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800496e:	4b62      	ldr	r3, [pc, #392]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004974:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497c:	495e      	ldr	r1, [pc, #376]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800497e:	4313      	orrs	r3, r2
 8004980:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800498c:	2b00      	cmp	r3, #0
 800498e:	d00a      	beq.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004990:	4b59      	ldr	r3, [pc, #356]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004996:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800499e:	4956      	ldr	r1, [pc, #344]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00a      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80049b2:	4b51      	ldr	r3, [pc, #324]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80049b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c0:	494d      	ldr	r1, [pc, #308]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d028      	beq.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80049d4:	4b48      	ldr	r3, [pc, #288]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80049d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049e2:	4945      	ldr	r1, [pc, #276]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80049e4:	4313      	orrs	r3, r2
 80049e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049f2:	d106      	bne.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049f4:	4b40      	ldr	r3, [pc, #256]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	4a3f      	ldr	r2, [pc, #252]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80049fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049fe:	60d3      	str	r3, [r2, #12]
 8004a00:	e011      	b.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a06:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a0a:	d10c      	bne.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	3304      	adds	r3, #4
 8004a10:	2101      	movs	r1, #1
 8004a12:	4618      	mov	r0, r3
 8004a14:	f000 f872 	bl	8004afc <RCCEx_PLLSAI1_Config>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a1c:	7cfb      	ldrb	r3, [r7, #19]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d001      	beq.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8004a22:	7cfb      	ldrb	r3, [r7, #19]
 8004a24:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d028      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a32:	4b31      	ldr	r3, [pc, #196]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a38:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a40:	492d      	ldr	r1, [pc, #180]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a50:	d106      	bne.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a52:	4b29      	ldr	r3, [pc, #164]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	4a28      	ldr	r2, [pc, #160]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004a58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a5c:	60d3      	str	r3, [r2, #12]
 8004a5e:	e011      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a68:	d10c      	bne.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	3304      	adds	r3, #4
 8004a6e:	2101      	movs	r1, #1
 8004a70:	4618      	mov	r0, r3
 8004a72:	f000 f843 	bl	8004afc <RCCEx_PLLSAI1_Config>
 8004a76:	4603      	mov	r3, r0
 8004a78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a7a:	7cfb      	ldrb	r3, [r7, #19]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d001      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8004a80:	7cfb      	ldrb	r3, [r7, #19]
 8004a82:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d01c      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a90:	4b19      	ldr	r3, [pc, #100]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a96:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a9e:	4916      	ldr	r1, [pc, #88]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004aae:	d10c      	bne.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	3304      	adds	r3, #4
 8004ab4:	2102      	movs	r1, #2
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f000 f820 	bl	8004afc <RCCEx_PLLSAI1_Config>
 8004abc:	4603      	mov	r3, r0
 8004abe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ac0:	7cfb      	ldrb	r3, [r7, #19]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d001      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8004ac6:	7cfb      	ldrb	r3, [r7, #19]
 8004ac8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00a      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ad6:	4b08      	ldr	r3, [pc, #32]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004adc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ae4:	4904      	ldr	r1, [pc, #16]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004aec:	7cbb      	ldrb	r3, [r7, #18]
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3718      	adds	r7, #24
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	40021000 	.word	0x40021000

08004afc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b06:	2300      	movs	r3, #0
 8004b08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b0a:	4b74      	ldr	r3, [pc, #464]	; (8004cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	f003 0303 	and.w	r3, r3, #3
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d018      	beq.n	8004b48 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004b16:	4b71      	ldr	r3, [pc, #452]	; (8004cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	f003 0203 	and.w	r2, r3, #3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d10d      	bne.n	8004b42 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
       ||
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d009      	beq.n	8004b42 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004b2e:	4b6b      	ldr	r3, [pc, #428]	; (8004cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	091b      	lsrs	r3, r3, #4
 8004b34:	f003 0307 	and.w	r3, r3, #7
 8004b38:	1c5a      	adds	r2, r3, #1
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
       ||
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d047      	beq.n	8004bd2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	73fb      	strb	r3, [r7, #15]
 8004b46:	e044      	b.n	8004bd2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2b03      	cmp	r3, #3
 8004b4e:	d018      	beq.n	8004b82 <RCCEx_PLLSAI1_Config+0x86>
 8004b50:	2b03      	cmp	r3, #3
 8004b52:	d825      	bhi.n	8004ba0 <RCCEx_PLLSAI1_Config+0xa4>
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d002      	beq.n	8004b5e <RCCEx_PLLSAI1_Config+0x62>
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d009      	beq.n	8004b70 <RCCEx_PLLSAI1_Config+0x74>
 8004b5c:	e020      	b.n	8004ba0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b5e:	4b5f      	ldr	r3, [pc, #380]	; (8004cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0302 	and.w	r3, r3, #2
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d11d      	bne.n	8004ba6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b6e:	e01a      	b.n	8004ba6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b70:	4b5a      	ldr	r3, [pc, #360]	; (8004cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d116      	bne.n	8004baa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b80:	e013      	b.n	8004baa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b82:	4b56      	ldr	r3, [pc, #344]	; (8004cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10f      	bne.n	8004bae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b8e:	4b53      	ldr	r3, [pc, #332]	; (8004cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d109      	bne.n	8004bae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b9e:	e006      	b.n	8004bae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ba4:	e004      	b.n	8004bb0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ba6:	bf00      	nop
 8004ba8:	e002      	b.n	8004bb0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004baa:	bf00      	nop
 8004bac:	e000      	b.n	8004bb0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004bae:	bf00      	nop
    }

    if(status == HAL_OK)
 8004bb0:	7bfb      	ldrb	r3, [r7, #15]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d10d      	bne.n	8004bd2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004bb6:	4b49      	ldr	r3, [pc, #292]	; (8004cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6819      	ldr	r1, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	011b      	lsls	r3, r3, #4
 8004bca:	430b      	orrs	r3, r1
 8004bcc:	4943      	ldr	r1, [pc, #268]	; (8004cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004bd2:	7bfb      	ldrb	r3, [r7, #15]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d17c      	bne.n	8004cd2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004bd8:	4b40      	ldr	r3, [pc, #256]	; (8004cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a3f      	ldr	r2, [pc, #252]	; (8004cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bde:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004be2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004be4:	f7fd fb44 	bl	8002270 <HAL_GetTick>
 8004be8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004bea:	e009      	b.n	8004c00 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004bec:	f7fd fb40 	bl	8002270 <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d902      	bls.n	8004c00 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	73fb      	strb	r3, [r7, #15]
        break;
 8004bfe:	e005      	b.n	8004c0c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c00:	4b36      	ldr	r3, [pc, #216]	; (8004cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d1ef      	bne.n	8004bec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004c0c:	7bfb      	ldrb	r3, [r7, #15]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d15f      	bne.n	8004cd2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d110      	bne.n	8004c3a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c18:	4b30      	ldr	r3, [pc, #192]	; (8004cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004c20:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	6892      	ldr	r2, [r2, #8]
 8004c28:	0211      	lsls	r1, r2, #8
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	68d2      	ldr	r2, [r2, #12]
 8004c2e:	06d2      	lsls	r2, r2, #27
 8004c30:	430a      	orrs	r2, r1
 8004c32:	492a      	ldr	r1, [pc, #168]	; (8004cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	610b      	str	r3, [r1, #16]
 8004c38:	e027      	b.n	8004c8a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d112      	bne.n	8004c66 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c40:	4b26      	ldr	r3, [pc, #152]	; (8004cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004c48:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	6892      	ldr	r2, [r2, #8]
 8004c50:	0211      	lsls	r1, r2, #8
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	6912      	ldr	r2, [r2, #16]
 8004c56:	0852      	lsrs	r2, r2, #1
 8004c58:	3a01      	subs	r2, #1
 8004c5a:	0552      	lsls	r2, r2, #21
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	491f      	ldr	r1, [pc, #124]	; (8004cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c60:	4313      	orrs	r3, r2
 8004c62:	610b      	str	r3, [r1, #16]
 8004c64:	e011      	b.n	8004c8a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c66:	4b1d      	ldr	r3, [pc, #116]	; (8004cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004c6e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	6892      	ldr	r2, [r2, #8]
 8004c76:	0211      	lsls	r1, r2, #8
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	6952      	ldr	r2, [r2, #20]
 8004c7c:	0852      	lsrs	r2, r2, #1
 8004c7e:	3a01      	subs	r2, #1
 8004c80:	0652      	lsls	r2, r2, #25
 8004c82:	430a      	orrs	r2, r1
 8004c84:	4915      	ldr	r1, [pc, #84]	; (8004cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004c8a:	4b14      	ldr	r3, [pc, #80]	; (8004cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a13      	ldr	r2, [pc, #76]	; (8004cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c90:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c94:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c96:	f7fd faeb 	bl	8002270 <HAL_GetTick>
 8004c9a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c9c:	e009      	b.n	8004cb2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c9e:	f7fd fae7 	bl	8002270 <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d902      	bls.n	8004cb2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	73fb      	strb	r3, [r7, #15]
          break;
 8004cb0:	e005      	b.n	8004cbe <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004cb2:	4b0a      	ldr	r3, [pc, #40]	; (8004cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d0ef      	beq.n	8004c9e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004cbe:	7bfb      	ldrb	r3, [r7, #15]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d106      	bne.n	8004cd2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004cc4:	4b05      	ldr	r3, [pc, #20]	; (8004cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cc6:	691a      	ldr	r2, [r3, #16]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	4903      	ldr	r1, [pc, #12]	; (8004cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3710      	adds	r7, #16
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	40021000 	.word	0x40021000

08004ce0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d101      	bne.n	8004cf2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e095      	b.n	8004e1e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d108      	bne.n	8004d0c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d02:	d009      	beq.n	8004d18 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	61da      	str	r2, [r3, #28]
 8004d0a:	e005      	b.n	8004d18 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d106      	bne.n	8004d38 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f7fd f90a 	bl	8001f4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2202      	movs	r2, #2
 8004d3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d4e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d58:	d902      	bls.n	8004d60 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	60fb      	str	r3, [r7, #12]
 8004d5e:	e002      	b.n	8004d66 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004d60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d64:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004d6e:	d007      	beq.n	8004d80 <HAL_SPI_Init+0xa0>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d78:	d002      	beq.n	8004d80 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004d90:	431a      	orrs	r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	431a      	orrs	r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	695b      	ldr	r3, [r3, #20]
 8004da0:	f003 0301 	and.w	r3, r3, #1
 8004da4:	431a      	orrs	r2, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	699b      	ldr	r3, [r3, #24]
 8004daa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dae:	431a      	orrs	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	69db      	ldr	r3, [r3, #28]
 8004db4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004db8:	431a      	orrs	r2, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dc2:	ea42 0103 	orr.w	r1, r2, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dca:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	699b      	ldr	r3, [r3, #24]
 8004dda:	0c1b      	lsrs	r3, r3, #16
 8004ddc:	f003 0204 	and.w	r2, r3, #4
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de4:	f003 0310 	and.w	r3, r3, #16
 8004de8:	431a      	orrs	r2, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dee:	f003 0308 	and.w	r3, r3, #8
 8004df2:	431a      	orrs	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004dfc:	ea42 0103 	orr.w	r1, r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3710      	adds	r7, #16
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}

08004e26 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e26:	b580      	push	{r7, lr}
 8004e28:	b082      	sub	sp, #8
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d101      	bne.n	8004e38 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e049      	b.n	8004ecc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d106      	bne.n	8004e52 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f000 f841 	bl	8004ed4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2202      	movs	r2, #2
 8004e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	3304      	adds	r3, #4
 8004e62:	4619      	mov	r1, r3
 8004e64:	4610      	mov	r0, r2
 8004e66:	f000 f9db 	bl	8005220 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2201      	movs	r2, #1
 8004e96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2201      	movs	r2, #1
 8004eae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3708      	adds	r7, #8
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004edc:	bf00      	nop
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b085      	sub	sp, #20
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d001      	beq.n	8004f00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e03b      	b.n	8004f78 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2202      	movs	r2, #2
 8004f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68da      	ldr	r2, [r3, #12]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f042 0201 	orr.w	r2, r2, #1
 8004f16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a19      	ldr	r2, [pc, #100]	; (8004f84 <HAL_TIM_Base_Start_IT+0x9c>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d009      	beq.n	8004f36 <HAL_TIM_Base_Start_IT+0x4e>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f2a:	d004      	beq.n	8004f36 <HAL_TIM_Base_Start_IT+0x4e>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a15      	ldr	r2, [pc, #84]	; (8004f88 <HAL_TIM_Base_Start_IT+0xa0>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d115      	bne.n	8004f62 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	689a      	ldr	r2, [r3, #8]
 8004f3c:	4b13      	ldr	r3, [pc, #76]	; (8004f8c <HAL_TIM_Base_Start_IT+0xa4>)
 8004f3e:	4013      	ands	r3, r2
 8004f40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2b06      	cmp	r3, #6
 8004f46:	d015      	beq.n	8004f74 <HAL_TIM_Base_Start_IT+0x8c>
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f4e:	d011      	beq.n	8004f74 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f042 0201 	orr.w	r2, r2, #1
 8004f5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f60:	e008      	b.n	8004f74 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f042 0201 	orr.w	r2, r2, #1
 8004f70:	601a      	str	r2, [r3, #0]
 8004f72:	e000      	b.n	8004f76 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f74:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f76:	2300      	movs	r3, #0
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3714      	adds	r7, #20
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr
 8004f84:	40012c00 	.word	0x40012c00
 8004f88:	40014000 	.word	0x40014000
 8004f8c:	00010007 	.word	0x00010007

08004f90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	f003 0302 	and.w	r3, r3, #2
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d122      	bne.n	8004fec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	f003 0302 	and.w	r3, r3, #2
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d11b      	bne.n	8004fec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f06f 0202 	mvn.w	r2, #2
 8004fbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	f003 0303 	and.w	r3, r3, #3
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d003      	beq.n	8004fda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 f905 	bl	80051e2 <HAL_TIM_IC_CaptureCallback>
 8004fd8:	e005      	b.n	8004fe6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 f8f7 	bl	80051ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 f908 	bl	80051f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	f003 0304 	and.w	r3, r3, #4
 8004ff6:	2b04      	cmp	r3, #4
 8004ff8:	d122      	bne.n	8005040 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	f003 0304 	and.w	r3, r3, #4
 8005004:	2b04      	cmp	r3, #4
 8005006:	d11b      	bne.n	8005040 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f06f 0204 	mvn.w	r2, #4
 8005010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2202      	movs	r2, #2
 8005016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005022:	2b00      	cmp	r3, #0
 8005024:	d003      	beq.n	800502e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 f8db 	bl	80051e2 <HAL_TIM_IC_CaptureCallback>
 800502c:	e005      	b.n	800503a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 f8cd 	bl	80051ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 f8de 	bl	80051f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	f003 0308 	and.w	r3, r3, #8
 800504a:	2b08      	cmp	r3, #8
 800504c:	d122      	bne.n	8005094 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	f003 0308 	and.w	r3, r3, #8
 8005058:	2b08      	cmp	r3, #8
 800505a:	d11b      	bne.n	8005094 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f06f 0208 	mvn.w	r2, #8
 8005064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2204      	movs	r2, #4
 800506a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	69db      	ldr	r3, [r3, #28]
 8005072:	f003 0303 	and.w	r3, r3, #3
 8005076:	2b00      	cmp	r3, #0
 8005078:	d003      	beq.n	8005082 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 f8b1 	bl	80051e2 <HAL_TIM_IC_CaptureCallback>
 8005080:	e005      	b.n	800508e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 f8a3 	bl	80051ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f000 f8b4 	bl	80051f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	f003 0310 	and.w	r3, r3, #16
 800509e:	2b10      	cmp	r3, #16
 80050a0:	d122      	bne.n	80050e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	f003 0310 	and.w	r3, r3, #16
 80050ac:	2b10      	cmp	r3, #16
 80050ae:	d11b      	bne.n	80050e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f06f 0210 	mvn.w	r2, #16
 80050b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2208      	movs	r2, #8
 80050be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	69db      	ldr	r3, [r3, #28]
 80050c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d003      	beq.n	80050d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 f887 	bl	80051e2 <HAL_TIM_IC_CaptureCallback>
 80050d4:	e005      	b.n	80050e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 f879 	bl	80051ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f000 f88a 	bl	80051f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	f003 0301 	and.w	r3, r3, #1
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d10e      	bne.n	8005114 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	f003 0301 	and.w	r3, r3, #1
 8005100:	2b01      	cmp	r3, #1
 8005102:	d107      	bne.n	8005114 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f06f 0201 	mvn.w	r2, #1
 800510c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f7fc fc94 	bl	8001a3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800511e:	2b80      	cmp	r3, #128	; 0x80
 8005120:	d10e      	bne.n	8005140 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800512c:	2b80      	cmp	r3, #128	; 0x80
 800512e:	d107      	bne.n	8005140 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 f8de 	bl	80052fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800514a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800514e:	d10e      	bne.n	800516e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800515a:	2b80      	cmp	r3, #128	; 0x80
 800515c:	d107      	bne.n	800516e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005166:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 f8d1 	bl	8005310 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005178:	2b40      	cmp	r3, #64	; 0x40
 800517a:	d10e      	bne.n	800519a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005186:	2b40      	cmp	r3, #64	; 0x40
 8005188:	d107      	bne.n	800519a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005192:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 f838 	bl	800520a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	691b      	ldr	r3, [r3, #16]
 80051a0:	f003 0320 	and.w	r3, r3, #32
 80051a4:	2b20      	cmp	r3, #32
 80051a6:	d10e      	bne.n	80051c6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	f003 0320 	and.w	r3, r3, #32
 80051b2:	2b20      	cmp	r3, #32
 80051b4:	d107      	bne.n	80051c6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f06f 0220 	mvn.w	r2, #32
 80051be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f000 f891 	bl	80052e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051c6:	bf00      	nop
 80051c8:	3708      	adds	r7, #8
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}

080051ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051ce:	b480      	push	{r7}
 80051d0:	b083      	sub	sp, #12
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051d6:	bf00      	nop
 80051d8:	370c      	adds	r7, #12
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr

080051e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051e2:	b480      	push	{r7}
 80051e4:	b083      	sub	sp, #12
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051ea:	bf00      	nop
 80051ec:	370c      	adds	r7, #12
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr

080051f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051f6:	b480      	push	{r7}
 80051f8:	b083      	sub	sp, #12
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051fe:	bf00      	nop
 8005200:	370c      	adds	r7, #12
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr

0800520a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800520a:	b480      	push	{r7}
 800520c:	b083      	sub	sp, #12
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005212:	bf00      	nop
 8005214:	370c      	adds	r7, #12
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr
	...

08005220 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005220:	b480      	push	{r7}
 8005222:	b085      	sub	sp, #20
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a2a      	ldr	r2, [pc, #168]	; (80052dc <TIM_Base_SetConfig+0xbc>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d003      	beq.n	8005240 <TIM_Base_SetConfig+0x20>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800523e:	d108      	bne.n	8005252 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005246:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	4313      	orrs	r3, r2
 8005250:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a21      	ldr	r2, [pc, #132]	; (80052dc <TIM_Base_SetConfig+0xbc>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d00b      	beq.n	8005272 <TIM_Base_SetConfig+0x52>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005260:	d007      	beq.n	8005272 <TIM_Base_SetConfig+0x52>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a1e      	ldr	r2, [pc, #120]	; (80052e0 <TIM_Base_SetConfig+0xc0>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d003      	beq.n	8005272 <TIM_Base_SetConfig+0x52>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a1d      	ldr	r2, [pc, #116]	; (80052e4 <TIM_Base_SetConfig+0xc4>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d108      	bne.n	8005284 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005278:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	4313      	orrs	r3, r2
 8005282:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	4313      	orrs	r3, r2
 8005290:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	689a      	ldr	r2, [r3, #8]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a0c      	ldr	r2, [pc, #48]	; (80052dc <TIM_Base_SetConfig+0xbc>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d007      	beq.n	80052c0 <TIM_Base_SetConfig+0xa0>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a0b      	ldr	r2, [pc, #44]	; (80052e0 <TIM_Base_SetConfig+0xc0>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d003      	beq.n	80052c0 <TIM_Base_SetConfig+0xa0>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a0a      	ldr	r2, [pc, #40]	; (80052e4 <TIM_Base_SetConfig+0xc4>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d103      	bne.n	80052c8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	691a      	ldr	r2, [r3, #16]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	615a      	str	r2, [r3, #20]
}
 80052ce:	bf00      	nop
 80052d0:	3714      	adds	r7, #20
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	40012c00 	.word	0x40012c00
 80052e0:	40014000 	.word	0x40014000
 80052e4:	40014400 	.word	0x40014400

080052e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052f0:	bf00      	nop
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005304:	bf00      	nop
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b082      	sub	sp, #8
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d101      	bne.n	8005336 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e040      	b.n	80053b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800533a:	2b00      	cmp	r3, #0
 800533c:	d106      	bne.n	800534c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f7fc fcb0 	bl	8001cac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2224      	movs	r2, #36	; 0x24
 8005350:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f022 0201 	bic.w	r2, r2, #1
 8005360:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 f922 	bl	80055ac <UART_SetConfig>
 8005368:	4603      	mov	r3, r0
 800536a:	2b01      	cmp	r3, #1
 800536c:	d101      	bne.n	8005372 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e022      	b.n	80053b8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005376:	2b00      	cmp	r3, #0
 8005378:	d002      	beq.n	8005380 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 fb70 	bl	8005a60 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	685a      	ldr	r2, [r3, #4]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800538e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	689a      	ldr	r2, [r3, #8]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800539e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f042 0201 	orr.w	r2, r2, #1
 80053ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f000 fbf7 	bl	8005ba4 <UART_CheckIdleState>
 80053b6:	4603      	mov	r3, r0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3708      	adds	r7, #8
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b08a      	sub	sp, #40	; 0x28
 80053c4:	af02      	add	r7, sp, #8
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	603b      	str	r3, [r7, #0]
 80053cc:	4613      	mov	r3, r2
 80053ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053d4:	2b20      	cmp	r3, #32
 80053d6:	f040 8082 	bne.w	80054de <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d002      	beq.n	80053e6 <HAL_UART_Transmit+0x26>
 80053e0:	88fb      	ldrh	r3, [r7, #6]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d101      	bne.n	80053ea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e07a      	b.n	80054e0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d101      	bne.n	80053f8 <HAL_UART_Transmit+0x38>
 80053f4:	2302      	movs	r3, #2
 80053f6:	e073      	b.n	80054e0 <HAL_UART_Transmit+0x120>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2221      	movs	r2, #33	; 0x21
 800540c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800540e:	f7fc ff2f 	bl	8002270 <HAL_GetTick>
 8005412:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	88fa      	ldrh	r2, [r7, #6]
 8005418:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	88fa      	ldrh	r2, [r7, #6]
 8005420:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800542c:	d108      	bne.n	8005440 <HAL_UART_Transmit+0x80>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d104      	bne.n	8005440 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005436:	2300      	movs	r3, #0
 8005438:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	61bb      	str	r3, [r7, #24]
 800543e:	e003      	b.n	8005448 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005444:	2300      	movs	r3, #0
 8005446:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005450:	e02d      	b.n	80054ae <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	9300      	str	r3, [sp, #0]
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	2200      	movs	r2, #0
 800545a:	2180      	movs	r1, #128	; 0x80
 800545c:	68f8      	ldr	r0, [r7, #12]
 800545e:	f000 fbea 	bl	8005c36 <UART_WaitOnFlagUntilTimeout>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d001      	beq.n	800546c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e039      	b.n	80054e0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d10b      	bne.n	800548a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	881a      	ldrh	r2, [r3, #0]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800547e:	b292      	uxth	r2, r2
 8005480:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	3302      	adds	r3, #2
 8005486:	61bb      	str	r3, [r7, #24]
 8005488:	e008      	b.n	800549c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	781a      	ldrb	r2, [r3, #0]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	b292      	uxth	r2, r2
 8005494:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	3301      	adds	r3, #1
 800549a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	3b01      	subs	r3, #1
 80054a6:	b29a      	uxth	r2, r3
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d1cb      	bne.n	8005452 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	9300      	str	r3, [sp, #0]
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	2200      	movs	r2, #0
 80054c2:	2140      	movs	r1, #64	; 0x40
 80054c4:	68f8      	ldr	r0, [r7, #12]
 80054c6:	f000 fbb6 	bl	8005c36 <UART_WaitOnFlagUntilTimeout>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d001      	beq.n	80054d4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	e005      	b.n	80054e0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2220      	movs	r2, #32
 80054d8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80054da:	2300      	movs	r3, #0
 80054dc:	e000      	b.n	80054e0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80054de:	2302      	movs	r3, #2
  }
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3720      	adds	r7, #32
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b08a      	sub	sp, #40	; 0x28
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	4613      	mov	r3, r2
 80054f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054fa:	2b20      	cmp	r3, #32
 80054fc:	d142      	bne.n	8005584 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d002      	beq.n	800550a <HAL_UART_Receive_IT+0x22>
 8005504:	88fb      	ldrh	r3, [r7, #6]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d101      	bne.n	800550e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e03b      	b.n	8005586 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005514:	2b01      	cmp	r3, #1
 8005516:	d101      	bne.n	800551c <HAL_UART_Receive_IT+0x34>
 8005518:	2302      	movs	r3, #2
 800551a:	e034      	b.n	8005586 <HAL_UART_Receive_IT+0x9e>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2200      	movs	r2, #0
 8005528:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a18      	ldr	r2, [pc, #96]	; (8005590 <HAL_UART_Receive_IT+0xa8>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d01f      	beq.n	8005574 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d018      	beq.n	8005574 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	e853 3f00 	ldrex	r3, [r3]
 800554e:	613b      	str	r3, [r7, #16]
   return(result);
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005556:	627b      	str	r3, [r7, #36]	; 0x24
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	461a      	mov	r2, r3
 800555e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005560:	623b      	str	r3, [r7, #32]
 8005562:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005564:	69f9      	ldr	r1, [r7, #28]
 8005566:	6a3a      	ldr	r2, [r7, #32]
 8005568:	e841 2300 	strex	r3, r2, [r1]
 800556c:	61bb      	str	r3, [r7, #24]
   return(result);
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d1e6      	bne.n	8005542 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005574:	88fb      	ldrh	r3, [r7, #6]
 8005576:	461a      	mov	r2, r3
 8005578:	68b9      	ldr	r1, [r7, #8]
 800557a:	68f8      	ldr	r0, [r7, #12]
 800557c:	f000 fc20 	bl	8005dc0 <UART_Start_Receive_IT>
 8005580:	4603      	mov	r3, r0
 8005582:	e000      	b.n	8005586 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005584:	2302      	movs	r3, #2
  }
}
 8005586:	4618      	mov	r0, r3
 8005588:	3728      	adds	r7, #40	; 0x28
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop
 8005590:	40008000 	.word	0x40008000

08005594 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	460b      	mov	r3, r1
 800559e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80055a0:	bf00      	nop
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055b0:	b08a      	sub	sp, #40	; 0x28
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80055b6:	2300      	movs	r3, #0
 80055b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	689a      	ldr	r2, [r3, #8]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	431a      	orrs	r2, r3
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	695b      	ldr	r3, [r3, #20]
 80055ca:	431a      	orrs	r2, r3
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	69db      	ldr	r3, [r3, #28]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	4b9e      	ldr	r3, [pc, #632]	; (8005854 <UART_SetConfig+0x2a8>)
 80055dc:	4013      	ands	r3, r2
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	6812      	ldr	r2, [r2, #0]
 80055e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80055e4:	430b      	orrs	r3, r1
 80055e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	68da      	ldr	r2, [r3, #12]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	430a      	orrs	r2, r1
 80055fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a93      	ldr	r2, [pc, #588]	; (8005858 <UART_SetConfig+0x2ac>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d004      	beq.n	8005618 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6a1b      	ldr	r3, [r3, #32]
 8005612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005614:	4313      	orrs	r3, r2
 8005616:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005628:	430a      	orrs	r2, r1
 800562a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a8a      	ldr	r2, [pc, #552]	; (800585c <UART_SetConfig+0x2b0>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d126      	bne.n	8005684 <UART_SetConfig+0xd8>
 8005636:	4b8a      	ldr	r3, [pc, #552]	; (8005860 <UART_SetConfig+0x2b4>)
 8005638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800563c:	f003 0303 	and.w	r3, r3, #3
 8005640:	2b03      	cmp	r3, #3
 8005642:	d81b      	bhi.n	800567c <UART_SetConfig+0xd0>
 8005644:	a201      	add	r2, pc, #4	; (adr r2, 800564c <UART_SetConfig+0xa0>)
 8005646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800564a:	bf00      	nop
 800564c:	0800565d 	.word	0x0800565d
 8005650:	0800566d 	.word	0x0800566d
 8005654:	08005665 	.word	0x08005665
 8005658:	08005675 	.word	0x08005675
 800565c:	2301      	movs	r3, #1
 800565e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005662:	e0ab      	b.n	80057bc <UART_SetConfig+0x210>
 8005664:	2302      	movs	r3, #2
 8005666:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800566a:	e0a7      	b.n	80057bc <UART_SetConfig+0x210>
 800566c:	2304      	movs	r3, #4
 800566e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005672:	e0a3      	b.n	80057bc <UART_SetConfig+0x210>
 8005674:	2308      	movs	r3, #8
 8005676:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800567a:	e09f      	b.n	80057bc <UART_SetConfig+0x210>
 800567c:	2310      	movs	r3, #16
 800567e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005682:	e09b      	b.n	80057bc <UART_SetConfig+0x210>
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a76      	ldr	r2, [pc, #472]	; (8005864 <UART_SetConfig+0x2b8>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d138      	bne.n	8005700 <UART_SetConfig+0x154>
 800568e:	4b74      	ldr	r3, [pc, #464]	; (8005860 <UART_SetConfig+0x2b4>)
 8005690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005694:	f003 030c 	and.w	r3, r3, #12
 8005698:	2b0c      	cmp	r3, #12
 800569a:	d82d      	bhi.n	80056f8 <UART_SetConfig+0x14c>
 800569c:	a201      	add	r2, pc, #4	; (adr r2, 80056a4 <UART_SetConfig+0xf8>)
 800569e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a2:	bf00      	nop
 80056a4:	080056d9 	.word	0x080056d9
 80056a8:	080056f9 	.word	0x080056f9
 80056ac:	080056f9 	.word	0x080056f9
 80056b0:	080056f9 	.word	0x080056f9
 80056b4:	080056e9 	.word	0x080056e9
 80056b8:	080056f9 	.word	0x080056f9
 80056bc:	080056f9 	.word	0x080056f9
 80056c0:	080056f9 	.word	0x080056f9
 80056c4:	080056e1 	.word	0x080056e1
 80056c8:	080056f9 	.word	0x080056f9
 80056cc:	080056f9 	.word	0x080056f9
 80056d0:	080056f9 	.word	0x080056f9
 80056d4:	080056f1 	.word	0x080056f1
 80056d8:	2300      	movs	r3, #0
 80056da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056de:	e06d      	b.n	80057bc <UART_SetConfig+0x210>
 80056e0:	2302      	movs	r3, #2
 80056e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056e6:	e069      	b.n	80057bc <UART_SetConfig+0x210>
 80056e8:	2304      	movs	r3, #4
 80056ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056ee:	e065      	b.n	80057bc <UART_SetConfig+0x210>
 80056f0:	2308      	movs	r3, #8
 80056f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056f6:	e061      	b.n	80057bc <UART_SetConfig+0x210>
 80056f8:	2310      	movs	r3, #16
 80056fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056fe:	e05d      	b.n	80057bc <UART_SetConfig+0x210>
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a58      	ldr	r2, [pc, #352]	; (8005868 <UART_SetConfig+0x2bc>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d125      	bne.n	8005756 <UART_SetConfig+0x1aa>
 800570a:	4b55      	ldr	r3, [pc, #340]	; (8005860 <UART_SetConfig+0x2b4>)
 800570c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005710:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005714:	2b30      	cmp	r3, #48	; 0x30
 8005716:	d016      	beq.n	8005746 <UART_SetConfig+0x19a>
 8005718:	2b30      	cmp	r3, #48	; 0x30
 800571a:	d818      	bhi.n	800574e <UART_SetConfig+0x1a2>
 800571c:	2b20      	cmp	r3, #32
 800571e:	d00a      	beq.n	8005736 <UART_SetConfig+0x18a>
 8005720:	2b20      	cmp	r3, #32
 8005722:	d814      	bhi.n	800574e <UART_SetConfig+0x1a2>
 8005724:	2b00      	cmp	r3, #0
 8005726:	d002      	beq.n	800572e <UART_SetConfig+0x182>
 8005728:	2b10      	cmp	r3, #16
 800572a:	d008      	beq.n	800573e <UART_SetConfig+0x192>
 800572c:	e00f      	b.n	800574e <UART_SetConfig+0x1a2>
 800572e:	2300      	movs	r3, #0
 8005730:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005734:	e042      	b.n	80057bc <UART_SetConfig+0x210>
 8005736:	2302      	movs	r3, #2
 8005738:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800573c:	e03e      	b.n	80057bc <UART_SetConfig+0x210>
 800573e:	2304      	movs	r3, #4
 8005740:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005744:	e03a      	b.n	80057bc <UART_SetConfig+0x210>
 8005746:	2308      	movs	r3, #8
 8005748:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800574c:	e036      	b.n	80057bc <UART_SetConfig+0x210>
 800574e:	2310      	movs	r3, #16
 8005750:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005754:	e032      	b.n	80057bc <UART_SetConfig+0x210>
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a3f      	ldr	r2, [pc, #252]	; (8005858 <UART_SetConfig+0x2ac>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d12a      	bne.n	80057b6 <UART_SetConfig+0x20a>
 8005760:	4b3f      	ldr	r3, [pc, #252]	; (8005860 <UART_SetConfig+0x2b4>)
 8005762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005766:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800576a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800576e:	d01a      	beq.n	80057a6 <UART_SetConfig+0x1fa>
 8005770:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005774:	d81b      	bhi.n	80057ae <UART_SetConfig+0x202>
 8005776:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800577a:	d00c      	beq.n	8005796 <UART_SetConfig+0x1ea>
 800577c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005780:	d815      	bhi.n	80057ae <UART_SetConfig+0x202>
 8005782:	2b00      	cmp	r3, #0
 8005784:	d003      	beq.n	800578e <UART_SetConfig+0x1e2>
 8005786:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800578a:	d008      	beq.n	800579e <UART_SetConfig+0x1f2>
 800578c:	e00f      	b.n	80057ae <UART_SetConfig+0x202>
 800578e:	2300      	movs	r3, #0
 8005790:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005794:	e012      	b.n	80057bc <UART_SetConfig+0x210>
 8005796:	2302      	movs	r3, #2
 8005798:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800579c:	e00e      	b.n	80057bc <UART_SetConfig+0x210>
 800579e:	2304      	movs	r3, #4
 80057a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057a4:	e00a      	b.n	80057bc <UART_SetConfig+0x210>
 80057a6:	2308      	movs	r3, #8
 80057a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057ac:	e006      	b.n	80057bc <UART_SetConfig+0x210>
 80057ae:	2310      	movs	r3, #16
 80057b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057b4:	e002      	b.n	80057bc <UART_SetConfig+0x210>
 80057b6:	2310      	movs	r3, #16
 80057b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a25      	ldr	r2, [pc, #148]	; (8005858 <UART_SetConfig+0x2ac>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	f040 808a 	bne.w	80058dc <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80057c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80057cc:	2b08      	cmp	r3, #8
 80057ce:	d824      	bhi.n	800581a <UART_SetConfig+0x26e>
 80057d0:	a201      	add	r2, pc, #4	; (adr r2, 80057d8 <UART_SetConfig+0x22c>)
 80057d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d6:	bf00      	nop
 80057d8:	080057fd 	.word	0x080057fd
 80057dc:	0800581b 	.word	0x0800581b
 80057e0:	08005805 	.word	0x08005805
 80057e4:	0800581b 	.word	0x0800581b
 80057e8:	0800580b 	.word	0x0800580b
 80057ec:	0800581b 	.word	0x0800581b
 80057f0:	0800581b 	.word	0x0800581b
 80057f4:	0800581b 	.word	0x0800581b
 80057f8:	08005813 	.word	0x08005813
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057fc:	f7fe fea8 	bl	8004550 <HAL_RCC_GetPCLK1Freq>
 8005800:	61f8      	str	r0, [r7, #28]
        break;
 8005802:	e010      	b.n	8005826 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005804:	4b19      	ldr	r3, [pc, #100]	; (800586c <UART_SetConfig+0x2c0>)
 8005806:	61fb      	str	r3, [r7, #28]
        break;
 8005808:	e00d      	b.n	8005826 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800580a:	f7fe fe09 	bl	8004420 <HAL_RCC_GetSysClockFreq>
 800580e:	61f8      	str	r0, [r7, #28]
        break;
 8005810:	e009      	b.n	8005826 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005812:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005816:	61fb      	str	r3, [r7, #28]
        break;
 8005818:	e005      	b.n	8005826 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800581a:	2300      	movs	r3, #0
 800581c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005824:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	2b00      	cmp	r3, #0
 800582a:	f000 8109 	beq.w	8005a40 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	685a      	ldr	r2, [r3, #4]
 8005832:	4613      	mov	r3, r2
 8005834:	005b      	lsls	r3, r3, #1
 8005836:	4413      	add	r3, r2
 8005838:	69fa      	ldr	r2, [r7, #28]
 800583a:	429a      	cmp	r2, r3
 800583c:	d305      	bcc.n	800584a <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005844:	69fa      	ldr	r2, [r7, #28]
 8005846:	429a      	cmp	r2, r3
 8005848:	d912      	bls.n	8005870 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005850:	e0f6      	b.n	8005a40 <UART_SetConfig+0x494>
 8005852:	bf00      	nop
 8005854:	efff69f3 	.word	0xefff69f3
 8005858:	40008000 	.word	0x40008000
 800585c:	40013800 	.word	0x40013800
 8005860:	40021000 	.word	0x40021000
 8005864:	40004400 	.word	0x40004400
 8005868:	40004800 	.word	0x40004800
 800586c:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	2200      	movs	r2, #0
 8005874:	461c      	mov	r4, r3
 8005876:	4615      	mov	r5, r2
 8005878:	f04f 0200 	mov.w	r2, #0
 800587c:	f04f 0300 	mov.w	r3, #0
 8005880:	022b      	lsls	r3, r5, #8
 8005882:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005886:	0222      	lsls	r2, r4, #8
 8005888:	68f9      	ldr	r1, [r7, #12]
 800588a:	6849      	ldr	r1, [r1, #4]
 800588c:	0849      	lsrs	r1, r1, #1
 800588e:	2000      	movs	r0, #0
 8005890:	4688      	mov	r8, r1
 8005892:	4681      	mov	r9, r0
 8005894:	eb12 0a08 	adds.w	sl, r2, r8
 8005898:	eb43 0b09 	adc.w	fp, r3, r9
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	603b      	str	r3, [r7, #0]
 80058a4:	607a      	str	r2, [r7, #4]
 80058a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058aa:	4650      	mov	r0, sl
 80058ac:	4659      	mov	r1, fp
 80058ae:	f7fa fcf7 	bl	80002a0 <__aeabi_uldivmod>
 80058b2:	4602      	mov	r2, r0
 80058b4:	460b      	mov	r3, r1
 80058b6:	4613      	mov	r3, r2
 80058b8:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058c0:	d308      	bcc.n	80058d4 <UART_SetConfig+0x328>
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058c8:	d204      	bcs.n	80058d4 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	69ba      	ldr	r2, [r7, #24]
 80058d0:	60da      	str	r2, [r3, #12]
 80058d2:	e0b5      	b.n	8005a40 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80058da:	e0b1      	b.n	8005a40 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	69db      	ldr	r3, [r3, #28]
 80058e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058e4:	d15d      	bne.n	80059a2 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80058e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058ea:	2b08      	cmp	r3, #8
 80058ec:	d827      	bhi.n	800593e <UART_SetConfig+0x392>
 80058ee:	a201      	add	r2, pc, #4	; (adr r2, 80058f4 <UART_SetConfig+0x348>)
 80058f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f4:	08005919 	.word	0x08005919
 80058f8:	08005921 	.word	0x08005921
 80058fc:	08005929 	.word	0x08005929
 8005900:	0800593f 	.word	0x0800593f
 8005904:	0800592f 	.word	0x0800592f
 8005908:	0800593f 	.word	0x0800593f
 800590c:	0800593f 	.word	0x0800593f
 8005910:	0800593f 	.word	0x0800593f
 8005914:	08005937 	.word	0x08005937
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005918:	f7fe fe1a 	bl	8004550 <HAL_RCC_GetPCLK1Freq>
 800591c:	61f8      	str	r0, [r7, #28]
        break;
 800591e:	e014      	b.n	800594a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005920:	f7fe fe2c 	bl	800457c <HAL_RCC_GetPCLK2Freq>
 8005924:	61f8      	str	r0, [r7, #28]
        break;
 8005926:	e010      	b.n	800594a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005928:	4b4c      	ldr	r3, [pc, #304]	; (8005a5c <UART_SetConfig+0x4b0>)
 800592a:	61fb      	str	r3, [r7, #28]
        break;
 800592c:	e00d      	b.n	800594a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800592e:	f7fe fd77 	bl	8004420 <HAL_RCC_GetSysClockFreq>
 8005932:	61f8      	str	r0, [r7, #28]
        break;
 8005934:	e009      	b.n	800594a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005936:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800593a:	61fb      	str	r3, [r7, #28]
        break;
 800593c:	e005      	b.n	800594a <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800593e:	2300      	movs	r3, #0
 8005940:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005948:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d077      	beq.n	8005a40 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	005a      	lsls	r2, r3, #1
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	085b      	lsrs	r3, r3, #1
 800595a:	441a      	add	r2, r3
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	fbb2 f3f3 	udiv	r3, r2, r3
 8005964:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	2b0f      	cmp	r3, #15
 800596a:	d916      	bls.n	800599a <UART_SetConfig+0x3ee>
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005972:	d212      	bcs.n	800599a <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	b29b      	uxth	r3, r3
 8005978:	f023 030f 	bic.w	r3, r3, #15
 800597c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	085b      	lsrs	r3, r3, #1
 8005982:	b29b      	uxth	r3, r3
 8005984:	f003 0307 	and.w	r3, r3, #7
 8005988:	b29a      	uxth	r2, r3
 800598a:	8afb      	ldrh	r3, [r7, #22]
 800598c:	4313      	orrs	r3, r2
 800598e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	8afa      	ldrh	r2, [r7, #22]
 8005996:	60da      	str	r2, [r3, #12]
 8005998:	e052      	b.n	8005a40 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80059a0:	e04e      	b.n	8005a40 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80059a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80059a6:	2b08      	cmp	r3, #8
 80059a8:	d827      	bhi.n	80059fa <UART_SetConfig+0x44e>
 80059aa:	a201      	add	r2, pc, #4	; (adr r2, 80059b0 <UART_SetConfig+0x404>)
 80059ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b0:	080059d5 	.word	0x080059d5
 80059b4:	080059dd 	.word	0x080059dd
 80059b8:	080059e5 	.word	0x080059e5
 80059bc:	080059fb 	.word	0x080059fb
 80059c0:	080059eb 	.word	0x080059eb
 80059c4:	080059fb 	.word	0x080059fb
 80059c8:	080059fb 	.word	0x080059fb
 80059cc:	080059fb 	.word	0x080059fb
 80059d0:	080059f3 	.word	0x080059f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059d4:	f7fe fdbc 	bl	8004550 <HAL_RCC_GetPCLK1Freq>
 80059d8:	61f8      	str	r0, [r7, #28]
        break;
 80059da:	e014      	b.n	8005a06 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059dc:	f7fe fdce 	bl	800457c <HAL_RCC_GetPCLK2Freq>
 80059e0:	61f8      	str	r0, [r7, #28]
        break;
 80059e2:	e010      	b.n	8005a06 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059e4:	4b1d      	ldr	r3, [pc, #116]	; (8005a5c <UART_SetConfig+0x4b0>)
 80059e6:	61fb      	str	r3, [r7, #28]
        break;
 80059e8:	e00d      	b.n	8005a06 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059ea:	f7fe fd19 	bl	8004420 <HAL_RCC_GetSysClockFreq>
 80059ee:	61f8      	str	r0, [r7, #28]
        break;
 80059f0:	e009      	b.n	8005a06 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059f6:	61fb      	str	r3, [r7, #28]
        break;
 80059f8:	e005      	b.n	8005a06 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80059fa:	2300      	movs	r3, #0
 80059fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005a04:	bf00      	nop
    }

    if (pclk != 0U)
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d019      	beq.n	8005a40 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	085a      	lsrs	r2, r3, #1
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	441a      	add	r2, r3
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a1e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	2b0f      	cmp	r3, #15
 8005a24:	d909      	bls.n	8005a3a <UART_SetConfig+0x48e>
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a2c:	d205      	bcs.n	8005a3a <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	b29a      	uxth	r2, r3
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	60da      	str	r2, [r3, #12]
 8005a38:	e002      	b.n	8005a40 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005a4c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3728      	adds	r7, #40	; 0x28
 8005a54:	46bd      	mov	sp, r7
 8005a56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a5a:	bf00      	nop
 8005a5c:	00f42400 	.word	0x00f42400

08005a60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6c:	f003 0301 	and.w	r3, r3, #1
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d00a      	beq.n	8005a8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	430a      	orrs	r2, r1
 8005a88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8e:	f003 0302 	and.w	r3, r3, #2
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00a      	beq.n	8005aac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	430a      	orrs	r2, r1
 8005aaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab0:	f003 0304 	and.w	r3, r3, #4
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d00a      	beq.n	8005ace <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	430a      	orrs	r2, r1
 8005acc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad2:	f003 0308 	and.w	r3, r3, #8
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00a      	beq.n	8005af0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	430a      	orrs	r2, r1
 8005aee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af4:	f003 0310 	and.w	r3, r3, #16
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d00a      	beq.n	8005b12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	430a      	orrs	r2, r1
 8005b10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b16:	f003 0320 	and.w	r3, r3, #32
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d00a      	beq.n	8005b34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	430a      	orrs	r2, r1
 8005b32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d01a      	beq.n	8005b76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	430a      	orrs	r2, r1
 8005b54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b5e:	d10a      	bne.n	8005b76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	430a      	orrs	r2, r1
 8005b74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00a      	beq.n	8005b98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	430a      	orrs	r2, r1
 8005b96:	605a      	str	r2, [r3, #4]
  }
}
 8005b98:	bf00      	nop
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b086      	sub	sp, #24
 8005ba8:	af02      	add	r7, sp, #8
 8005baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005bb4:	f7fc fb5c 	bl	8002270 <HAL_GetTick>
 8005bb8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0308 	and.w	r3, r3, #8
 8005bc4:	2b08      	cmp	r3, #8
 8005bc6:	d10e      	bne.n	8005be6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005bcc:	9300      	str	r3, [sp, #0]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 f82d 	bl	8005c36 <UART_WaitOnFlagUntilTimeout>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d001      	beq.n	8005be6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e023      	b.n	8005c2e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0304 	and.w	r3, r3, #4
 8005bf0:	2b04      	cmp	r3, #4
 8005bf2:	d10e      	bne.n	8005c12 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bf4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005bf8:	9300      	str	r3, [sp, #0]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 f817 	bl	8005c36 <UART_WaitOnFlagUntilTimeout>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d001      	beq.n	8005c12 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	e00d      	b.n	8005c2e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2220      	movs	r2, #32
 8005c16:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2220      	movs	r2, #32
 8005c1c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3710      	adds	r7, #16
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}

08005c36 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c36:	b580      	push	{r7, lr}
 8005c38:	b09c      	sub	sp, #112	; 0x70
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	60f8      	str	r0, [r7, #12]
 8005c3e:	60b9      	str	r1, [r7, #8]
 8005c40:	603b      	str	r3, [r7, #0]
 8005c42:	4613      	mov	r3, r2
 8005c44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c46:	e0a5      	b.n	8005d94 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c4e:	f000 80a1 	beq.w	8005d94 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c52:	f7fc fb0d 	bl	8002270 <HAL_GetTick>
 8005c56:	4602      	mov	r2, r0
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	1ad3      	subs	r3, r2, r3
 8005c5c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d302      	bcc.n	8005c68 <UART_WaitOnFlagUntilTimeout+0x32>
 8005c62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d13e      	bne.n	8005ce6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c70:	e853 3f00 	ldrex	r3, [r3]
 8005c74:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005c76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c78:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c7c:	667b      	str	r3, [r7, #100]	; 0x64
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	461a      	mov	r2, r3
 8005c84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c88:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c8a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005c8c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005c8e:	e841 2300 	strex	r3, r2, [r1]
 8005c92:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005c94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d1e6      	bne.n	8005c68 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	3308      	adds	r3, #8
 8005ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ca4:	e853 3f00 	ldrex	r3, [r3]
 8005ca8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cac:	f023 0301 	bic.w	r3, r3, #1
 8005cb0:	663b      	str	r3, [r7, #96]	; 0x60
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	3308      	adds	r3, #8
 8005cb8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005cba:	64ba      	str	r2, [r7, #72]	; 0x48
 8005cbc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cbe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005cc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cc2:	e841 2300 	strex	r3, r2, [r1]
 8005cc6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005cc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d1e5      	bne.n	8005c9a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2220      	movs	r2, #32
 8005cd2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2220      	movs	r2, #32
 8005cd8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e067      	b.n	8005db6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 0304 	and.w	r3, r3, #4
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d04f      	beq.n	8005d94 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	69db      	ldr	r3, [r3, #28]
 8005cfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d02:	d147      	bne.n	8005d94 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d0c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d16:	e853 3f00 	ldrex	r3, [r3]
 8005d1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d22:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	461a      	mov	r2, r3
 8005d2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d2c:	637b      	str	r3, [r7, #52]	; 0x34
 8005d2e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d34:	e841 2300 	strex	r3, r2, [r1]
 8005d38:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d1e6      	bne.n	8005d0e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	3308      	adds	r3, #8
 8005d46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	e853 3f00 	ldrex	r3, [r3]
 8005d4e:	613b      	str	r3, [r7, #16]
   return(result);
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	f023 0301 	bic.w	r3, r3, #1
 8005d56:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	3308      	adds	r3, #8
 8005d5e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005d60:	623a      	str	r2, [r7, #32]
 8005d62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d64:	69f9      	ldr	r1, [r7, #28]
 8005d66:	6a3a      	ldr	r2, [r7, #32]
 8005d68:	e841 2300 	strex	r3, r2, [r1]
 8005d6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1e5      	bne.n	8005d40 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2220      	movs	r2, #32
 8005d78:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2220      	movs	r2, #32
 8005d7e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2220      	movs	r2, #32
 8005d84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005d90:	2303      	movs	r3, #3
 8005d92:	e010      	b.n	8005db6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	69da      	ldr	r2, [r3, #28]
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	68ba      	ldr	r2, [r7, #8]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	bf0c      	ite	eq
 8005da4:	2301      	moveq	r3, #1
 8005da6:	2300      	movne	r3, #0
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	461a      	mov	r2, r3
 8005dac:	79fb      	ldrb	r3, [r7, #7]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	f43f af4a 	beq.w	8005c48 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3770      	adds	r7, #112	; 0x70
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
	...

08005dc0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b097      	sub	sp, #92	; 0x5c
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	4613      	mov	r3, r2
 8005dcc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	68ba      	ldr	r2, [r7, #8]
 8005dd2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	88fa      	ldrh	r2, [r7, #6]
 8005dd8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	88fa      	ldrh	r2, [r7, #6]
 8005de0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2200      	movs	r2, #0
 8005de8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005df2:	d10e      	bne.n	8005e12 <UART_Start_Receive_IT+0x52>
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d105      	bne.n	8005e08 <UART_Start_Receive_IT+0x48>
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005e02:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e06:	e02d      	b.n	8005e64 <UART_Start_Receive_IT+0xa4>
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	22ff      	movs	r2, #255	; 0xff
 8005e0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e10:	e028      	b.n	8005e64 <UART_Start_Receive_IT+0xa4>
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d10d      	bne.n	8005e36 <UART_Start_Receive_IT+0x76>
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d104      	bne.n	8005e2c <UART_Start_Receive_IT+0x6c>
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	22ff      	movs	r2, #255	; 0xff
 8005e26:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e2a:	e01b      	b.n	8005e64 <UART_Start_Receive_IT+0xa4>
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	227f      	movs	r2, #127	; 0x7f
 8005e30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e34:	e016      	b.n	8005e64 <UART_Start_Receive_IT+0xa4>
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e3e:	d10d      	bne.n	8005e5c <UART_Start_Receive_IT+0x9c>
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d104      	bne.n	8005e52 <UART_Start_Receive_IT+0x92>
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	227f      	movs	r2, #127	; 0x7f
 8005e4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e50:	e008      	b.n	8005e64 <UART_Start_Receive_IT+0xa4>
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	223f      	movs	r2, #63	; 0x3f
 8005e56:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e5a:	e003      	b.n	8005e64 <UART_Start_Receive_IT+0xa4>
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2222      	movs	r2, #34	; 0x22
 8005e70:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	3308      	adds	r3, #8
 8005e78:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e7c:	e853 3f00 	ldrex	r3, [r3]
 8005e80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e84:	f043 0301 	orr.w	r3, r3, #1
 8005e88:	657b      	str	r3, [r7, #84]	; 0x54
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	3308      	adds	r3, #8
 8005e90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005e92:	64ba      	str	r2, [r7, #72]	; 0x48
 8005e94:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005e98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e9a:	e841 2300 	strex	r3, r2, [r1]
 8005e9e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005ea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d1e5      	bne.n	8005e72 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eae:	d107      	bne.n	8005ec0 <UART_Start_Receive_IT+0x100>
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d103      	bne.n	8005ec0 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	4a24      	ldr	r2, [pc, #144]	; (8005f4c <UART_Start_Receive_IT+0x18c>)
 8005ebc:	665a      	str	r2, [r3, #100]	; 0x64
 8005ebe:	e002      	b.n	8005ec6 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	4a23      	ldr	r2, [pc, #140]	; (8005f50 <UART_Start_Receive_IT+0x190>)
 8005ec4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d019      	beq.n	8005f0a <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ede:	e853 3f00 	ldrex	r3, [r3]
 8005ee2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005eea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ef4:	637b      	str	r3, [r7, #52]	; 0x34
 8005ef6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005efa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005efc:	e841 2300 	strex	r3, r2, [r1]
 8005f00:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d1e6      	bne.n	8005ed6 <UART_Start_Receive_IT+0x116>
 8005f08:	e018      	b.n	8005f3c <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	e853 3f00 	ldrex	r3, [r3]
 8005f16:	613b      	str	r3, [r7, #16]
   return(result);
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	f043 0320 	orr.w	r3, r3, #32
 8005f1e:	653b      	str	r3, [r7, #80]	; 0x50
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	461a      	mov	r2, r3
 8005f26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f28:	623b      	str	r3, [r7, #32]
 8005f2a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f2c:	69f9      	ldr	r1, [r7, #28]
 8005f2e:	6a3a      	ldr	r2, [r7, #32]
 8005f30:	e841 2300 	strex	r3, r2, [r1]
 8005f34:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d1e6      	bne.n	8005f0a <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	375c      	adds	r7, #92	; 0x5c
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr
 8005f4a:	bf00      	nop
 8005f4c:	080060b5 	.word	0x080060b5
 8005f50:	08005f55 	.word	0x08005f55

08005f54 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b096      	sub	sp, #88	; 0x58
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005f62:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f6a:	2b22      	cmp	r3, #34	; 0x22
 8005f6c:	f040 8094 	bne.w	8006098 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005f76:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005f7a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005f7e:	b2d9      	uxtb	r1, r3
 8005f80:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005f84:	b2da      	uxtb	r2, r3
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f8a:	400a      	ands	r2, r1
 8005f8c:	b2d2      	uxtb	r2, r2
 8005f8e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f94:	1c5a      	adds	r2, r3, #1
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	3b01      	subs	r3, #1
 8005fa4:	b29a      	uxth	r2, r3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d179      	bne.n	80060ac <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc0:	e853 3f00 	ldrex	r3, [r3]
 8005fc4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fc8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fcc:	653b      	str	r3, [r7, #80]	; 0x50
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fd6:	647b      	str	r3, [r7, #68]	; 0x44
 8005fd8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fda:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005fdc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fde:	e841 2300 	strex	r3, r2, [r1]
 8005fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005fe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d1e6      	bne.n	8005fb8 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	3308      	adds	r3, #8
 8005ff0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff4:	e853 3f00 	ldrex	r3, [r3]
 8005ff8:	623b      	str	r3, [r7, #32]
   return(result);
 8005ffa:	6a3b      	ldr	r3, [r7, #32]
 8005ffc:	f023 0301 	bic.w	r3, r3, #1
 8006000:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	3308      	adds	r3, #8
 8006008:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800600a:	633a      	str	r2, [r7, #48]	; 0x30
 800600c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006010:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006012:	e841 2300 	strex	r3, r2, [r1]
 8006016:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601a:	2b00      	cmp	r3, #0
 800601c:	d1e5      	bne.n	8005fea <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2220      	movs	r2, #32
 8006022:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800602e:	2b01      	cmp	r3, #1
 8006030:	d12e      	bne.n	8006090 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	e853 3f00 	ldrex	r3, [r3]
 8006044:	60fb      	str	r3, [r7, #12]
   return(result);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f023 0310 	bic.w	r3, r3, #16
 800604c:	64bb      	str	r3, [r7, #72]	; 0x48
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	461a      	mov	r2, r3
 8006054:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006056:	61fb      	str	r3, [r7, #28]
 8006058:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800605a:	69b9      	ldr	r1, [r7, #24]
 800605c:	69fa      	ldr	r2, [r7, #28]
 800605e:	e841 2300 	strex	r3, r2, [r1]
 8006062:	617b      	str	r3, [r7, #20]
   return(result);
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d1e6      	bne.n	8006038 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	69db      	ldr	r3, [r3, #28]
 8006070:	f003 0310 	and.w	r3, r3, #16
 8006074:	2b10      	cmp	r3, #16
 8006076:	d103      	bne.n	8006080 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2210      	movs	r2, #16
 800607e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006086:	4619      	mov	r1, r3
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f7ff fa83 	bl	8005594 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800608e:	e00d      	b.n	80060ac <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f7fa feab 	bl	8000dec <HAL_UART_RxCpltCallback>
}
 8006096:	e009      	b.n	80060ac <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	8b1b      	ldrh	r3, [r3, #24]
 800609e:	b29a      	uxth	r2, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f042 0208 	orr.w	r2, r2, #8
 80060a8:	b292      	uxth	r2, r2
 80060aa:	831a      	strh	r2, [r3, #24]
}
 80060ac:	bf00      	nop
 80060ae:	3758      	adds	r7, #88	; 0x58
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b096      	sub	sp, #88	; 0x58
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80060c2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060ca:	2b22      	cmp	r3, #34	; 0x22
 80060cc:	f040 8094 	bne.w	80061f8 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80060d6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060de:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80060e0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80060e4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80060e8:	4013      	ands	r3, r2
 80060ea:	b29a      	uxth	r2, r3
 80060ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060ee:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060f4:	1c9a      	adds	r2, r3, #2
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006100:	b29b      	uxth	r3, r3
 8006102:	3b01      	subs	r3, #1
 8006104:	b29a      	uxth	r2, r3
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006112:	b29b      	uxth	r3, r3
 8006114:	2b00      	cmp	r3, #0
 8006116:	d179      	bne.n	800620c <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006120:	e853 3f00 	ldrex	r3, [r3]
 8006124:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006128:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800612c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	461a      	mov	r2, r3
 8006134:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006136:	643b      	str	r3, [r7, #64]	; 0x40
 8006138:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800613c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800613e:	e841 2300 	strex	r3, r2, [r1]
 8006142:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006146:	2b00      	cmp	r3, #0
 8006148:	d1e6      	bne.n	8006118 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	3308      	adds	r3, #8
 8006150:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006152:	6a3b      	ldr	r3, [r7, #32]
 8006154:	e853 3f00 	ldrex	r3, [r3]
 8006158:	61fb      	str	r3, [r7, #28]
   return(result);
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	f023 0301 	bic.w	r3, r3, #1
 8006160:	64bb      	str	r3, [r7, #72]	; 0x48
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	3308      	adds	r3, #8
 8006168:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800616a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800616c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006170:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006172:	e841 2300 	strex	r3, r2, [r1]
 8006176:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617a:	2b00      	cmp	r3, #0
 800617c:	d1e5      	bne.n	800614a <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2220      	movs	r2, #32
 8006182:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800618e:	2b01      	cmp	r3, #1
 8006190:	d12e      	bne.n	80061f0 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	e853 3f00 	ldrex	r3, [r3]
 80061a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	f023 0310 	bic.w	r3, r3, #16
 80061ac:	647b      	str	r3, [r7, #68]	; 0x44
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	461a      	mov	r2, r3
 80061b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061b6:	61bb      	str	r3, [r7, #24]
 80061b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ba:	6979      	ldr	r1, [r7, #20]
 80061bc:	69ba      	ldr	r2, [r7, #24]
 80061be:	e841 2300 	strex	r3, r2, [r1]
 80061c2:	613b      	str	r3, [r7, #16]
   return(result);
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1e6      	bne.n	8006198 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	69db      	ldr	r3, [r3, #28]
 80061d0:	f003 0310 	and.w	r3, r3, #16
 80061d4:	2b10      	cmp	r3, #16
 80061d6:	d103      	bne.n	80061e0 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2210      	movs	r2, #16
 80061de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80061e6:	4619      	mov	r1, r3
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f7ff f9d3 	bl	8005594 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80061ee:	e00d      	b.n	800620c <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f7fa fdfb 	bl	8000dec <HAL_UART_RxCpltCallback>
}
 80061f6:	e009      	b.n	800620c <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	8b1b      	ldrh	r3, [r3, #24]
 80061fe:	b29a      	uxth	r2, r3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f042 0208 	orr.w	r2, r2, #8
 8006208:	b292      	uxth	r2, r2
 800620a:	831a      	strh	r2, [r3, #24]
}
 800620c:	bf00      	nop
 800620e:	3758      	adds	r7, #88	; 0x58
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b086      	sub	sp, #24
 8006218:	af00      	add	r7, sp, #0
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	607a      	str	r2, [r7, #4]
 8006220:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d101      	bne.n	800622c <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	e056      	b.n	80062da <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006230:	2b00      	cmp	r3, #0
 8006232:	d106      	bne.n	8006242 <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2200      	movs	r2, #0
 8006238:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f7fb fd35 	bl	8001cac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2224      	movs	r2, #36	; 0x24
 8006246:	679a      	str	r2, [r3, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f022 0201 	bic.w	r2, r2, #1
 8006256:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006258:	68f8      	ldr	r0, [r7, #12]
 800625a:	f7ff f9a7 	bl	80055ac <UART_SetConfig>
 800625e:	4603      	mov	r3, r0
 8006260:	2b01      	cmp	r3, #1
 8006262:	d101      	bne.n	8006268 <HAL_RS485Ex_Init+0x54>
  {
    return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	e038      	b.n	80062da <HAL_RS485Ex_Init+0xc6>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626c:	2b00      	cmp	r3, #0
 800626e:	d002      	beq.n	8006276 <HAL_RS485Ex_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006270:	68f8      	ldr	r0, [r7, #12]
 8006272:	f7ff fbf5 	bl	8005a60 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	689a      	ldr	r2, [r3, #8]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006284:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	68ba      	ldr	r2, [r7, #8]
 8006296:	430a      	orrs	r2, r1
 8006298:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	055b      	lsls	r3, r3, #21
 800629e:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	041b      	lsls	r3, r3, #16
 80062a4:	697a      	ldr	r2, [r7, #20]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 80062b4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	6812      	ldr	r2, [r2, #0]
 80062bc:	6979      	ldr	r1, [r7, #20]
 80062be:	430b      	orrs	r3, r1
 80062c0:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f042 0201 	orr.w	r2, r2, #1
 80062d0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80062d2:	68f8      	ldr	r0, [r7, #12]
 80062d4:	f7ff fc66 	bl	8005ba4 <UART_CheckIdleState>
 80062d8:	4603      	mov	r3, r0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3718      	adds	r7, #24
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}

080062e2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80062e2:	b580      	push	{r7, lr}
 80062e4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80062e6:	f001 f899 	bl	800741c <vTaskStartScheduler>
  
  return osOK;
 80062ea:	2300      	movs	r3, #0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d001      	beq.n	8006306 <osDelay+0x16>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	e000      	b.n	8006308 <osDelay+0x18>
 8006306:	2301      	movs	r3, #1
 8006308:	4618      	mov	r0, r3
 800630a:	f001 f853 	bl	80073b4 <vTaskDelay>
  
  return osOK;
 800630e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006310:	4618      	mov	r0, r3
 8006312:	3710      	adds	r7, #16
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f103 0208 	add.w	r2, r3, #8
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f04f 32ff 	mov.w	r2, #4294967295
 8006330:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f103 0208 	add.w	r2, r3, #8
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f103 0208 	add.w	r2, r3, #8
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800634c:	bf00      	nop
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006366:	bf00      	nop
 8006368:	370c      	adds	r7, #12
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr

08006372 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006372:	b480      	push	{r7}
 8006374:	b085      	sub	sp, #20
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
 800637a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	68fa      	ldr	r2, [r7, #12]
 8006386:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	689a      	ldr	r2, [r3, #8]
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	683a      	ldr	r2, [r7, #0]
 8006396:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	683a      	ldr	r2, [r7, #0]
 800639c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	1c5a      	adds	r2, r3, #1
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	601a      	str	r2, [r3, #0]
}
 80063ae:	bf00      	nop
 80063b0:	3714      	adds	r7, #20
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr

080063ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80063ba:	b480      	push	{r7}
 80063bc:	b085      	sub	sp, #20
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
 80063c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d0:	d103      	bne.n	80063da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	60fb      	str	r3, [r7, #12]
 80063d8:	e00c      	b.n	80063f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	3308      	adds	r3, #8
 80063de:	60fb      	str	r3, [r7, #12]
 80063e0:	e002      	b.n	80063e8 <vListInsert+0x2e>
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	60fb      	str	r3, [r7, #12]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68ba      	ldr	r2, [r7, #8]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d2f6      	bcs.n	80063e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	685a      	ldr	r2, [r3, #4]
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	683a      	ldr	r2, [r7, #0]
 8006402:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	683a      	ldr	r2, [r7, #0]
 800640e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	1c5a      	adds	r2, r3, #1
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	601a      	str	r2, [r3, #0]
}
 8006420:	bf00      	nop
 8006422:	3714      	adds	r7, #20
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800642c:	b480      	push	{r7}
 800642e:	b085      	sub	sp, #20
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	691b      	ldr	r3, [r3, #16]
 8006438:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	6892      	ldr	r2, [r2, #8]
 8006442:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	6852      	ldr	r2, [r2, #4]
 800644c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	429a      	cmp	r2, r3
 8006456:	d103      	bne.n	8006460 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	689a      	ldr	r2, [r3, #8]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	1e5a      	subs	r2, r3, #1
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
}
 8006474:	4618      	mov	r0, r3
 8006476:	3714      	adds	r7, #20
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d10a      	bne.n	80064aa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006498:	f383 8811 	msr	BASEPRI, r3
 800649c:	f3bf 8f6f 	isb	sy
 80064a0:	f3bf 8f4f 	dsb	sy
 80064a4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80064a6:	bf00      	nop
 80064a8:	e7fe      	b.n	80064a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80064aa:	f001 ff2b 	bl	8008304 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064b6:	68f9      	ldr	r1, [r7, #12]
 80064b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80064ba:	fb01 f303 	mul.w	r3, r1, r3
 80064be:	441a      	add	r2, r3
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2200      	movs	r2, #0
 80064c8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064da:	3b01      	subs	r3, #1
 80064dc:	68f9      	ldr	r1, [r7, #12]
 80064de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80064e0:	fb01 f303 	mul.w	r3, r1, r3
 80064e4:	441a      	add	r2, r3
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	22ff      	movs	r2, #255	; 0xff
 80064ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	22ff      	movs	r2, #255	; 0xff
 80064f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d114      	bne.n	800652a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	691b      	ldr	r3, [r3, #16]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d01a      	beq.n	800653e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	3310      	adds	r3, #16
 800650c:	4618      	mov	r0, r3
 800650e:	f001 f9e7 	bl	80078e0 <xTaskRemoveFromEventList>
 8006512:	4603      	mov	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d012      	beq.n	800653e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006518:	4b0c      	ldr	r3, [pc, #48]	; (800654c <xQueueGenericReset+0xcc>)
 800651a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800651e:	601a      	str	r2, [r3, #0]
 8006520:	f3bf 8f4f 	dsb	sy
 8006524:	f3bf 8f6f 	isb	sy
 8006528:	e009      	b.n	800653e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	3310      	adds	r3, #16
 800652e:	4618      	mov	r0, r3
 8006530:	f7ff fef2 	bl	8006318 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	3324      	adds	r3, #36	; 0x24
 8006538:	4618      	mov	r0, r3
 800653a:	f7ff feed 	bl	8006318 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800653e:	f001 ff11 	bl	8008364 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006542:	2301      	movs	r3, #1
}
 8006544:	4618      	mov	r0, r3
 8006546:	3710      	adds	r7, #16
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}
 800654c:	e000ed04 	.word	0xe000ed04

08006550 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006550:	b580      	push	{r7, lr}
 8006552:	b08a      	sub	sp, #40	; 0x28
 8006554:	af02      	add	r7, sp, #8
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	4613      	mov	r3, r2
 800655c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d10a      	bne.n	800657a <xQueueGenericCreate+0x2a>
	__asm volatile
 8006564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006568:	f383 8811 	msr	BASEPRI, r3
 800656c:	f3bf 8f6f 	isb	sy
 8006570:	f3bf 8f4f 	dsb	sy
 8006574:	613b      	str	r3, [r7, #16]
}
 8006576:	bf00      	nop
 8006578:	e7fe      	b.n	8006578 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	68ba      	ldr	r2, [r7, #8]
 800657e:	fb02 f303 	mul.w	r3, r2, r3
 8006582:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	3348      	adds	r3, #72	; 0x48
 8006588:	4618      	mov	r0, r3
 800658a:	f001 ffdd 	bl	8008548 <pvPortMalloc>
 800658e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d011      	beq.n	80065ba <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006596:	69bb      	ldr	r3, [r7, #24]
 8006598:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	3348      	adds	r3, #72	; 0x48
 800659e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80065a8:	79fa      	ldrb	r2, [r7, #7]
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	9300      	str	r3, [sp, #0]
 80065ae:	4613      	mov	r3, r2
 80065b0:	697a      	ldr	r2, [r7, #20]
 80065b2:	68b9      	ldr	r1, [r7, #8]
 80065b4:	68f8      	ldr	r0, [r7, #12]
 80065b6:	f000 f805 	bl	80065c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80065ba:	69bb      	ldr	r3, [r7, #24]
	}
 80065bc:	4618      	mov	r0, r3
 80065be:	3720      	adds	r7, #32
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	607a      	str	r2, [r7, #4]
 80065d0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d103      	bne.n	80065e0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80065d8:	69bb      	ldr	r3, [r7, #24]
 80065da:	69ba      	ldr	r2, [r7, #24]
 80065dc:	601a      	str	r2, [r3, #0]
 80065de:	e002      	b.n	80065e6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	68fa      	ldr	r2, [r7, #12]
 80065ea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80065ec:	69bb      	ldr	r3, [r7, #24]
 80065ee:	68ba      	ldr	r2, [r7, #8]
 80065f0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80065f2:	2101      	movs	r1, #1
 80065f4:	69b8      	ldr	r0, [r7, #24]
 80065f6:	f7ff ff43 	bl	8006480 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80065fa:	bf00      	nop
 80065fc:	3710      	adds	r7, #16
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}

08006602 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006602:	b580      	push	{r7, lr}
 8006604:	b082      	sub	sp, #8
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d00e      	beq.n	800662e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006622:	2300      	movs	r3, #0
 8006624:	2200      	movs	r2, #0
 8006626:	2100      	movs	r1, #0
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f000 f81d 	bl	8006668 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800662e:	bf00      	nop
 8006630:	3708      	adds	r7, #8
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}

08006636 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006636:	b580      	push	{r7, lr}
 8006638:	b086      	sub	sp, #24
 800663a:	af00      	add	r7, sp, #0
 800663c:	4603      	mov	r3, r0
 800663e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006640:	2301      	movs	r3, #1
 8006642:	617b      	str	r3, [r7, #20]
 8006644:	2300      	movs	r3, #0
 8006646:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006648:	79fb      	ldrb	r3, [r7, #7]
 800664a:	461a      	mov	r2, r3
 800664c:	6939      	ldr	r1, [r7, #16]
 800664e:	6978      	ldr	r0, [r7, #20]
 8006650:	f7ff ff7e 	bl	8006550 <xQueueGenericCreate>
 8006654:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006656:	68f8      	ldr	r0, [r7, #12]
 8006658:	f7ff ffd3 	bl	8006602 <prvInitialiseMutex>

		return xNewQueue;
 800665c:	68fb      	ldr	r3, [r7, #12]
	}
 800665e:	4618      	mov	r0, r3
 8006660:	3718      	adds	r7, #24
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
	...

08006668 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b08e      	sub	sp, #56	; 0x38
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	607a      	str	r2, [r7, #4]
 8006674:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006676:	2300      	movs	r3, #0
 8006678:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800667e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006680:	2b00      	cmp	r3, #0
 8006682:	d10a      	bne.n	800669a <xQueueGenericSend+0x32>
	__asm volatile
 8006684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006688:	f383 8811 	msr	BASEPRI, r3
 800668c:	f3bf 8f6f 	isb	sy
 8006690:	f3bf 8f4f 	dsb	sy
 8006694:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006696:	bf00      	nop
 8006698:	e7fe      	b.n	8006698 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d103      	bne.n	80066a8 <xQueueGenericSend+0x40>
 80066a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d101      	bne.n	80066ac <xQueueGenericSend+0x44>
 80066a8:	2301      	movs	r3, #1
 80066aa:	e000      	b.n	80066ae <xQueueGenericSend+0x46>
 80066ac:	2300      	movs	r3, #0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d10a      	bne.n	80066c8 <xQueueGenericSend+0x60>
	__asm volatile
 80066b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b6:	f383 8811 	msr	BASEPRI, r3
 80066ba:	f3bf 8f6f 	isb	sy
 80066be:	f3bf 8f4f 	dsb	sy
 80066c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80066c4:	bf00      	nop
 80066c6:	e7fe      	b.n	80066c6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	2b02      	cmp	r3, #2
 80066cc:	d103      	bne.n	80066d6 <xQueueGenericSend+0x6e>
 80066ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d101      	bne.n	80066da <xQueueGenericSend+0x72>
 80066d6:	2301      	movs	r3, #1
 80066d8:	e000      	b.n	80066dc <xQueueGenericSend+0x74>
 80066da:	2300      	movs	r3, #0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d10a      	bne.n	80066f6 <xQueueGenericSend+0x8e>
	__asm volatile
 80066e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e4:	f383 8811 	msr	BASEPRI, r3
 80066e8:	f3bf 8f6f 	isb	sy
 80066ec:	f3bf 8f4f 	dsb	sy
 80066f0:	623b      	str	r3, [r7, #32]
}
 80066f2:	bf00      	nop
 80066f4:	e7fe      	b.n	80066f4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80066f6:	f001 fab3 	bl	8007c60 <xTaskGetSchedulerState>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d102      	bne.n	8006706 <xQueueGenericSend+0x9e>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d101      	bne.n	800670a <xQueueGenericSend+0xa2>
 8006706:	2301      	movs	r3, #1
 8006708:	e000      	b.n	800670c <xQueueGenericSend+0xa4>
 800670a:	2300      	movs	r3, #0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d10a      	bne.n	8006726 <xQueueGenericSend+0xbe>
	__asm volatile
 8006710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006714:	f383 8811 	msr	BASEPRI, r3
 8006718:	f3bf 8f6f 	isb	sy
 800671c:	f3bf 8f4f 	dsb	sy
 8006720:	61fb      	str	r3, [r7, #28]
}
 8006722:	bf00      	nop
 8006724:	e7fe      	b.n	8006724 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006726:	f001 fded 	bl	8008304 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800672a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800672c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800672e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006732:	429a      	cmp	r2, r3
 8006734:	d302      	bcc.n	800673c <xQueueGenericSend+0xd4>
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	2b02      	cmp	r3, #2
 800673a:	d129      	bne.n	8006790 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800673c:	683a      	ldr	r2, [r7, #0]
 800673e:	68b9      	ldr	r1, [r7, #8]
 8006740:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006742:	f000 fb52 	bl	8006dea <prvCopyDataToQueue>
 8006746:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800674a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674c:	2b00      	cmp	r3, #0
 800674e:	d010      	beq.n	8006772 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006752:	3324      	adds	r3, #36	; 0x24
 8006754:	4618      	mov	r0, r3
 8006756:	f001 f8c3 	bl	80078e0 <xTaskRemoveFromEventList>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d013      	beq.n	8006788 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006760:	4b3f      	ldr	r3, [pc, #252]	; (8006860 <xQueueGenericSend+0x1f8>)
 8006762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006766:	601a      	str	r2, [r3, #0]
 8006768:	f3bf 8f4f 	dsb	sy
 800676c:	f3bf 8f6f 	isb	sy
 8006770:	e00a      	b.n	8006788 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006774:	2b00      	cmp	r3, #0
 8006776:	d007      	beq.n	8006788 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006778:	4b39      	ldr	r3, [pc, #228]	; (8006860 <xQueueGenericSend+0x1f8>)
 800677a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800677e:	601a      	str	r2, [r3, #0]
 8006780:	f3bf 8f4f 	dsb	sy
 8006784:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006788:	f001 fdec 	bl	8008364 <vPortExitCritical>
				return pdPASS;
 800678c:	2301      	movs	r3, #1
 800678e:	e063      	b.n	8006858 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d103      	bne.n	800679e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006796:	f001 fde5 	bl	8008364 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800679a:	2300      	movs	r3, #0
 800679c:	e05c      	b.n	8006858 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800679e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d106      	bne.n	80067b2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80067a4:	f107 0314 	add.w	r3, r7, #20
 80067a8:	4618      	mov	r0, r3
 80067aa:	f001 f8fb 	bl	80079a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80067ae:	2301      	movs	r3, #1
 80067b0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80067b2:	f001 fdd7 	bl	8008364 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80067b6:	f000 fe9b 	bl	80074f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80067ba:	f001 fda3 	bl	8008304 <vPortEnterCritical>
 80067be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067c4:	b25b      	sxtb	r3, r3
 80067c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ca:	d103      	bne.n	80067d4 <xQueueGenericSend+0x16c>
 80067cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ce:	2200      	movs	r2, #0
 80067d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067da:	b25b      	sxtb	r3, r3
 80067dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067e0:	d103      	bne.n	80067ea <xQueueGenericSend+0x182>
 80067e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e4:	2200      	movs	r2, #0
 80067e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067ea:	f001 fdbb 	bl	8008364 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80067ee:	1d3a      	adds	r2, r7, #4
 80067f0:	f107 0314 	add.w	r3, r7, #20
 80067f4:	4611      	mov	r1, r2
 80067f6:	4618      	mov	r0, r3
 80067f8:	f001 f8ea 	bl	80079d0 <xTaskCheckForTimeOut>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d124      	bne.n	800684c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006802:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006804:	f000 fbe9 	bl	8006fda <prvIsQueueFull>
 8006808:	4603      	mov	r3, r0
 800680a:	2b00      	cmp	r3, #0
 800680c:	d018      	beq.n	8006840 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800680e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006810:	3310      	adds	r3, #16
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	4611      	mov	r1, r2
 8006816:	4618      	mov	r0, r3
 8006818:	f001 f83e 	bl	8007898 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800681c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800681e:	f000 fb74 	bl	8006f0a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006822:	f000 fe73 	bl	800750c <xTaskResumeAll>
 8006826:	4603      	mov	r3, r0
 8006828:	2b00      	cmp	r3, #0
 800682a:	f47f af7c 	bne.w	8006726 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800682e:	4b0c      	ldr	r3, [pc, #48]	; (8006860 <xQueueGenericSend+0x1f8>)
 8006830:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006834:	601a      	str	r2, [r3, #0]
 8006836:	f3bf 8f4f 	dsb	sy
 800683a:	f3bf 8f6f 	isb	sy
 800683e:	e772      	b.n	8006726 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006840:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006842:	f000 fb62 	bl	8006f0a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006846:	f000 fe61 	bl	800750c <xTaskResumeAll>
 800684a:	e76c      	b.n	8006726 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800684c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800684e:	f000 fb5c 	bl	8006f0a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006852:	f000 fe5b 	bl	800750c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006856:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006858:	4618      	mov	r0, r3
 800685a:	3738      	adds	r7, #56	; 0x38
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}
 8006860:	e000ed04 	.word	0xe000ed04

08006864 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b090      	sub	sp, #64	; 0x40
 8006868:	af00      	add	r7, sp, #0
 800686a:	60f8      	str	r0, [r7, #12]
 800686c:	60b9      	str	r1, [r7, #8]
 800686e:	607a      	str	r2, [r7, #4]
 8006870:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006878:	2b00      	cmp	r3, #0
 800687a:	d10a      	bne.n	8006892 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800687c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006880:	f383 8811 	msr	BASEPRI, r3
 8006884:	f3bf 8f6f 	isb	sy
 8006888:	f3bf 8f4f 	dsb	sy
 800688c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800688e:	bf00      	nop
 8006890:	e7fe      	b.n	8006890 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d103      	bne.n	80068a0 <xQueueGenericSendFromISR+0x3c>
 8006898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800689a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800689c:	2b00      	cmp	r3, #0
 800689e:	d101      	bne.n	80068a4 <xQueueGenericSendFromISR+0x40>
 80068a0:	2301      	movs	r3, #1
 80068a2:	e000      	b.n	80068a6 <xQueueGenericSendFromISR+0x42>
 80068a4:	2300      	movs	r3, #0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d10a      	bne.n	80068c0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80068aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ae:	f383 8811 	msr	BASEPRI, r3
 80068b2:	f3bf 8f6f 	isb	sy
 80068b6:	f3bf 8f4f 	dsb	sy
 80068ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 80068bc:	bf00      	nop
 80068be:	e7fe      	b.n	80068be <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	2b02      	cmp	r3, #2
 80068c4:	d103      	bne.n	80068ce <xQueueGenericSendFromISR+0x6a>
 80068c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d101      	bne.n	80068d2 <xQueueGenericSendFromISR+0x6e>
 80068ce:	2301      	movs	r3, #1
 80068d0:	e000      	b.n	80068d4 <xQueueGenericSendFromISR+0x70>
 80068d2:	2300      	movs	r3, #0
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d10a      	bne.n	80068ee <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80068d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068dc:	f383 8811 	msr	BASEPRI, r3
 80068e0:	f3bf 8f6f 	isb	sy
 80068e4:	f3bf 8f4f 	dsb	sy
 80068e8:	623b      	str	r3, [r7, #32]
}
 80068ea:	bf00      	nop
 80068ec:	e7fe      	b.n	80068ec <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80068ee:	f001 fdeb 	bl	80084c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80068f2:	f3ef 8211 	mrs	r2, BASEPRI
 80068f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068fa:	f383 8811 	msr	BASEPRI, r3
 80068fe:	f3bf 8f6f 	isb	sy
 8006902:	f3bf 8f4f 	dsb	sy
 8006906:	61fa      	str	r2, [r7, #28]
 8006908:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800690a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800690c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800690e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006910:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006916:	429a      	cmp	r2, r3
 8006918:	d302      	bcc.n	8006920 <xQueueGenericSendFromISR+0xbc>
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	2b02      	cmp	r3, #2
 800691e:	d12f      	bne.n	8006980 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006922:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800692a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800692c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800692e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006930:	683a      	ldr	r2, [r7, #0]
 8006932:	68b9      	ldr	r1, [r7, #8]
 8006934:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006936:	f000 fa58 	bl	8006dea <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800693a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800693e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006942:	d112      	bne.n	800696a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006948:	2b00      	cmp	r3, #0
 800694a:	d016      	beq.n	800697a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800694c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800694e:	3324      	adds	r3, #36	; 0x24
 8006950:	4618      	mov	r0, r3
 8006952:	f000 ffc5 	bl	80078e0 <xTaskRemoveFromEventList>
 8006956:	4603      	mov	r3, r0
 8006958:	2b00      	cmp	r3, #0
 800695a:	d00e      	beq.n	800697a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d00b      	beq.n	800697a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2201      	movs	r2, #1
 8006966:	601a      	str	r2, [r3, #0]
 8006968:	e007      	b.n	800697a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800696a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800696e:	3301      	adds	r3, #1
 8006970:	b2db      	uxtb	r3, r3
 8006972:	b25a      	sxtb	r2, r3
 8006974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006976:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800697a:	2301      	movs	r3, #1
 800697c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800697e:	e001      	b.n	8006984 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006980:	2300      	movs	r3, #0
 8006982:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006986:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800698e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006992:	4618      	mov	r0, r3
 8006994:	3740      	adds	r7, #64	; 0x40
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
	...

0800699c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b08c      	sub	sp, #48	; 0x30
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80069a8:	2300      	movs	r3, #0
 80069aa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80069b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d10a      	bne.n	80069cc <xQueueReceive+0x30>
	__asm volatile
 80069b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ba:	f383 8811 	msr	BASEPRI, r3
 80069be:	f3bf 8f6f 	isb	sy
 80069c2:	f3bf 8f4f 	dsb	sy
 80069c6:	623b      	str	r3, [r7, #32]
}
 80069c8:	bf00      	nop
 80069ca:	e7fe      	b.n	80069ca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d103      	bne.n	80069da <xQueueReceive+0x3e>
 80069d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d101      	bne.n	80069de <xQueueReceive+0x42>
 80069da:	2301      	movs	r3, #1
 80069dc:	e000      	b.n	80069e0 <xQueueReceive+0x44>
 80069de:	2300      	movs	r3, #0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d10a      	bne.n	80069fa <xQueueReceive+0x5e>
	__asm volatile
 80069e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e8:	f383 8811 	msr	BASEPRI, r3
 80069ec:	f3bf 8f6f 	isb	sy
 80069f0:	f3bf 8f4f 	dsb	sy
 80069f4:	61fb      	str	r3, [r7, #28]
}
 80069f6:	bf00      	nop
 80069f8:	e7fe      	b.n	80069f8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80069fa:	f001 f931 	bl	8007c60 <xTaskGetSchedulerState>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d102      	bne.n	8006a0a <xQueueReceive+0x6e>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d101      	bne.n	8006a0e <xQueueReceive+0x72>
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e000      	b.n	8006a10 <xQueueReceive+0x74>
 8006a0e:	2300      	movs	r3, #0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d10a      	bne.n	8006a2a <xQueueReceive+0x8e>
	__asm volatile
 8006a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a18:	f383 8811 	msr	BASEPRI, r3
 8006a1c:	f3bf 8f6f 	isb	sy
 8006a20:	f3bf 8f4f 	dsb	sy
 8006a24:	61bb      	str	r3, [r7, #24]
}
 8006a26:	bf00      	nop
 8006a28:	e7fe      	b.n	8006a28 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a2a:	f001 fc6b 	bl	8008304 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a32:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d01f      	beq.n	8006a7a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006a3a:	68b9      	ldr	r1, [r7, #8]
 8006a3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a3e:	f000 fa3e 	bl	8006ebe <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a44:	1e5a      	subs	r2, r3, #1
 8006a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a48:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a4c:	691b      	ldr	r3, [r3, #16]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d00f      	beq.n	8006a72 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a54:	3310      	adds	r3, #16
 8006a56:	4618      	mov	r0, r3
 8006a58:	f000 ff42 	bl	80078e0 <xTaskRemoveFromEventList>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d007      	beq.n	8006a72 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006a62:	4b3d      	ldr	r3, [pc, #244]	; (8006b58 <xQueueReceive+0x1bc>)
 8006a64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a68:	601a      	str	r2, [r3, #0]
 8006a6a:	f3bf 8f4f 	dsb	sy
 8006a6e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006a72:	f001 fc77 	bl	8008364 <vPortExitCritical>
				return pdPASS;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e069      	b.n	8006b4e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d103      	bne.n	8006a88 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a80:	f001 fc70 	bl	8008364 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006a84:	2300      	movs	r3, #0
 8006a86:	e062      	b.n	8006b4e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d106      	bne.n	8006a9c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a8e:	f107 0310 	add.w	r3, r7, #16
 8006a92:	4618      	mov	r0, r3
 8006a94:	f000 ff86 	bl	80079a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a9c:	f001 fc62 	bl	8008364 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006aa0:	f000 fd26 	bl	80074f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006aa4:	f001 fc2e 	bl	8008304 <vPortEnterCritical>
 8006aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aaa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006aae:	b25b      	sxtb	r3, r3
 8006ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ab4:	d103      	bne.n	8006abe <xQueueReceive+0x122>
 8006ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ac4:	b25b      	sxtb	r3, r3
 8006ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aca:	d103      	bne.n	8006ad4 <xQueueReceive+0x138>
 8006acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ad4:	f001 fc46 	bl	8008364 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ad8:	1d3a      	adds	r2, r7, #4
 8006ada:	f107 0310 	add.w	r3, r7, #16
 8006ade:	4611      	mov	r1, r2
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f000 ff75 	bl	80079d0 <xTaskCheckForTimeOut>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d123      	bne.n	8006b34 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006aec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006aee:	f000 fa5e 	bl	8006fae <prvIsQueueEmpty>
 8006af2:	4603      	mov	r3, r0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d017      	beq.n	8006b28 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006afa:	3324      	adds	r3, #36	; 0x24
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	4611      	mov	r1, r2
 8006b00:	4618      	mov	r0, r3
 8006b02:	f000 fec9 	bl	8007898 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006b06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b08:	f000 f9ff 	bl	8006f0a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006b0c:	f000 fcfe 	bl	800750c <xTaskResumeAll>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d189      	bne.n	8006a2a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006b16:	4b10      	ldr	r3, [pc, #64]	; (8006b58 <xQueueReceive+0x1bc>)
 8006b18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b1c:	601a      	str	r2, [r3, #0]
 8006b1e:	f3bf 8f4f 	dsb	sy
 8006b22:	f3bf 8f6f 	isb	sy
 8006b26:	e780      	b.n	8006a2a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006b28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b2a:	f000 f9ee 	bl	8006f0a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b2e:	f000 fced 	bl	800750c <xTaskResumeAll>
 8006b32:	e77a      	b.n	8006a2a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006b34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b36:	f000 f9e8 	bl	8006f0a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b3a:	f000 fce7 	bl	800750c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b40:	f000 fa35 	bl	8006fae <prvIsQueueEmpty>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	f43f af6f 	beq.w	8006a2a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006b4c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3730      	adds	r7, #48	; 0x30
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	e000ed04 	.word	0xe000ed04

08006b5c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b08e      	sub	sp, #56	; 0x38
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006b66:	2300      	movs	r3, #0
 8006b68:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d10a      	bne.n	8006b8e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b7c:	f383 8811 	msr	BASEPRI, r3
 8006b80:	f3bf 8f6f 	isb	sy
 8006b84:	f3bf 8f4f 	dsb	sy
 8006b88:	623b      	str	r3, [r7, #32]
}
 8006b8a:	bf00      	nop
 8006b8c:	e7fe      	b.n	8006b8c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00a      	beq.n	8006bac <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9a:	f383 8811 	msr	BASEPRI, r3
 8006b9e:	f3bf 8f6f 	isb	sy
 8006ba2:	f3bf 8f4f 	dsb	sy
 8006ba6:	61fb      	str	r3, [r7, #28]
}
 8006ba8:	bf00      	nop
 8006baa:	e7fe      	b.n	8006baa <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006bac:	f001 f858 	bl	8007c60 <xTaskGetSchedulerState>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d102      	bne.n	8006bbc <xQueueSemaphoreTake+0x60>
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d101      	bne.n	8006bc0 <xQueueSemaphoreTake+0x64>
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e000      	b.n	8006bc2 <xQueueSemaphoreTake+0x66>
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d10a      	bne.n	8006bdc <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bca:	f383 8811 	msr	BASEPRI, r3
 8006bce:	f3bf 8f6f 	isb	sy
 8006bd2:	f3bf 8f4f 	dsb	sy
 8006bd6:	61bb      	str	r3, [r7, #24]
}
 8006bd8:	bf00      	nop
 8006bda:	e7fe      	b.n	8006bda <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006bdc:	f001 fb92 	bl	8008304 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d024      	beq.n	8006c36 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bee:	1e5a      	subs	r2, r3, #1
 8006bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d104      	bne.n	8006c06 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006bfc:	f001 f9d8 	bl	8007fb0 <pvTaskIncrementMutexHeldCount>
 8006c00:	4602      	mov	r2, r0
 8006c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c04:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c08:	691b      	ldr	r3, [r3, #16]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d00f      	beq.n	8006c2e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c10:	3310      	adds	r3, #16
 8006c12:	4618      	mov	r0, r3
 8006c14:	f000 fe64 	bl	80078e0 <xTaskRemoveFromEventList>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d007      	beq.n	8006c2e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006c1e:	4b54      	ldr	r3, [pc, #336]	; (8006d70 <xQueueSemaphoreTake+0x214>)
 8006c20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c24:	601a      	str	r2, [r3, #0]
 8006c26:	f3bf 8f4f 	dsb	sy
 8006c2a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006c2e:	f001 fb99 	bl	8008364 <vPortExitCritical>
				return pdPASS;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e097      	b.n	8006d66 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d111      	bne.n	8006c60 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d00a      	beq.n	8006c58 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c46:	f383 8811 	msr	BASEPRI, r3
 8006c4a:	f3bf 8f6f 	isb	sy
 8006c4e:	f3bf 8f4f 	dsb	sy
 8006c52:	617b      	str	r3, [r7, #20]
}
 8006c54:	bf00      	nop
 8006c56:	e7fe      	b.n	8006c56 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006c58:	f001 fb84 	bl	8008364 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	e082      	b.n	8006d66 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d106      	bne.n	8006c74 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c66:	f107 030c 	add.w	r3, r7, #12
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f000 fe9a 	bl	80079a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c70:	2301      	movs	r3, #1
 8006c72:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c74:	f001 fb76 	bl	8008364 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c78:	f000 fc3a 	bl	80074f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c7c:	f001 fb42 	bl	8008304 <vPortEnterCritical>
 8006c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c86:	b25b      	sxtb	r3, r3
 8006c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c8c:	d103      	bne.n	8006c96 <xQueueSemaphoreTake+0x13a>
 8006c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c90:	2200      	movs	r2, #0
 8006c92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c9c:	b25b      	sxtb	r3, r3
 8006c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca2:	d103      	bne.n	8006cac <xQueueSemaphoreTake+0x150>
 8006ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006cac:	f001 fb5a 	bl	8008364 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006cb0:	463a      	mov	r2, r7
 8006cb2:	f107 030c 	add.w	r3, r7, #12
 8006cb6:	4611      	mov	r1, r2
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f000 fe89 	bl	80079d0 <xTaskCheckForTimeOut>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d132      	bne.n	8006d2a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006cc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006cc6:	f000 f972 	bl	8006fae <prvIsQueueEmpty>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d026      	beq.n	8006d1e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d109      	bne.n	8006cec <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006cd8:	f001 fb14 	bl	8008304 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f000 ffdb 	bl	8007c9c <xTaskPriorityInherit>
 8006ce6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006ce8:	f001 fb3c 	bl	8008364 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cee:	3324      	adds	r3, #36	; 0x24
 8006cf0:	683a      	ldr	r2, [r7, #0]
 8006cf2:	4611      	mov	r1, r2
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f000 fdcf 	bl	8007898 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006cfa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006cfc:	f000 f905 	bl	8006f0a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006d00:	f000 fc04 	bl	800750c <xTaskResumeAll>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	f47f af68 	bne.w	8006bdc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006d0c:	4b18      	ldr	r3, [pc, #96]	; (8006d70 <xQueueSemaphoreTake+0x214>)
 8006d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d12:	601a      	str	r2, [r3, #0]
 8006d14:	f3bf 8f4f 	dsb	sy
 8006d18:	f3bf 8f6f 	isb	sy
 8006d1c:	e75e      	b.n	8006bdc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006d1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d20:	f000 f8f3 	bl	8006f0a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d24:	f000 fbf2 	bl	800750c <xTaskResumeAll>
 8006d28:	e758      	b.n	8006bdc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006d2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d2c:	f000 f8ed 	bl	8006f0a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d30:	f000 fbec 	bl	800750c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d36:	f000 f93a 	bl	8006fae <prvIsQueueEmpty>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	f43f af4d 	beq.w	8006bdc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d00d      	beq.n	8006d64 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006d48:	f001 fadc 	bl	8008304 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006d4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d4e:	f000 f834 	bl	8006dba <prvGetDisinheritPriorityAfterTimeout>
 8006d52:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f001 f89a 	bl	8007e94 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006d60:	f001 fb00 	bl	8008364 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006d64:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3738      	adds	r7, #56	; 0x38
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
 8006d6e:	bf00      	nop
 8006d70:	e000ed04 	.word	0xe000ed04

08006d74 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d10a      	bne.n	8006d9c <vQueueDelete+0x28>
	__asm volatile
 8006d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d8a:	f383 8811 	msr	BASEPRI, r3
 8006d8e:	f3bf 8f6f 	isb	sy
 8006d92:	f3bf 8f4f 	dsb	sy
 8006d96:	60bb      	str	r3, [r7, #8]
}
 8006d98:	bf00      	nop
 8006d9a:	e7fe      	b.n	8006d9a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006d9c:	68f8      	ldr	r0, [r7, #12]
 8006d9e:	f000 f935 	bl	800700c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d102      	bne.n	8006db2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8006dac:	68f8      	ldr	r0, [r7, #12]
 8006dae:	f001 fc97 	bl	80086e0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006db2:	bf00      	nop
 8006db4:	3710      	adds	r7, #16
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}

08006dba <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006dba:	b480      	push	{r7}
 8006dbc:	b085      	sub	sp, #20
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d006      	beq.n	8006dd8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f1c3 0307 	rsb	r3, r3, #7
 8006dd4:	60fb      	str	r3, [r7, #12]
 8006dd6:	e001      	b.n	8006ddc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
	}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3714      	adds	r7, #20
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr

08006dea <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006dea:	b580      	push	{r7, lr}
 8006dec:	b086      	sub	sp, #24
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	60f8      	str	r0, [r7, #12]
 8006df2:	60b9      	str	r1, [r7, #8]
 8006df4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006df6:	2300      	movs	r3, #0
 8006df8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dfe:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d10d      	bne.n	8006e24 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d14d      	bne.n	8006eac <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	4618      	mov	r0, r3
 8006e16:	f000 ffb7 	bl	8007d88 <xTaskPriorityDisinherit>
 8006e1a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	609a      	str	r2, [r3, #8]
 8006e22:	e043      	b.n	8006eac <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d119      	bne.n	8006e5e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	6858      	ldr	r0, [r3, #4]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e32:	461a      	mov	r2, r3
 8006e34:	68b9      	ldr	r1, [r7, #8]
 8006e36:	f001 fded 	bl	8008a14 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	685a      	ldr	r2, [r3, #4]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e42:	441a      	add	r2, r3
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	685a      	ldr	r2, [r3, #4]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d32b      	bcc.n	8006eac <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	605a      	str	r2, [r3, #4]
 8006e5c:	e026      	b.n	8006eac <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	68d8      	ldr	r0, [r3, #12]
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e66:	461a      	mov	r2, r3
 8006e68:	68b9      	ldr	r1, [r7, #8]
 8006e6a:	f001 fdd3 	bl	8008a14 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	68da      	ldr	r2, [r3, #12]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e76:	425b      	negs	r3, r3
 8006e78:	441a      	add	r2, r3
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	68da      	ldr	r2, [r3, #12]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d207      	bcs.n	8006e9a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	689a      	ldr	r2, [r3, #8]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e92:	425b      	negs	r3, r3
 8006e94:	441a      	add	r2, r3
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2b02      	cmp	r3, #2
 8006e9e:	d105      	bne.n	8006eac <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d002      	beq.n	8006eac <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	3b01      	subs	r3, #1
 8006eaa:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	1c5a      	adds	r2, r3, #1
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006eb4:	697b      	ldr	r3, [r7, #20]
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3718      	adds	r7, #24
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}

08006ebe <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006ebe:	b580      	push	{r7, lr}
 8006ec0:	b082      	sub	sp, #8
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
 8006ec6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d018      	beq.n	8006f02 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	68da      	ldr	r2, [r3, #12]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed8:	441a      	add	r2, r3
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	68da      	ldr	r2, [r3, #12]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d303      	bcc.n	8006ef2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	68d9      	ldr	r1, [r3, #12]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006efa:	461a      	mov	r2, r3
 8006efc:	6838      	ldr	r0, [r7, #0]
 8006efe:	f001 fd89 	bl	8008a14 <memcpy>
	}
}
 8006f02:	bf00      	nop
 8006f04:	3708      	adds	r7, #8
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}

08006f0a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006f0a:	b580      	push	{r7, lr}
 8006f0c:	b084      	sub	sp, #16
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006f12:	f001 f9f7 	bl	8008304 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f1c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006f1e:	e011      	b.n	8006f44 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d012      	beq.n	8006f4e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	3324      	adds	r3, #36	; 0x24
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f000 fcd7 	bl	80078e0 <xTaskRemoveFromEventList>
 8006f32:	4603      	mov	r3, r0
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d001      	beq.n	8006f3c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006f38:	f000 fdac 	bl	8007a94 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006f3c:	7bfb      	ldrb	r3, [r7, #15]
 8006f3e:	3b01      	subs	r3, #1
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006f44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	dce9      	bgt.n	8006f20 <prvUnlockQueue+0x16>
 8006f4c:	e000      	b.n	8006f50 <prvUnlockQueue+0x46>
					break;
 8006f4e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	22ff      	movs	r2, #255	; 0xff
 8006f54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006f58:	f001 fa04 	bl	8008364 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006f5c:	f001 f9d2 	bl	8008304 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f66:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006f68:	e011      	b.n	8006f8e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	691b      	ldr	r3, [r3, #16]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d012      	beq.n	8006f98 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	3310      	adds	r3, #16
 8006f76:	4618      	mov	r0, r3
 8006f78:	f000 fcb2 	bl	80078e0 <xTaskRemoveFromEventList>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d001      	beq.n	8006f86 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006f82:	f000 fd87 	bl	8007a94 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006f86:	7bbb      	ldrb	r3, [r7, #14]
 8006f88:	3b01      	subs	r3, #1
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006f8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	dce9      	bgt.n	8006f6a <prvUnlockQueue+0x60>
 8006f96:	e000      	b.n	8006f9a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006f98:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	22ff      	movs	r2, #255	; 0xff
 8006f9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006fa2:	f001 f9df 	bl	8008364 <vPortExitCritical>
}
 8006fa6:	bf00      	nop
 8006fa8:	3710      	adds	r7, #16
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}

08006fae <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006fae:	b580      	push	{r7, lr}
 8006fb0:	b084      	sub	sp, #16
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006fb6:	f001 f9a5 	bl	8008304 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d102      	bne.n	8006fc8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	60fb      	str	r3, [r7, #12]
 8006fc6:	e001      	b.n	8006fcc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006fcc:	f001 f9ca 	bl	8008364 <vPortExitCritical>

	return xReturn;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3710      	adds	r7, #16
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}

08006fda <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006fda:	b580      	push	{r7, lr}
 8006fdc:	b084      	sub	sp, #16
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006fe2:	f001 f98f 	bl	8008304 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d102      	bne.n	8006ff8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	60fb      	str	r3, [r7, #12]
 8006ff6:	e001      	b.n	8006ffc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006ffc:	f001 f9b2 	bl	8008364 <vPortExitCritical>

	return xReturn;
 8007000:	68fb      	ldr	r3, [r7, #12]
}
 8007002:	4618      	mov	r0, r3
 8007004:	3710      	adds	r7, #16
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
	...

0800700c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800700c:	b480      	push	{r7}
 800700e:	b085      	sub	sp, #20
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007014:	2300      	movs	r3, #0
 8007016:	60fb      	str	r3, [r7, #12]
 8007018:	e016      	b.n	8007048 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800701a:	4a10      	ldr	r2, [pc, #64]	; (800705c <vQueueUnregisterQueue+0x50>)
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	00db      	lsls	r3, r3, #3
 8007020:	4413      	add	r3, r2
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	429a      	cmp	r2, r3
 8007028:	d10b      	bne.n	8007042 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800702a:	4a0c      	ldr	r2, [pc, #48]	; (800705c <vQueueUnregisterQueue+0x50>)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2100      	movs	r1, #0
 8007030:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007034:	4a09      	ldr	r2, [pc, #36]	; (800705c <vQueueUnregisterQueue+0x50>)
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	00db      	lsls	r3, r3, #3
 800703a:	4413      	add	r3, r2
 800703c:	2200      	movs	r2, #0
 800703e:	605a      	str	r2, [r3, #4]
				break;
 8007040:	e006      	b.n	8007050 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	3301      	adds	r3, #1
 8007046:	60fb      	str	r3, [r7, #12]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2b07      	cmp	r3, #7
 800704c:	d9e5      	bls.n	800701a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800704e:	bf00      	nop
 8007050:	bf00      	nop
 8007052:	3714      	adds	r7, #20
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr
 800705c:	20000728 	.word	0x20000728

08007060 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007060:	b580      	push	{r7, lr}
 8007062:	b08e      	sub	sp, #56	; 0x38
 8007064:	af04      	add	r7, sp, #16
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	60b9      	str	r1, [r7, #8]
 800706a:	607a      	str	r2, [r7, #4]
 800706c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800706e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007070:	2b00      	cmp	r3, #0
 8007072:	d10a      	bne.n	800708a <xTaskCreateStatic+0x2a>
	__asm volatile
 8007074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007078:	f383 8811 	msr	BASEPRI, r3
 800707c:	f3bf 8f6f 	isb	sy
 8007080:	f3bf 8f4f 	dsb	sy
 8007084:	623b      	str	r3, [r7, #32]
}
 8007086:	bf00      	nop
 8007088:	e7fe      	b.n	8007088 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800708a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800708c:	2b00      	cmp	r3, #0
 800708e:	d10a      	bne.n	80070a6 <xTaskCreateStatic+0x46>
	__asm volatile
 8007090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007094:	f383 8811 	msr	BASEPRI, r3
 8007098:	f3bf 8f6f 	isb	sy
 800709c:	f3bf 8f4f 	dsb	sy
 80070a0:	61fb      	str	r3, [r7, #28]
}
 80070a2:	bf00      	nop
 80070a4:	e7fe      	b.n	80070a4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80070a6:	23b4      	movs	r3, #180	; 0xb4
 80070a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	2bb4      	cmp	r3, #180	; 0xb4
 80070ae:	d00a      	beq.n	80070c6 <xTaskCreateStatic+0x66>
	__asm volatile
 80070b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b4:	f383 8811 	msr	BASEPRI, r3
 80070b8:	f3bf 8f6f 	isb	sy
 80070bc:	f3bf 8f4f 	dsb	sy
 80070c0:	61bb      	str	r3, [r7, #24]
}
 80070c2:	bf00      	nop
 80070c4:	e7fe      	b.n	80070c4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80070c6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80070c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d01e      	beq.n	800710c <xTaskCreateStatic+0xac>
 80070ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d01b      	beq.n	800710c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80070d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80070d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070dc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80070de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e0:	2202      	movs	r2, #2
 80070e2:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80070e6:	2300      	movs	r3, #0
 80070e8:	9303      	str	r3, [sp, #12]
 80070ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ec:	9302      	str	r3, [sp, #8]
 80070ee:	f107 0314 	add.w	r3, r7, #20
 80070f2:	9301      	str	r3, [sp, #4]
 80070f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f6:	9300      	str	r3, [sp, #0]
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	68b9      	ldr	r1, [r7, #8]
 80070fe:	68f8      	ldr	r0, [r7, #12]
 8007100:	f000 f850 	bl	80071a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007104:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007106:	f000 f8eb 	bl	80072e0 <prvAddNewTaskToReadyList>
 800710a:	e001      	b.n	8007110 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800710c:	2300      	movs	r3, #0
 800710e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007110:	697b      	ldr	r3, [r7, #20]
	}
 8007112:	4618      	mov	r0, r3
 8007114:	3728      	adds	r7, #40	; 0x28
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}

0800711a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800711a:	b580      	push	{r7, lr}
 800711c:	b08c      	sub	sp, #48	; 0x30
 800711e:	af04      	add	r7, sp, #16
 8007120:	60f8      	str	r0, [r7, #12]
 8007122:	60b9      	str	r1, [r7, #8]
 8007124:	603b      	str	r3, [r7, #0]
 8007126:	4613      	mov	r3, r2
 8007128:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800712a:	88fb      	ldrh	r3, [r7, #6]
 800712c:	009b      	lsls	r3, r3, #2
 800712e:	4618      	mov	r0, r3
 8007130:	f001 fa0a 	bl	8008548 <pvPortMalloc>
 8007134:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d00e      	beq.n	800715a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800713c:	20b4      	movs	r0, #180	; 0xb4
 800713e:	f001 fa03 	bl	8008548 <pvPortMalloc>
 8007142:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d003      	beq.n	8007152 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800714a:	69fb      	ldr	r3, [r7, #28]
 800714c:	697a      	ldr	r2, [r7, #20]
 800714e:	631a      	str	r2, [r3, #48]	; 0x30
 8007150:	e005      	b.n	800715e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007152:	6978      	ldr	r0, [r7, #20]
 8007154:	f001 fac4 	bl	80086e0 <vPortFree>
 8007158:	e001      	b.n	800715e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800715a:	2300      	movs	r3, #0
 800715c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800715e:	69fb      	ldr	r3, [r7, #28]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d017      	beq.n	8007194 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007164:	69fb      	ldr	r3, [r7, #28]
 8007166:	2200      	movs	r2, #0
 8007168:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800716c:	88fa      	ldrh	r2, [r7, #6]
 800716e:	2300      	movs	r3, #0
 8007170:	9303      	str	r3, [sp, #12]
 8007172:	69fb      	ldr	r3, [r7, #28]
 8007174:	9302      	str	r3, [sp, #8]
 8007176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007178:	9301      	str	r3, [sp, #4]
 800717a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800717c:	9300      	str	r3, [sp, #0]
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	68b9      	ldr	r1, [r7, #8]
 8007182:	68f8      	ldr	r0, [r7, #12]
 8007184:	f000 f80e 	bl	80071a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007188:	69f8      	ldr	r0, [r7, #28]
 800718a:	f000 f8a9 	bl	80072e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800718e:	2301      	movs	r3, #1
 8007190:	61bb      	str	r3, [r7, #24]
 8007192:	e002      	b.n	800719a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007194:	f04f 33ff 	mov.w	r3, #4294967295
 8007198:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800719a:	69bb      	ldr	r3, [r7, #24]
	}
 800719c:	4618      	mov	r0, r3
 800719e:	3720      	adds	r7, #32
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b088      	sub	sp, #32
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	60f8      	str	r0, [r7, #12]
 80071ac:	60b9      	str	r1, [r7, #8]
 80071ae:	607a      	str	r2, [r7, #4]
 80071b0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80071b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80071bc:	3b01      	subs	r3, #1
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	4413      	add	r3, r2
 80071c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80071c4:	69bb      	ldr	r3, [r7, #24]
 80071c6:	f023 0307 	bic.w	r3, r3, #7
 80071ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80071cc:	69bb      	ldr	r3, [r7, #24]
 80071ce:	f003 0307 	and.w	r3, r3, #7
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d00a      	beq.n	80071ec <prvInitialiseNewTask+0x48>
	__asm volatile
 80071d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071da:	f383 8811 	msr	BASEPRI, r3
 80071de:	f3bf 8f6f 	isb	sy
 80071e2:	f3bf 8f4f 	dsb	sy
 80071e6:	617b      	str	r3, [r7, #20]
}
 80071e8:	bf00      	nop
 80071ea:	e7fe      	b.n	80071ea <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d01f      	beq.n	8007232 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80071f2:	2300      	movs	r3, #0
 80071f4:	61fb      	str	r3, [r7, #28]
 80071f6:	e012      	b.n	800721e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80071f8:	68ba      	ldr	r2, [r7, #8]
 80071fa:	69fb      	ldr	r3, [r7, #28]
 80071fc:	4413      	add	r3, r2
 80071fe:	7819      	ldrb	r1, [r3, #0]
 8007200:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007202:	69fb      	ldr	r3, [r7, #28]
 8007204:	4413      	add	r3, r2
 8007206:	3334      	adds	r3, #52	; 0x34
 8007208:	460a      	mov	r2, r1
 800720a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800720c:	68ba      	ldr	r2, [r7, #8]
 800720e:	69fb      	ldr	r3, [r7, #28]
 8007210:	4413      	add	r3, r2
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d006      	beq.n	8007226 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007218:	69fb      	ldr	r3, [r7, #28]
 800721a:	3301      	adds	r3, #1
 800721c:	61fb      	str	r3, [r7, #28]
 800721e:	69fb      	ldr	r3, [r7, #28]
 8007220:	2b0f      	cmp	r3, #15
 8007222:	d9e9      	bls.n	80071f8 <prvInitialiseNewTask+0x54>
 8007224:	e000      	b.n	8007228 <prvInitialiseNewTask+0x84>
			{
				break;
 8007226:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800722a:	2200      	movs	r2, #0
 800722c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007230:	e003      	b.n	800723a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007234:	2200      	movs	r2, #0
 8007236:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800723a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800723c:	2b06      	cmp	r3, #6
 800723e:	d901      	bls.n	8007244 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007240:	2306      	movs	r3, #6
 8007242:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007246:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007248:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800724a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800724e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007252:	2200      	movs	r2, #0
 8007254:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007258:	3304      	adds	r3, #4
 800725a:	4618      	mov	r0, r3
 800725c:	f7ff f87c 	bl	8006358 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007262:	3318      	adds	r3, #24
 8007264:	4618      	mov	r0, r3
 8007266:	f7ff f877 	bl	8006358 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800726a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800726c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800726e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007272:	f1c3 0207 	rsb	r2, r3, #7
 8007276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007278:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800727a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800727c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800727e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007282:	2200      	movs	r2, #0
 8007284:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800728a:	2200      	movs	r2, #0
 800728c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007292:	334c      	adds	r3, #76	; 0x4c
 8007294:	2260      	movs	r2, #96	; 0x60
 8007296:	2100      	movs	r1, #0
 8007298:	4618      	mov	r0, r3
 800729a:	f001 fbc9 	bl	8008a30 <memset>
 800729e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a0:	4a0c      	ldr	r2, [pc, #48]	; (80072d4 <prvInitialiseNewTask+0x130>)
 80072a2:	651a      	str	r2, [r3, #80]	; 0x50
 80072a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a6:	4a0c      	ldr	r2, [pc, #48]	; (80072d8 <prvInitialiseNewTask+0x134>)
 80072a8:	655a      	str	r2, [r3, #84]	; 0x54
 80072aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ac:	4a0b      	ldr	r2, [pc, #44]	; (80072dc <prvInitialiseNewTask+0x138>)
 80072ae:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80072b0:	683a      	ldr	r2, [r7, #0]
 80072b2:	68f9      	ldr	r1, [r7, #12]
 80072b4:	69b8      	ldr	r0, [r7, #24]
 80072b6:	f000 fef5 	bl	80080a4 <pxPortInitialiseStack>
 80072ba:	4602      	mov	r2, r0
 80072bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072be:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80072c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d002      	beq.n	80072cc <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80072c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072ca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80072cc:	bf00      	nop
 80072ce:	3720      	adds	r7, #32
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	08009ba0 	.word	0x08009ba0
 80072d8:	08009bc0 	.word	0x08009bc0
 80072dc:	08009b80 	.word	0x08009b80

080072e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b082      	sub	sp, #8
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80072e8:	f001 f80c 	bl	8008304 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80072ec:	4b2a      	ldr	r3, [pc, #168]	; (8007398 <prvAddNewTaskToReadyList+0xb8>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	3301      	adds	r3, #1
 80072f2:	4a29      	ldr	r2, [pc, #164]	; (8007398 <prvAddNewTaskToReadyList+0xb8>)
 80072f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80072f6:	4b29      	ldr	r3, [pc, #164]	; (800739c <prvAddNewTaskToReadyList+0xbc>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d109      	bne.n	8007312 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80072fe:	4a27      	ldr	r2, [pc, #156]	; (800739c <prvAddNewTaskToReadyList+0xbc>)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007304:	4b24      	ldr	r3, [pc, #144]	; (8007398 <prvAddNewTaskToReadyList+0xb8>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	2b01      	cmp	r3, #1
 800730a:	d110      	bne.n	800732e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800730c:	f000 fbe6 	bl	8007adc <prvInitialiseTaskLists>
 8007310:	e00d      	b.n	800732e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007312:	4b23      	ldr	r3, [pc, #140]	; (80073a0 <prvAddNewTaskToReadyList+0xc0>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d109      	bne.n	800732e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800731a:	4b20      	ldr	r3, [pc, #128]	; (800739c <prvAddNewTaskToReadyList+0xbc>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007324:	429a      	cmp	r2, r3
 8007326:	d802      	bhi.n	800732e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007328:	4a1c      	ldr	r2, [pc, #112]	; (800739c <prvAddNewTaskToReadyList+0xbc>)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800732e:	4b1d      	ldr	r3, [pc, #116]	; (80073a4 <prvAddNewTaskToReadyList+0xc4>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	3301      	adds	r3, #1
 8007334:	4a1b      	ldr	r2, [pc, #108]	; (80073a4 <prvAddNewTaskToReadyList+0xc4>)
 8007336:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800733c:	2201      	movs	r2, #1
 800733e:	409a      	lsls	r2, r3
 8007340:	4b19      	ldr	r3, [pc, #100]	; (80073a8 <prvAddNewTaskToReadyList+0xc8>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4313      	orrs	r3, r2
 8007346:	4a18      	ldr	r2, [pc, #96]	; (80073a8 <prvAddNewTaskToReadyList+0xc8>)
 8007348:	6013      	str	r3, [r2, #0]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800734e:	4613      	mov	r3, r2
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	4413      	add	r3, r2
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	4a15      	ldr	r2, [pc, #84]	; (80073ac <prvAddNewTaskToReadyList+0xcc>)
 8007358:	441a      	add	r2, r3
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	3304      	adds	r3, #4
 800735e:	4619      	mov	r1, r3
 8007360:	4610      	mov	r0, r2
 8007362:	f7ff f806 	bl	8006372 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007366:	f000 fffd 	bl	8008364 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800736a:	4b0d      	ldr	r3, [pc, #52]	; (80073a0 <prvAddNewTaskToReadyList+0xc0>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d00e      	beq.n	8007390 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007372:	4b0a      	ldr	r3, [pc, #40]	; (800739c <prvAddNewTaskToReadyList+0xbc>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800737c:	429a      	cmp	r2, r3
 800737e:	d207      	bcs.n	8007390 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007380:	4b0b      	ldr	r3, [pc, #44]	; (80073b0 <prvAddNewTaskToReadyList+0xd0>)
 8007382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007386:	601a      	str	r2, [r3, #0]
 8007388:	f3bf 8f4f 	dsb	sy
 800738c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007390:	bf00      	nop
 8007392:	3708      	adds	r7, #8
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}
 8007398:	20000868 	.word	0x20000868
 800739c:	20000768 	.word	0x20000768
 80073a0:	20000874 	.word	0x20000874
 80073a4:	20000884 	.word	0x20000884
 80073a8:	20000870 	.word	0x20000870
 80073ac:	2000076c 	.word	0x2000076c
 80073b0:	e000ed04 	.word	0xe000ed04

080073b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b084      	sub	sp, #16
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80073bc:	2300      	movs	r3, #0
 80073be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d017      	beq.n	80073f6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80073c6:	4b13      	ldr	r3, [pc, #76]	; (8007414 <vTaskDelay+0x60>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d00a      	beq.n	80073e4 <vTaskDelay+0x30>
	__asm volatile
 80073ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d2:	f383 8811 	msr	BASEPRI, r3
 80073d6:	f3bf 8f6f 	isb	sy
 80073da:	f3bf 8f4f 	dsb	sy
 80073de:	60bb      	str	r3, [r7, #8]
}
 80073e0:	bf00      	nop
 80073e2:	e7fe      	b.n	80073e2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80073e4:	f000 f884 	bl	80074f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80073e8:	2100      	movs	r1, #0
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 fdf4 	bl	8007fd8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80073f0:	f000 f88c 	bl	800750c <xTaskResumeAll>
 80073f4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d107      	bne.n	800740c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80073fc:	4b06      	ldr	r3, [pc, #24]	; (8007418 <vTaskDelay+0x64>)
 80073fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007402:	601a      	str	r2, [r3, #0]
 8007404:	f3bf 8f4f 	dsb	sy
 8007408:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800740c:	bf00      	nop
 800740e:	3710      	adds	r7, #16
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}
 8007414:	20000890 	.word	0x20000890
 8007418:	e000ed04 	.word	0xe000ed04

0800741c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b08a      	sub	sp, #40	; 0x28
 8007420:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007422:	2300      	movs	r3, #0
 8007424:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007426:	2300      	movs	r3, #0
 8007428:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800742a:	463a      	mov	r2, r7
 800742c:	1d39      	adds	r1, r7, #4
 800742e:	f107 0308 	add.w	r3, r7, #8
 8007432:	4618      	mov	r0, r3
 8007434:	f7f9 ffea 	bl	800140c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007438:	6839      	ldr	r1, [r7, #0]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	68ba      	ldr	r2, [r7, #8]
 800743e:	9202      	str	r2, [sp, #8]
 8007440:	9301      	str	r3, [sp, #4]
 8007442:	2300      	movs	r3, #0
 8007444:	9300      	str	r3, [sp, #0]
 8007446:	2300      	movs	r3, #0
 8007448:	460a      	mov	r2, r1
 800744a:	4921      	ldr	r1, [pc, #132]	; (80074d0 <vTaskStartScheduler+0xb4>)
 800744c:	4821      	ldr	r0, [pc, #132]	; (80074d4 <vTaskStartScheduler+0xb8>)
 800744e:	f7ff fe07 	bl	8007060 <xTaskCreateStatic>
 8007452:	4603      	mov	r3, r0
 8007454:	4a20      	ldr	r2, [pc, #128]	; (80074d8 <vTaskStartScheduler+0xbc>)
 8007456:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007458:	4b1f      	ldr	r3, [pc, #124]	; (80074d8 <vTaskStartScheduler+0xbc>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d002      	beq.n	8007466 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007460:	2301      	movs	r3, #1
 8007462:	617b      	str	r3, [r7, #20]
 8007464:	e001      	b.n	800746a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007466:	2300      	movs	r3, #0
 8007468:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	2b01      	cmp	r3, #1
 800746e:	d11b      	bne.n	80074a8 <vTaskStartScheduler+0x8c>
	__asm volatile
 8007470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007474:	f383 8811 	msr	BASEPRI, r3
 8007478:	f3bf 8f6f 	isb	sy
 800747c:	f3bf 8f4f 	dsb	sy
 8007480:	613b      	str	r3, [r7, #16]
}
 8007482:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007484:	4b15      	ldr	r3, [pc, #84]	; (80074dc <vTaskStartScheduler+0xc0>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	334c      	adds	r3, #76	; 0x4c
 800748a:	4a15      	ldr	r2, [pc, #84]	; (80074e0 <vTaskStartScheduler+0xc4>)
 800748c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800748e:	4b15      	ldr	r3, [pc, #84]	; (80074e4 <vTaskStartScheduler+0xc8>)
 8007490:	f04f 32ff 	mov.w	r2, #4294967295
 8007494:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007496:	4b14      	ldr	r3, [pc, #80]	; (80074e8 <vTaskStartScheduler+0xcc>)
 8007498:	2201      	movs	r2, #1
 800749a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800749c:	4b13      	ldr	r3, [pc, #76]	; (80074ec <vTaskStartScheduler+0xd0>)
 800749e:	2200      	movs	r2, #0
 80074a0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80074a2:	f000 fe8d 	bl	80081c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80074a6:	e00e      	b.n	80074c6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ae:	d10a      	bne.n	80074c6 <vTaskStartScheduler+0xaa>
	__asm volatile
 80074b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b4:	f383 8811 	msr	BASEPRI, r3
 80074b8:	f3bf 8f6f 	isb	sy
 80074bc:	f3bf 8f4f 	dsb	sy
 80074c0:	60fb      	str	r3, [r7, #12]
}
 80074c2:	bf00      	nop
 80074c4:	e7fe      	b.n	80074c4 <vTaskStartScheduler+0xa8>
}
 80074c6:	bf00      	nop
 80074c8:	3718      	adds	r7, #24
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop
 80074d0:	08009b30 	.word	0x08009b30
 80074d4:	08007aad 	.word	0x08007aad
 80074d8:	2000088c 	.word	0x2000088c
 80074dc:	20000768 	.word	0x20000768
 80074e0:	20000010 	.word	0x20000010
 80074e4:	20000888 	.word	0x20000888
 80074e8:	20000874 	.word	0x20000874
 80074ec:	2000086c 	.word	0x2000086c

080074f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80074f0:	b480      	push	{r7}
 80074f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80074f4:	4b04      	ldr	r3, [pc, #16]	; (8007508 <vTaskSuspendAll+0x18>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	3301      	adds	r3, #1
 80074fa:	4a03      	ldr	r2, [pc, #12]	; (8007508 <vTaskSuspendAll+0x18>)
 80074fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80074fe:	bf00      	nop
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr
 8007508:	20000890 	.word	0x20000890

0800750c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b084      	sub	sp, #16
 8007510:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007512:	2300      	movs	r3, #0
 8007514:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007516:	2300      	movs	r3, #0
 8007518:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800751a:	4b41      	ldr	r3, [pc, #260]	; (8007620 <xTaskResumeAll+0x114>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d10a      	bne.n	8007538 <xTaskResumeAll+0x2c>
	__asm volatile
 8007522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007526:	f383 8811 	msr	BASEPRI, r3
 800752a:	f3bf 8f6f 	isb	sy
 800752e:	f3bf 8f4f 	dsb	sy
 8007532:	603b      	str	r3, [r7, #0]
}
 8007534:	bf00      	nop
 8007536:	e7fe      	b.n	8007536 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007538:	f000 fee4 	bl	8008304 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800753c:	4b38      	ldr	r3, [pc, #224]	; (8007620 <xTaskResumeAll+0x114>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	3b01      	subs	r3, #1
 8007542:	4a37      	ldr	r2, [pc, #220]	; (8007620 <xTaskResumeAll+0x114>)
 8007544:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007546:	4b36      	ldr	r3, [pc, #216]	; (8007620 <xTaskResumeAll+0x114>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d161      	bne.n	8007612 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800754e:	4b35      	ldr	r3, [pc, #212]	; (8007624 <xTaskResumeAll+0x118>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d05d      	beq.n	8007612 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007556:	e02e      	b.n	80075b6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007558:	4b33      	ldr	r3, [pc, #204]	; (8007628 <xTaskResumeAll+0x11c>)
 800755a:	68db      	ldr	r3, [r3, #12]
 800755c:	68db      	ldr	r3, [r3, #12]
 800755e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	3318      	adds	r3, #24
 8007564:	4618      	mov	r0, r3
 8007566:	f7fe ff61 	bl	800642c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	3304      	adds	r3, #4
 800756e:	4618      	mov	r0, r3
 8007570:	f7fe ff5c 	bl	800642c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007578:	2201      	movs	r2, #1
 800757a:	409a      	lsls	r2, r3
 800757c:	4b2b      	ldr	r3, [pc, #172]	; (800762c <xTaskResumeAll+0x120>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4313      	orrs	r3, r2
 8007582:	4a2a      	ldr	r2, [pc, #168]	; (800762c <xTaskResumeAll+0x120>)
 8007584:	6013      	str	r3, [r2, #0]
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800758a:	4613      	mov	r3, r2
 800758c:	009b      	lsls	r3, r3, #2
 800758e:	4413      	add	r3, r2
 8007590:	009b      	lsls	r3, r3, #2
 8007592:	4a27      	ldr	r2, [pc, #156]	; (8007630 <xTaskResumeAll+0x124>)
 8007594:	441a      	add	r2, r3
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	3304      	adds	r3, #4
 800759a:	4619      	mov	r1, r3
 800759c:	4610      	mov	r0, r2
 800759e:	f7fe fee8 	bl	8006372 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075a6:	4b23      	ldr	r3, [pc, #140]	; (8007634 <xTaskResumeAll+0x128>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d302      	bcc.n	80075b6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80075b0:	4b21      	ldr	r3, [pc, #132]	; (8007638 <xTaskResumeAll+0x12c>)
 80075b2:	2201      	movs	r2, #1
 80075b4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80075b6:	4b1c      	ldr	r3, [pc, #112]	; (8007628 <xTaskResumeAll+0x11c>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d1cc      	bne.n	8007558 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d001      	beq.n	80075c8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80075c4:	f000 fb2c 	bl	8007c20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80075c8:	4b1c      	ldr	r3, [pc, #112]	; (800763c <xTaskResumeAll+0x130>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d010      	beq.n	80075f6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80075d4:	f000 f846 	bl	8007664 <xTaskIncrementTick>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d002      	beq.n	80075e4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80075de:	4b16      	ldr	r3, [pc, #88]	; (8007638 <xTaskResumeAll+0x12c>)
 80075e0:	2201      	movs	r2, #1
 80075e2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	3b01      	subs	r3, #1
 80075e8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d1f1      	bne.n	80075d4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80075f0:	4b12      	ldr	r3, [pc, #72]	; (800763c <xTaskResumeAll+0x130>)
 80075f2:	2200      	movs	r2, #0
 80075f4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80075f6:	4b10      	ldr	r3, [pc, #64]	; (8007638 <xTaskResumeAll+0x12c>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d009      	beq.n	8007612 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80075fe:	2301      	movs	r3, #1
 8007600:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007602:	4b0f      	ldr	r3, [pc, #60]	; (8007640 <xTaskResumeAll+0x134>)
 8007604:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007608:	601a      	str	r2, [r3, #0]
 800760a:	f3bf 8f4f 	dsb	sy
 800760e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007612:	f000 fea7 	bl	8008364 <vPortExitCritical>

	return xAlreadyYielded;
 8007616:	68bb      	ldr	r3, [r7, #8]
}
 8007618:	4618      	mov	r0, r3
 800761a:	3710      	adds	r7, #16
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}
 8007620:	20000890 	.word	0x20000890
 8007624:	20000868 	.word	0x20000868
 8007628:	20000828 	.word	0x20000828
 800762c:	20000870 	.word	0x20000870
 8007630:	2000076c 	.word	0x2000076c
 8007634:	20000768 	.word	0x20000768
 8007638:	2000087c 	.word	0x2000087c
 800763c:	20000878 	.word	0x20000878
 8007640:	e000ed04 	.word	0xe000ed04

08007644 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007644:	b480      	push	{r7}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800764a:	4b05      	ldr	r3, [pc, #20]	; (8007660 <xTaskGetTickCount+0x1c>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007650:	687b      	ldr	r3, [r7, #4]
}
 8007652:	4618      	mov	r0, r3
 8007654:	370c      	adds	r7, #12
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr
 800765e:	bf00      	nop
 8007660:	2000086c 	.word	0x2000086c

08007664 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b086      	sub	sp, #24
 8007668:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800766a:	2300      	movs	r3, #0
 800766c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800766e:	4b4e      	ldr	r3, [pc, #312]	; (80077a8 <xTaskIncrementTick+0x144>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	2b00      	cmp	r3, #0
 8007674:	f040 808e 	bne.w	8007794 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007678:	4b4c      	ldr	r3, [pc, #304]	; (80077ac <xTaskIncrementTick+0x148>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	3301      	adds	r3, #1
 800767e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007680:	4a4a      	ldr	r2, [pc, #296]	; (80077ac <xTaskIncrementTick+0x148>)
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d120      	bne.n	80076ce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800768c:	4b48      	ldr	r3, [pc, #288]	; (80077b0 <xTaskIncrementTick+0x14c>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d00a      	beq.n	80076ac <xTaskIncrementTick+0x48>
	__asm volatile
 8007696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800769a:	f383 8811 	msr	BASEPRI, r3
 800769e:	f3bf 8f6f 	isb	sy
 80076a2:	f3bf 8f4f 	dsb	sy
 80076a6:	603b      	str	r3, [r7, #0]
}
 80076a8:	bf00      	nop
 80076aa:	e7fe      	b.n	80076aa <xTaskIncrementTick+0x46>
 80076ac:	4b40      	ldr	r3, [pc, #256]	; (80077b0 <xTaskIncrementTick+0x14c>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	60fb      	str	r3, [r7, #12]
 80076b2:	4b40      	ldr	r3, [pc, #256]	; (80077b4 <xTaskIncrementTick+0x150>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a3e      	ldr	r2, [pc, #248]	; (80077b0 <xTaskIncrementTick+0x14c>)
 80076b8:	6013      	str	r3, [r2, #0]
 80076ba:	4a3e      	ldr	r2, [pc, #248]	; (80077b4 <xTaskIncrementTick+0x150>)
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	6013      	str	r3, [r2, #0]
 80076c0:	4b3d      	ldr	r3, [pc, #244]	; (80077b8 <xTaskIncrementTick+0x154>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	3301      	adds	r3, #1
 80076c6:	4a3c      	ldr	r2, [pc, #240]	; (80077b8 <xTaskIncrementTick+0x154>)
 80076c8:	6013      	str	r3, [r2, #0]
 80076ca:	f000 faa9 	bl	8007c20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80076ce:	4b3b      	ldr	r3, [pc, #236]	; (80077bc <xTaskIncrementTick+0x158>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	693a      	ldr	r2, [r7, #16]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d348      	bcc.n	800776a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076d8:	4b35      	ldr	r3, [pc, #212]	; (80077b0 <xTaskIncrementTick+0x14c>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d104      	bne.n	80076ec <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076e2:	4b36      	ldr	r3, [pc, #216]	; (80077bc <xTaskIncrementTick+0x158>)
 80076e4:	f04f 32ff 	mov.w	r2, #4294967295
 80076e8:	601a      	str	r2, [r3, #0]
					break;
 80076ea:	e03e      	b.n	800776a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076ec:	4b30      	ldr	r3, [pc, #192]	; (80077b0 <xTaskIncrementTick+0x14c>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80076fc:	693a      	ldr	r2, [r7, #16]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	429a      	cmp	r2, r3
 8007702:	d203      	bcs.n	800770c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007704:	4a2d      	ldr	r2, [pc, #180]	; (80077bc <xTaskIncrementTick+0x158>)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800770a:	e02e      	b.n	800776a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	3304      	adds	r3, #4
 8007710:	4618      	mov	r0, r3
 8007712:	f7fe fe8b 	bl	800642c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800771a:	2b00      	cmp	r3, #0
 800771c:	d004      	beq.n	8007728 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	3318      	adds	r3, #24
 8007722:	4618      	mov	r0, r3
 8007724:	f7fe fe82 	bl	800642c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800772c:	2201      	movs	r2, #1
 800772e:	409a      	lsls	r2, r3
 8007730:	4b23      	ldr	r3, [pc, #140]	; (80077c0 <xTaskIncrementTick+0x15c>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4313      	orrs	r3, r2
 8007736:	4a22      	ldr	r2, [pc, #136]	; (80077c0 <xTaskIncrementTick+0x15c>)
 8007738:	6013      	str	r3, [r2, #0]
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800773e:	4613      	mov	r3, r2
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	4413      	add	r3, r2
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	4a1f      	ldr	r2, [pc, #124]	; (80077c4 <xTaskIncrementTick+0x160>)
 8007748:	441a      	add	r2, r3
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	3304      	adds	r3, #4
 800774e:	4619      	mov	r1, r3
 8007750:	4610      	mov	r0, r2
 8007752:	f7fe fe0e 	bl	8006372 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800775a:	4b1b      	ldr	r3, [pc, #108]	; (80077c8 <xTaskIncrementTick+0x164>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007760:	429a      	cmp	r2, r3
 8007762:	d3b9      	bcc.n	80076d8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007764:	2301      	movs	r3, #1
 8007766:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007768:	e7b6      	b.n	80076d8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800776a:	4b17      	ldr	r3, [pc, #92]	; (80077c8 <xTaskIncrementTick+0x164>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007770:	4914      	ldr	r1, [pc, #80]	; (80077c4 <xTaskIncrementTick+0x160>)
 8007772:	4613      	mov	r3, r2
 8007774:	009b      	lsls	r3, r3, #2
 8007776:	4413      	add	r3, r2
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	440b      	add	r3, r1
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	2b01      	cmp	r3, #1
 8007780:	d901      	bls.n	8007786 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007782:	2301      	movs	r3, #1
 8007784:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007786:	4b11      	ldr	r3, [pc, #68]	; (80077cc <xTaskIncrementTick+0x168>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d007      	beq.n	800779e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800778e:	2301      	movs	r3, #1
 8007790:	617b      	str	r3, [r7, #20]
 8007792:	e004      	b.n	800779e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007794:	4b0e      	ldr	r3, [pc, #56]	; (80077d0 <xTaskIncrementTick+0x16c>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	3301      	adds	r3, #1
 800779a:	4a0d      	ldr	r2, [pc, #52]	; (80077d0 <xTaskIncrementTick+0x16c>)
 800779c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800779e:	697b      	ldr	r3, [r7, #20]
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3718      	adds	r7, #24
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	20000890 	.word	0x20000890
 80077ac:	2000086c 	.word	0x2000086c
 80077b0:	20000820 	.word	0x20000820
 80077b4:	20000824 	.word	0x20000824
 80077b8:	20000880 	.word	0x20000880
 80077bc:	20000888 	.word	0x20000888
 80077c0:	20000870 	.word	0x20000870
 80077c4:	2000076c 	.word	0x2000076c
 80077c8:	20000768 	.word	0x20000768
 80077cc:	2000087c 	.word	0x2000087c
 80077d0:	20000878 	.word	0x20000878

080077d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80077d4:	b480      	push	{r7}
 80077d6:	b087      	sub	sp, #28
 80077d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80077da:	4b29      	ldr	r3, [pc, #164]	; (8007880 <vTaskSwitchContext+0xac>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d003      	beq.n	80077ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80077e2:	4b28      	ldr	r3, [pc, #160]	; (8007884 <vTaskSwitchContext+0xb0>)
 80077e4:	2201      	movs	r2, #1
 80077e6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80077e8:	e044      	b.n	8007874 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80077ea:	4b26      	ldr	r3, [pc, #152]	; (8007884 <vTaskSwitchContext+0xb0>)
 80077ec:	2200      	movs	r2, #0
 80077ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077f0:	4b25      	ldr	r3, [pc, #148]	; (8007888 <vTaskSwitchContext+0xb4>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	fab3 f383 	clz	r3, r3
 80077fc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80077fe:	7afb      	ldrb	r3, [r7, #11]
 8007800:	f1c3 031f 	rsb	r3, r3, #31
 8007804:	617b      	str	r3, [r7, #20]
 8007806:	4921      	ldr	r1, [pc, #132]	; (800788c <vTaskSwitchContext+0xb8>)
 8007808:	697a      	ldr	r2, [r7, #20]
 800780a:	4613      	mov	r3, r2
 800780c:	009b      	lsls	r3, r3, #2
 800780e:	4413      	add	r3, r2
 8007810:	009b      	lsls	r3, r3, #2
 8007812:	440b      	add	r3, r1
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d10a      	bne.n	8007830 <vTaskSwitchContext+0x5c>
	__asm volatile
 800781a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800781e:	f383 8811 	msr	BASEPRI, r3
 8007822:	f3bf 8f6f 	isb	sy
 8007826:	f3bf 8f4f 	dsb	sy
 800782a:	607b      	str	r3, [r7, #4]
}
 800782c:	bf00      	nop
 800782e:	e7fe      	b.n	800782e <vTaskSwitchContext+0x5a>
 8007830:	697a      	ldr	r2, [r7, #20]
 8007832:	4613      	mov	r3, r2
 8007834:	009b      	lsls	r3, r3, #2
 8007836:	4413      	add	r3, r2
 8007838:	009b      	lsls	r3, r3, #2
 800783a:	4a14      	ldr	r2, [pc, #80]	; (800788c <vTaskSwitchContext+0xb8>)
 800783c:	4413      	add	r3, r2
 800783e:	613b      	str	r3, [r7, #16]
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	685a      	ldr	r2, [r3, #4]
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	605a      	str	r2, [r3, #4]
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	685a      	ldr	r2, [r3, #4]
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	3308      	adds	r3, #8
 8007852:	429a      	cmp	r2, r3
 8007854:	d104      	bne.n	8007860 <vTaskSwitchContext+0x8c>
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	685a      	ldr	r2, [r3, #4]
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	605a      	str	r2, [r3, #4]
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	68db      	ldr	r3, [r3, #12]
 8007866:	4a0a      	ldr	r2, [pc, #40]	; (8007890 <vTaskSwitchContext+0xbc>)
 8007868:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800786a:	4b09      	ldr	r3, [pc, #36]	; (8007890 <vTaskSwitchContext+0xbc>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	334c      	adds	r3, #76	; 0x4c
 8007870:	4a08      	ldr	r2, [pc, #32]	; (8007894 <vTaskSwitchContext+0xc0>)
 8007872:	6013      	str	r3, [r2, #0]
}
 8007874:	bf00      	nop
 8007876:	371c      	adds	r7, #28
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr
 8007880:	20000890 	.word	0x20000890
 8007884:	2000087c 	.word	0x2000087c
 8007888:	20000870 	.word	0x20000870
 800788c:	2000076c 	.word	0x2000076c
 8007890:	20000768 	.word	0x20000768
 8007894:	20000010 	.word	0x20000010

08007898 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b084      	sub	sp, #16
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d10a      	bne.n	80078be <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80078a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ac:	f383 8811 	msr	BASEPRI, r3
 80078b0:	f3bf 8f6f 	isb	sy
 80078b4:	f3bf 8f4f 	dsb	sy
 80078b8:	60fb      	str	r3, [r7, #12]
}
 80078ba:	bf00      	nop
 80078bc:	e7fe      	b.n	80078bc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80078be:	4b07      	ldr	r3, [pc, #28]	; (80078dc <vTaskPlaceOnEventList+0x44>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	3318      	adds	r3, #24
 80078c4:	4619      	mov	r1, r3
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f7fe fd77 	bl	80063ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80078cc:	2101      	movs	r1, #1
 80078ce:	6838      	ldr	r0, [r7, #0]
 80078d0:	f000 fb82 	bl	8007fd8 <prvAddCurrentTaskToDelayedList>
}
 80078d4:	bf00      	nop
 80078d6:	3710      	adds	r7, #16
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}
 80078dc:	20000768 	.word	0x20000768

080078e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b086      	sub	sp, #24
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	68db      	ldr	r3, [r3, #12]
 80078ec:	68db      	ldr	r3, [r3, #12]
 80078ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d10a      	bne.n	800790c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80078f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078fa:	f383 8811 	msr	BASEPRI, r3
 80078fe:	f3bf 8f6f 	isb	sy
 8007902:	f3bf 8f4f 	dsb	sy
 8007906:	60fb      	str	r3, [r7, #12]
}
 8007908:	bf00      	nop
 800790a:	e7fe      	b.n	800790a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	3318      	adds	r3, #24
 8007910:	4618      	mov	r0, r3
 8007912:	f7fe fd8b 	bl	800642c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007916:	4b1d      	ldr	r3, [pc, #116]	; (800798c <xTaskRemoveFromEventList+0xac>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d11c      	bne.n	8007958 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	3304      	adds	r3, #4
 8007922:	4618      	mov	r0, r3
 8007924:	f7fe fd82 	bl	800642c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800792c:	2201      	movs	r2, #1
 800792e:	409a      	lsls	r2, r3
 8007930:	4b17      	ldr	r3, [pc, #92]	; (8007990 <xTaskRemoveFromEventList+0xb0>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4313      	orrs	r3, r2
 8007936:	4a16      	ldr	r2, [pc, #88]	; (8007990 <xTaskRemoveFromEventList+0xb0>)
 8007938:	6013      	str	r3, [r2, #0]
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800793e:	4613      	mov	r3, r2
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	4413      	add	r3, r2
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	4a13      	ldr	r2, [pc, #76]	; (8007994 <xTaskRemoveFromEventList+0xb4>)
 8007948:	441a      	add	r2, r3
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	3304      	adds	r3, #4
 800794e:	4619      	mov	r1, r3
 8007950:	4610      	mov	r0, r2
 8007952:	f7fe fd0e 	bl	8006372 <vListInsertEnd>
 8007956:	e005      	b.n	8007964 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	3318      	adds	r3, #24
 800795c:	4619      	mov	r1, r3
 800795e:	480e      	ldr	r0, [pc, #56]	; (8007998 <xTaskRemoveFromEventList+0xb8>)
 8007960:	f7fe fd07 	bl	8006372 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007968:	4b0c      	ldr	r3, [pc, #48]	; (800799c <xTaskRemoveFromEventList+0xbc>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800796e:	429a      	cmp	r2, r3
 8007970:	d905      	bls.n	800797e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007972:	2301      	movs	r3, #1
 8007974:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007976:	4b0a      	ldr	r3, [pc, #40]	; (80079a0 <xTaskRemoveFromEventList+0xc0>)
 8007978:	2201      	movs	r2, #1
 800797a:	601a      	str	r2, [r3, #0]
 800797c:	e001      	b.n	8007982 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800797e:	2300      	movs	r3, #0
 8007980:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007982:	697b      	ldr	r3, [r7, #20]
}
 8007984:	4618      	mov	r0, r3
 8007986:	3718      	adds	r7, #24
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}
 800798c:	20000890 	.word	0x20000890
 8007990:	20000870 	.word	0x20000870
 8007994:	2000076c 	.word	0x2000076c
 8007998:	20000828 	.word	0x20000828
 800799c:	20000768 	.word	0x20000768
 80079a0:	2000087c 	.word	0x2000087c

080079a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80079a4:	b480      	push	{r7}
 80079a6:	b083      	sub	sp, #12
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80079ac:	4b06      	ldr	r3, [pc, #24]	; (80079c8 <vTaskInternalSetTimeOutState+0x24>)
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80079b4:	4b05      	ldr	r3, [pc, #20]	; (80079cc <vTaskInternalSetTimeOutState+0x28>)
 80079b6:	681a      	ldr	r2, [r3, #0]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	605a      	str	r2, [r3, #4]
}
 80079bc:	bf00      	nop
 80079be:	370c      	adds	r7, #12
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr
 80079c8:	20000880 	.word	0x20000880
 80079cc:	2000086c 	.word	0x2000086c

080079d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b088      	sub	sp, #32
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d10a      	bne.n	80079f6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80079e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e4:	f383 8811 	msr	BASEPRI, r3
 80079e8:	f3bf 8f6f 	isb	sy
 80079ec:	f3bf 8f4f 	dsb	sy
 80079f0:	613b      	str	r3, [r7, #16]
}
 80079f2:	bf00      	nop
 80079f4:	e7fe      	b.n	80079f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d10a      	bne.n	8007a12 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80079fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a00:	f383 8811 	msr	BASEPRI, r3
 8007a04:	f3bf 8f6f 	isb	sy
 8007a08:	f3bf 8f4f 	dsb	sy
 8007a0c:	60fb      	str	r3, [r7, #12]
}
 8007a0e:	bf00      	nop
 8007a10:	e7fe      	b.n	8007a10 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007a12:	f000 fc77 	bl	8008304 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007a16:	4b1d      	ldr	r3, [pc, #116]	; (8007a8c <xTaskCheckForTimeOut+0xbc>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	69ba      	ldr	r2, [r7, #24]
 8007a22:	1ad3      	subs	r3, r2, r3
 8007a24:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a2e:	d102      	bne.n	8007a36 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007a30:	2300      	movs	r3, #0
 8007a32:	61fb      	str	r3, [r7, #28]
 8007a34:	e023      	b.n	8007a7e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	4b15      	ldr	r3, [pc, #84]	; (8007a90 <xTaskCheckForTimeOut+0xc0>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d007      	beq.n	8007a52 <xTaskCheckForTimeOut+0x82>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	69ba      	ldr	r2, [r7, #24]
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	d302      	bcc.n	8007a52 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	61fb      	str	r3, [r7, #28]
 8007a50:	e015      	b.n	8007a7e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	697a      	ldr	r2, [r7, #20]
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d20b      	bcs.n	8007a74 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	1ad2      	subs	r2, r2, r3
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f7ff ff9b 	bl	80079a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	61fb      	str	r3, [r7, #28]
 8007a72:	e004      	b.n	8007a7e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	2200      	movs	r2, #0
 8007a78:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007a7e:	f000 fc71 	bl	8008364 <vPortExitCritical>

	return xReturn;
 8007a82:	69fb      	ldr	r3, [r7, #28]
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3720      	adds	r7, #32
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	2000086c 	.word	0x2000086c
 8007a90:	20000880 	.word	0x20000880

08007a94 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007a94:	b480      	push	{r7}
 8007a96:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007a98:	4b03      	ldr	r3, [pc, #12]	; (8007aa8 <vTaskMissedYield+0x14>)
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	601a      	str	r2, [r3, #0]
}
 8007a9e:	bf00      	nop
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr
 8007aa8:	2000087c 	.word	0x2000087c

08007aac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b082      	sub	sp, #8
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007ab4:	f000 f852 	bl	8007b5c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007ab8:	4b06      	ldr	r3, [pc, #24]	; (8007ad4 <prvIdleTask+0x28>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d9f9      	bls.n	8007ab4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007ac0:	4b05      	ldr	r3, [pc, #20]	; (8007ad8 <prvIdleTask+0x2c>)
 8007ac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ac6:	601a      	str	r2, [r3, #0]
 8007ac8:	f3bf 8f4f 	dsb	sy
 8007acc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007ad0:	e7f0      	b.n	8007ab4 <prvIdleTask+0x8>
 8007ad2:	bf00      	nop
 8007ad4:	2000076c 	.word	0x2000076c
 8007ad8:	e000ed04 	.word	0xe000ed04

08007adc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b082      	sub	sp, #8
 8007ae0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	607b      	str	r3, [r7, #4]
 8007ae6:	e00c      	b.n	8007b02 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	4613      	mov	r3, r2
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	4413      	add	r3, r2
 8007af0:	009b      	lsls	r3, r3, #2
 8007af2:	4a12      	ldr	r2, [pc, #72]	; (8007b3c <prvInitialiseTaskLists+0x60>)
 8007af4:	4413      	add	r3, r2
 8007af6:	4618      	mov	r0, r3
 8007af8:	f7fe fc0e 	bl	8006318 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	3301      	adds	r3, #1
 8007b00:	607b      	str	r3, [r7, #4]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2b06      	cmp	r3, #6
 8007b06:	d9ef      	bls.n	8007ae8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007b08:	480d      	ldr	r0, [pc, #52]	; (8007b40 <prvInitialiseTaskLists+0x64>)
 8007b0a:	f7fe fc05 	bl	8006318 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007b0e:	480d      	ldr	r0, [pc, #52]	; (8007b44 <prvInitialiseTaskLists+0x68>)
 8007b10:	f7fe fc02 	bl	8006318 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007b14:	480c      	ldr	r0, [pc, #48]	; (8007b48 <prvInitialiseTaskLists+0x6c>)
 8007b16:	f7fe fbff 	bl	8006318 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007b1a:	480c      	ldr	r0, [pc, #48]	; (8007b4c <prvInitialiseTaskLists+0x70>)
 8007b1c:	f7fe fbfc 	bl	8006318 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007b20:	480b      	ldr	r0, [pc, #44]	; (8007b50 <prvInitialiseTaskLists+0x74>)
 8007b22:	f7fe fbf9 	bl	8006318 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007b26:	4b0b      	ldr	r3, [pc, #44]	; (8007b54 <prvInitialiseTaskLists+0x78>)
 8007b28:	4a05      	ldr	r2, [pc, #20]	; (8007b40 <prvInitialiseTaskLists+0x64>)
 8007b2a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007b2c:	4b0a      	ldr	r3, [pc, #40]	; (8007b58 <prvInitialiseTaskLists+0x7c>)
 8007b2e:	4a05      	ldr	r2, [pc, #20]	; (8007b44 <prvInitialiseTaskLists+0x68>)
 8007b30:	601a      	str	r2, [r3, #0]
}
 8007b32:	bf00      	nop
 8007b34:	3708      	adds	r7, #8
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	2000076c 	.word	0x2000076c
 8007b40:	200007f8 	.word	0x200007f8
 8007b44:	2000080c 	.word	0x2000080c
 8007b48:	20000828 	.word	0x20000828
 8007b4c:	2000083c 	.word	0x2000083c
 8007b50:	20000854 	.word	0x20000854
 8007b54:	20000820 	.word	0x20000820
 8007b58:	20000824 	.word	0x20000824

08007b5c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b082      	sub	sp, #8
 8007b60:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b62:	e019      	b.n	8007b98 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007b64:	f000 fbce 	bl	8008304 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b68:	4b10      	ldr	r3, [pc, #64]	; (8007bac <prvCheckTasksWaitingTermination+0x50>)
 8007b6a:	68db      	ldr	r3, [r3, #12]
 8007b6c:	68db      	ldr	r3, [r3, #12]
 8007b6e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	3304      	adds	r3, #4
 8007b74:	4618      	mov	r0, r3
 8007b76:	f7fe fc59 	bl	800642c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007b7a:	4b0d      	ldr	r3, [pc, #52]	; (8007bb0 <prvCheckTasksWaitingTermination+0x54>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	3b01      	subs	r3, #1
 8007b80:	4a0b      	ldr	r2, [pc, #44]	; (8007bb0 <prvCheckTasksWaitingTermination+0x54>)
 8007b82:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007b84:	4b0b      	ldr	r3, [pc, #44]	; (8007bb4 <prvCheckTasksWaitingTermination+0x58>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	3b01      	subs	r3, #1
 8007b8a:	4a0a      	ldr	r2, [pc, #40]	; (8007bb4 <prvCheckTasksWaitingTermination+0x58>)
 8007b8c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007b8e:	f000 fbe9 	bl	8008364 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 f810 	bl	8007bb8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b98:	4b06      	ldr	r3, [pc, #24]	; (8007bb4 <prvCheckTasksWaitingTermination+0x58>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d1e1      	bne.n	8007b64 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007ba0:	bf00      	nop
 8007ba2:	bf00      	nop
 8007ba4:	3708      	adds	r7, #8
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
 8007baa:	bf00      	nop
 8007bac:	2000083c 	.word	0x2000083c
 8007bb0:	20000868 	.word	0x20000868
 8007bb4:	20000850 	.word	0x20000850

08007bb8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	334c      	adds	r3, #76	; 0x4c
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f001 f829 	bl	8008c1c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d108      	bne.n	8007be6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f000 fd81 	bl	80086e0 <vPortFree>
				vPortFree( pxTCB );
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 fd7e 	bl	80086e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007be4:	e018      	b.n	8007c18 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d103      	bne.n	8007bf8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 fd75 	bl	80086e0 <vPortFree>
	}
 8007bf6:	e00f      	b.n	8007c18 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007bfe:	2b02      	cmp	r3, #2
 8007c00:	d00a      	beq.n	8007c18 <prvDeleteTCB+0x60>
	__asm volatile
 8007c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c06:	f383 8811 	msr	BASEPRI, r3
 8007c0a:	f3bf 8f6f 	isb	sy
 8007c0e:	f3bf 8f4f 	dsb	sy
 8007c12:	60fb      	str	r3, [r7, #12]
}
 8007c14:	bf00      	nop
 8007c16:	e7fe      	b.n	8007c16 <prvDeleteTCB+0x5e>
	}
 8007c18:	bf00      	nop
 8007c1a:	3710      	adds	r7, #16
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007c20:	b480      	push	{r7}
 8007c22:	b083      	sub	sp, #12
 8007c24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c26:	4b0c      	ldr	r3, [pc, #48]	; (8007c58 <prvResetNextTaskUnblockTime+0x38>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d104      	bne.n	8007c3a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007c30:	4b0a      	ldr	r3, [pc, #40]	; (8007c5c <prvResetNextTaskUnblockTime+0x3c>)
 8007c32:	f04f 32ff 	mov.w	r2, #4294967295
 8007c36:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007c38:	e008      	b.n	8007c4c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c3a:	4b07      	ldr	r3, [pc, #28]	; (8007c58 <prvResetNextTaskUnblockTime+0x38>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	68db      	ldr	r3, [r3, #12]
 8007c40:	68db      	ldr	r3, [r3, #12]
 8007c42:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	4a04      	ldr	r2, [pc, #16]	; (8007c5c <prvResetNextTaskUnblockTime+0x3c>)
 8007c4a:	6013      	str	r3, [r2, #0]
}
 8007c4c:	bf00      	nop
 8007c4e:	370c      	adds	r7, #12
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr
 8007c58:	20000820 	.word	0x20000820
 8007c5c:	20000888 	.word	0x20000888

08007c60 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007c60:	b480      	push	{r7}
 8007c62:	b083      	sub	sp, #12
 8007c64:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007c66:	4b0b      	ldr	r3, [pc, #44]	; (8007c94 <xTaskGetSchedulerState+0x34>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d102      	bne.n	8007c74 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	607b      	str	r3, [r7, #4]
 8007c72:	e008      	b.n	8007c86 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c74:	4b08      	ldr	r3, [pc, #32]	; (8007c98 <xTaskGetSchedulerState+0x38>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d102      	bne.n	8007c82 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007c7c:	2302      	movs	r3, #2
 8007c7e:	607b      	str	r3, [r7, #4]
 8007c80:	e001      	b.n	8007c86 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007c82:	2300      	movs	r3, #0
 8007c84:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007c86:	687b      	ldr	r3, [r7, #4]
	}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr
 8007c94:	20000874 	.word	0x20000874
 8007c98:	20000890 	.word	0x20000890

08007c9c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b084      	sub	sp, #16
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d05e      	beq.n	8007d70 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cb6:	4b31      	ldr	r3, [pc, #196]	; (8007d7c <xTaskPriorityInherit+0xe0>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d24e      	bcs.n	8007d5e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	699b      	ldr	r3, [r3, #24]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	db06      	blt.n	8007cd6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cc8:	4b2c      	ldr	r3, [pc, #176]	; (8007d7c <xTaskPriorityInherit+0xe0>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cce:	f1c3 0207 	rsb	r2, r3, #7
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	6959      	ldr	r1, [r3, #20]
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cde:	4613      	mov	r3, r2
 8007ce0:	009b      	lsls	r3, r3, #2
 8007ce2:	4413      	add	r3, r2
 8007ce4:	009b      	lsls	r3, r3, #2
 8007ce6:	4a26      	ldr	r2, [pc, #152]	; (8007d80 <xTaskPriorityInherit+0xe4>)
 8007ce8:	4413      	add	r3, r2
 8007cea:	4299      	cmp	r1, r3
 8007cec:	d12f      	bne.n	8007d4e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	3304      	adds	r3, #4
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f7fe fb9a 	bl	800642c <uxListRemove>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d10a      	bne.n	8007d14 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d02:	2201      	movs	r2, #1
 8007d04:	fa02 f303 	lsl.w	r3, r2, r3
 8007d08:	43da      	mvns	r2, r3
 8007d0a:	4b1e      	ldr	r3, [pc, #120]	; (8007d84 <xTaskPriorityInherit+0xe8>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4013      	ands	r3, r2
 8007d10:	4a1c      	ldr	r2, [pc, #112]	; (8007d84 <xTaskPriorityInherit+0xe8>)
 8007d12:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007d14:	4b19      	ldr	r3, [pc, #100]	; (8007d7c <xTaskPriorityInherit+0xe0>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d22:	2201      	movs	r2, #1
 8007d24:	409a      	lsls	r2, r3
 8007d26:	4b17      	ldr	r3, [pc, #92]	; (8007d84 <xTaskPriorityInherit+0xe8>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	4a15      	ldr	r2, [pc, #84]	; (8007d84 <xTaskPriorityInherit+0xe8>)
 8007d2e:	6013      	str	r3, [r2, #0]
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d34:	4613      	mov	r3, r2
 8007d36:	009b      	lsls	r3, r3, #2
 8007d38:	4413      	add	r3, r2
 8007d3a:	009b      	lsls	r3, r3, #2
 8007d3c:	4a10      	ldr	r2, [pc, #64]	; (8007d80 <xTaskPriorityInherit+0xe4>)
 8007d3e:	441a      	add	r2, r3
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	3304      	adds	r3, #4
 8007d44:	4619      	mov	r1, r3
 8007d46:	4610      	mov	r0, r2
 8007d48:	f7fe fb13 	bl	8006372 <vListInsertEnd>
 8007d4c:	e004      	b.n	8007d58 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007d4e:	4b0b      	ldr	r3, [pc, #44]	; (8007d7c <xTaskPriorityInherit+0xe0>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	60fb      	str	r3, [r7, #12]
 8007d5c:	e008      	b.n	8007d70 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d62:	4b06      	ldr	r3, [pc, #24]	; (8007d7c <xTaskPriorityInherit+0xe0>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	d201      	bcs.n	8007d70 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007d70:	68fb      	ldr	r3, [r7, #12]
	}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3710      	adds	r7, #16
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
 8007d7a:	bf00      	nop
 8007d7c:	20000768 	.word	0x20000768
 8007d80:	2000076c 	.word	0x2000076c
 8007d84:	20000870 	.word	0x20000870

08007d88 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b086      	sub	sp, #24
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007d94:	2300      	movs	r3, #0
 8007d96:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d06e      	beq.n	8007e7c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007d9e:	4b3a      	ldr	r3, [pc, #232]	; (8007e88 <xTaskPriorityDisinherit+0x100>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	693a      	ldr	r2, [r7, #16]
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d00a      	beq.n	8007dbe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dac:	f383 8811 	msr	BASEPRI, r3
 8007db0:	f3bf 8f6f 	isb	sy
 8007db4:	f3bf 8f4f 	dsb	sy
 8007db8:	60fb      	str	r3, [r7, #12]
}
 8007dba:	bf00      	nop
 8007dbc:	e7fe      	b.n	8007dbc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d10a      	bne.n	8007ddc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dca:	f383 8811 	msr	BASEPRI, r3
 8007dce:	f3bf 8f6f 	isb	sy
 8007dd2:	f3bf 8f4f 	dsb	sy
 8007dd6:	60bb      	str	r3, [r7, #8]
}
 8007dd8:	bf00      	nop
 8007dda:	e7fe      	b.n	8007dda <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007de0:	1e5a      	subs	r2, r3, #1
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d044      	beq.n	8007e7c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d140      	bne.n	8007e7c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	3304      	adds	r3, #4
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f7fe fb14 	bl	800642c <uxListRemove>
 8007e04:	4603      	mov	r3, r0
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d115      	bne.n	8007e36 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e0e:	491f      	ldr	r1, [pc, #124]	; (8007e8c <xTaskPriorityDisinherit+0x104>)
 8007e10:	4613      	mov	r3, r2
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	4413      	add	r3, r2
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	440b      	add	r3, r1
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d10a      	bne.n	8007e36 <xTaskPriorityDisinherit+0xae>
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e24:	2201      	movs	r2, #1
 8007e26:	fa02 f303 	lsl.w	r3, r2, r3
 8007e2a:	43da      	mvns	r2, r3
 8007e2c:	4b18      	ldr	r3, [pc, #96]	; (8007e90 <xTaskPriorityDisinherit+0x108>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4013      	ands	r3, r2
 8007e32:	4a17      	ldr	r2, [pc, #92]	; (8007e90 <xTaskPriorityDisinherit+0x108>)
 8007e34:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e42:	f1c3 0207 	rsb	r2, r3, #7
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e4e:	2201      	movs	r2, #1
 8007e50:	409a      	lsls	r2, r3
 8007e52:	4b0f      	ldr	r3, [pc, #60]	; (8007e90 <xTaskPriorityDisinherit+0x108>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4313      	orrs	r3, r2
 8007e58:	4a0d      	ldr	r2, [pc, #52]	; (8007e90 <xTaskPriorityDisinherit+0x108>)
 8007e5a:	6013      	str	r3, [r2, #0]
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e60:	4613      	mov	r3, r2
 8007e62:	009b      	lsls	r3, r3, #2
 8007e64:	4413      	add	r3, r2
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	4a08      	ldr	r2, [pc, #32]	; (8007e8c <xTaskPriorityDisinherit+0x104>)
 8007e6a:	441a      	add	r2, r3
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	3304      	adds	r3, #4
 8007e70:	4619      	mov	r1, r3
 8007e72:	4610      	mov	r0, r2
 8007e74:	f7fe fa7d 	bl	8006372 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007e78:	2301      	movs	r3, #1
 8007e7a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007e7c:	697b      	ldr	r3, [r7, #20]
	}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3718      	adds	r7, #24
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	bf00      	nop
 8007e88:	20000768 	.word	0x20000768
 8007e8c:	2000076c 	.word	0x2000076c
 8007e90:	20000870 	.word	0x20000870

08007e94 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b088      	sub	sp, #32
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d077      	beq.n	8007f9c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007eac:	69bb      	ldr	r3, [r7, #24]
 8007eae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d10a      	bne.n	8007eca <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb8:	f383 8811 	msr	BASEPRI, r3
 8007ebc:	f3bf 8f6f 	isb	sy
 8007ec0:	f3bf 8f4f 	dsb	sy
 8007ec4:	60fb      	str	r3, [r7, #12]
}
 8007ec6:	bf00      	nop
 8007ec8:	e7fe      	b.n	8007ec8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007eca:	69bb      	ldr	r3, [r7, #24]
 8007ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ece:	683a      	ldr	r2, [r7, #0]
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d902      	bls.n	8007eda <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	61fb      	str	r3, [r7, #28]
 8007ed8:	e002      	b.n	8007ee0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007eda:	69bb      	ldr	r3, [r7, #24]
 8007edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ede:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007ee0:	69bb      	ldr	r3, [r7, #24]
 8007ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ee4:	69fa      	ldr	r2, [r7, #28]
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d058      	beq.n	8007f9c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007eea:	69bb      	ldr	r3, [r7, #24]
 8007eec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007eee:	697a      	ldr	r2, [r7, #20]
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d153      	bne.n	8007f9c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007ef4:	4b2b      	ldr	r3, [pc, #172]	; (8007fa4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	69ba      	ldr	r2, [r7, #24]
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d10a      	bne.n	8007f14 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f02:	f383 8811 	msr	BASEPRI, r3
 8007f06:	f3bf 8f6f 	isb	sy
 8007f0a:	f3bf 8f4f 	dsb	sy
 8007f0e:	60bb      	str	r3, [r7, #8]
}
 8007f10:	bf00      	nop
 8007f12:	e7fe      	b.n	8007f12 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007f14:	69bb      	ldr	r3, [r7, #24]
 8007f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f18:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007f1a:	69bb      	ldr	r3, [r7, #24]
 8007f1c:	69fa      	ldr	r2, [r7, #28]
 8007f1e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007f20:	69bb      	ldr	r3, [r7, #24]
 8007f22:	699b      	ldr	r3, [r3, #24]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	db04      	blt.n	8007f32 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f28:	69fb      	ldr	r3, [r7, #28]
 8007f2a:	f1c3 0207 	rsb	r2, r3, #7
 8007f2e:	69bb      	ldr	r3, [r7, #24]
 8007f30:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007f32:	69bb      	ldr	r3, [r7, #24]
 8007f34:	6959      	ldr	r1, [r3, #20]
 8007f36:	693a      	ldr	r2, [r7, #16]
 8007f38:	4613      	mov	r3, r2
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	4413      	add	r3, r2
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	4a19      	ldr	r2, [pc, #100]	; (8007fa8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007f42:	4413      	add	r3, r2
 8007f44:	4299      	cmp	r1, r3
 8007f46:	d129      	bne.n	8007f9c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f48:	69bb      	ldr	r3, [r7, #24]
 8007f4a:	3304      	adds	r3, #4
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f7fe fa6d 	bl	800642c <uxListRemove>
 8007f52:	4603      	mov	r3, r0
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d10a      	bne.n	8007f6e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007f58:	69bb      	ldr	r3, [r7, #24]
 8007f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f5c:	2201      	movs	r2, #1
 8007f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f62:	43da      	mvns	r2, r3
 8007f64:	4b11      	ldr	r3, [pc, #68]	; (8007fac <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4013      	ands	r3, r2
 8007f6a:	4a10      	ldr	r2, [pc, #64]	; (8007fac <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007f6c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007f6e:	69bb      	ldr	r3, [r7, #24]
 8007f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f72:	2201      	movs	r2, #1
 8007f74:	409a      	lsls	r2, r3
 8007f76:	4b0d      	ldr	r3, [pc, #52]	; (8007fac <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	4a0b      	ldr	r2, [pc, #44]	; (8007fac <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007f7e:	6013      	str	r3, [r2, #0]
 8007f80:	69bb      	ldr	r3, [r7, #24]
 8007f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f84:	4613      	mov	r3, r2
 8007f86:	009b      	lsls	r3, r3, #2
 8007f88:	4413      	add	r3, r2
 8007f8a:	009b      	lsls	r3, r3, #2
 8007f8c:	4a06      	ldr	r2, [pc, #24]	; (8007fa8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007f8e:	441a      	add	r2, r3
 8007f90:	69bb      	ldr	r3, [r7, #24]
 8007f92:	3304      	adds	r3, #4
 8007f94:	4619      	mov	r1, r3
 8007f96:	4610      	mov	r0, r2
 8007f98:	f7fe f9eb 	bl	8006372 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007f9c:	bf00      	nop
 8007f9e:	3720      	adds	r7, #32
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}
 8007fa4:	20000768 	.word	0x20000768
 8007fa8:	2000076c 	.word	0x2000076c
 8007fac:	20000870 	.word	0x20000870

08007fb0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007fb0:	b480      	push	{r7}
 8007fb2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007fb4:	4b07      	ldr	r3, [pc, #28]	; (8007fd4 <pvTaskIncrementMutexHeldCount+0x24>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d004      	beq.n	8007fc6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007fbc:	4b05      	ldr	r3, [pc, #20]	; (8007fd4 <pvTaskIncrementMutexHeldCount+0x24>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007fc2:	3201      	adds	r2, #1
 8007fc4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8007fc6:	4b03      	ldr	r3, [pc, #12]	; (8007fd4 <pvTaskIncrementMutexHeldCount+0x24>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
	}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr
 8007fd4:	20000768 	.word	0x20000768

08007fd8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b084      	sub	sp, #16
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007fe2:	4b29      	ldr	r3, [pc, #164]	; (8008088 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007fe8:	4b28      	ldr	r3, [pc, #160]	; (800808c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	3304      	adds	r3, #4
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f7fe fa1c 	bl	800642c <uxListRemove>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d10b      	bne.n	8008012 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007ffa:	4b24      	ldr	r3, [pc, #144]	; (800808c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008000:	2201      	movs	r2, #1
 8008002:	fa02 f303 	lsl.w	r3, r2, r3
 8008006:	43da      	mvns	r2, r3
 8008008:	4b21      	ldr	r3, [pc, #132]	; (8008090 <prvAddCurrentTaskToDelayedList+0xb8>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4013      	ands	r3, r2
 800800e:	4a20      	ldr	r2, [pc, #128]	; (8008090 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008010:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008018:	d10a      	bne.n	8008030 <prvAddCurrentTaskToDelayedList+0x58>
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d007      	beq.n	8008030 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008020:	4b1a      	ldr	r3, [pc, #104]	; (800808c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	3304      	adds	r3, #4
 8008026:	4619      	mov	r1, r3
 8008028:	481a      	ldr	r0, [pc, #104]	; (8008094 <prvAddCurrentTaskToDelayedList+0xbc>)
 800802a:	f7fe f9a2 	bl	8006372 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800802e:	e026      	b.n	800807e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008030:	68fa      	ldr	r2, [r7, #12]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	4413      	add	r3, r2
 8008036:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008038:	4b14      	ldr	r3, [pc, #80]	; (800808c <prvAddCurrentTaskToDelayedList+0xb4>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	68ba      	ldr	r2, [r7, #8]
 800803e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008040:	68ba      	ldr	r2, [r7, #8]
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	429a      	cmp	r2, r3
 8008046:	d209      	bcs.n	800805c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008048:	4b13      	ldr	r3, [pc, #76]	; (8008098 <prvAddCurrentTaskToDelayedList+0xc0>)
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	4b0f      	ldr	r3, [pc, #60]	; (800808c <prvAddCurrentTaskToDelayedList+0xb4>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	3304      	adds	r3, #4
 8008052:	4619      	mov	r1, r3
 8008054:	4610      	mov	r0, r2
 8008056:	f7fe f9b0 	bl	80063ba <vListInsert>
}
 800805a:	e010      	b.n	800807e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800805c:	4b0f      	ldr	r3, [pc, #60]	; (800809c <prvAddCurrentTaskToDelayedList+0xc4>)
 800805e:	681a      	ldr	r2, [r3, #0]
 8008060:	4b0a      	ldr	r3, [pc, #40]	; (800808c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	3304      	adds	r3, #4
 8008066:	4619      	mov	r1, r3
 8008068:	4610      	mov	r0, r2
 800806a:	f7fe f9a6 	bl	80063ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800806e:	4b0c      	ldr	r3, [pc, #48]	; (80080a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	68ba      	ldr	r2, [r7, #8]
 8008074:	429a      	cmp	r2, r3
 8008076:	d202      	bcs.n	800807e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008078:	4a09      	ldr	r2, [pc, #36]	; (80080a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	6013      	str	r3, [r2, #0]
}
 800807e:	bf00      	nop
 8008080:	3710      	adds	r7, #16
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop
 8008088:	2000086c 	.word	0x2000086c
 800808c:	20000768 	.word	0x20000768
 8008090:	20000870 	.word	0x20000870
 8008094:	20000854 	.word	0x20000854
 8008098:	20000824 	.word	0x20000824
 800809c:	20000820 	.word	0x20000820
 80080a0:	20000888 	.word	0x20000888

080080a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80080a4:	b480      	push	{r7}
 80080a6:	b085      	sub	sp, #20
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	60f8      	str	r0, [r7, #12]
 80080ac:	60b9      	str	r1, [r7, #8]
 80080ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	3b04      	subs	r3, #4
 80080b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80080bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	3b04      	subs	r3, #4
 80080c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	f023 0201 	bic.w	r2, r3, #1
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	3b04      	subs	r3, #4
 80080d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80080d4:	4a0c      	ldr	r2, [pc, #48]	; (8008108 <pxPortInitialiseStack+0x64>)
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	3b14      	subs	r3, #20
 80080de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80080e0:	687a      	ldr	r2, [r7, #4]
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	3b04      	subs	r3, #4
 80080ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f06f 0202 	mvn.w	r2, #2
 80080f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	3b20      	subs	r3, #32
 80080f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80080fa:	68fb      	ldr	r3, [r7, #12]
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3714      	adds	r7, #20
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr
 8008108:	0800810d 	.word	0x0800810d

0800810c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800810c:	b480      	push	{r7}
 800810e:	b085      	sub	sp, #20
 8008110:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008112:	2300      	movs	r3, #0
 8008114:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008116:	4b12      	ldr	r3, [pc, #72]	; (8008160 <prvTaskExitError+0x54>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800811e:	d00a      	beq.n	8008136 <prvTaskExitError+0x2a>
	__asm volatile
 8008120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008124:	f383 8811 	msr	BASEPRI, r3
 8008128:	f3bf 8f6f 	isb	sy
 800812c:	f3bf 8f4f 	dsb	sy
 8008130:	60fb      	str	r3, [r7, #12]
}
 8008132:	bf00      	nop
 8008134:	e7fe      	b.n	8008134 <prvTaskExitError+0x28>
	__asm volatile
 8008136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800813a:	f383 8811 	msr	BASEPRI, r3
 800813e:	f3bf 8f6f 	isb	sy
 8008142:	f3bf 8f4f 	dsb	sy
 8008146:	60bb      	str	r3, [r7, #8]
}
 8008148:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800814a:	bf00      	nop
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d0fc      	beq.n	800814c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008152:	bf00      	nop
 8008154:	bf00      	nop
 8008156:	3714      	adds	r7, #20
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr
 8008160:	2000000c 	.word	0x2000000c
	...

08008170 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008170:	4b07      	ldr	r3, [pc, #28]	; (8008190 <pxCurrentTCBConst2>)
 8008172:	6819      	ldr	r1, [r3, #0]
 8008174:	6808      	ldr	r0, [r1, #0]
 8008176:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800817a:	f380 8809 	msr	PSP, r0
 800817e:	f3bf 8f6f 	isb	sy
 8008182:	f04f 0000 	mov.w	r0, #0
 8008186:	f380 8811 	msr	BASEPRI, r0
 800818a:	4770      	bx	lr
 800818c:	f3af 8000 	nop.w

08008190 <pxCurrentTCBConst2>:
 8008190:	20000768 	.word	0x20000768
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008194:	bf00      	nop
 8008196:	bf00      	nop

08008198 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008198:	4808      	ldr	r0, [pc, #32]	; (80081bc <prvPortStartFirstTask+0x24>)
 800819a:	6800      	ldr	r0, [r0, #0]
 800819c:	6800      	ldr	r0, [r0, #0]
 800819e:	f380 8808 	msr	MSP, r0
 80081a2:	f04f 0000 	mov.w	r0, #0
 80081a6:	f380 8814 	msr	CONTROL, r0
 80081aa:	b662      	cpsie	i
 80081ac:	b661      	cpsie	f
 80081ae:	f3bf 8f4f 	dsb	sy
 80081b2:	f3bf 8f6f 	isb	sy
 80081b6:	df00      	svc	0
 80081b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80081ba:	bf00      	nop
 80081bc:	e000ed08 	.word	0xe000ed08

080081c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b086      	sub	sp, #24
 80081c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80081c6:	4b46      	ldr	r3, [pc, #280]	; (80082e0 <xPortStartScheduler+0x120>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a46      	ldr	r2, [pc, #280]	; (80082e4 <xPortStartScheduler+0x124>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d10a      	bne.n	80081e6 <xPortStartScheduler+0x26>
	__asm volatile
 80081d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d4:	f383 8811 	msr	BASEPRI, r3
 80081d8:	f3bf 8f6f 	isb	sy
 80081dc:	f3bf 8f4f 	dsb	sy
 80081e0:	613b      	str	r3, [r7, #16]
}
 80081e2:	bf00      	nop
 80081e4:	e7fe      	b.n	80081e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80081e6:	4b3e      	ldr	r3, [pc, #248]	; (80082e0 <xPortStartScheduler+0x120>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a3f      	ldr	r2, [pc, #252]	; (80082e8 <xPortStartScheduler+0x128>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d10a      	bne.n	8008206 <xPortStartScheduler+0x46>
	__asm volatile
 80081f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f4:	f383 8811 	msr	BASEPRI, r3
 80081f8:	f3bf 8f6f 	isb	sy
 80081fc:	f3bf 8f4f 	dsb	sy
 8008200:	60fb      	str	r3, [r7, #12]
}
 8008202:	bf00      	nop
 8008204:	e7fe      	b.n	8008204 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008206:	4b39      	ldr	r3, [pc, #228]	; (80082ec <xPortStartScheduler+0x12c>)
 8008208:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	781b      	ldrb	r3, [r3, #0]
 800820e:	b2db      	uxtb	r3, r3
 8008210:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	22ff      	movs	r2, #255	; 0xff
 8008216:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	781b      	ldrb	r3, [r3, #0]
 800821c:	b2db      	uxtb	r3, r3
 800821e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008220:	78fb      	ldrb	r3, [r7, #3]
 8008222:	b2db      	uxtb	r3, r3
 8008224:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008228:	b2da      	uxtb	r2, r3
 800822a:	4b31      	ldr	r3, [pc, #196]	; (80082f0 <xPortStartScheduler+0x130>)
 800822c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800822e:	4b31      	ldr	r3, [pc, #196]	; (80082f4 <xPortStartScheduler+0x134>)
 8008230:	2207      	movs	r2, #7
 8008232:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008234:	e009      	b.n	800824a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008236:	4b2f      	ldr	r3, [pc, #188]	; (80082f4 <xPortStartScheduler+0x134>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	3b01      	subs	r3, #1
 800823c:	4a2d      	ldr	r2, [pc, #180]	; (80082f4 <xPortStartScheduler+0x134>)
 800823e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008240:	78fb      	ldrb	r3, [r7, #3]
 8008242:	b2db      	uxtb	r3, r3
 8008244:	005b      	lsls	r3, r3, #1
 8008246:	b2db      	uxtb	r3, r3
 8008248:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800824a:	78fb      	ldrb	r3, [r7, #3]
 800824c:	b2db      	uxtb	r3, r3
 800824e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008252:	2b80      	cmp	r3, #128	; 0x80
 8008254:	d0ef      	beq.n	8008236 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008256:	4b27      	ldr	r3, [pc, #156]	; (80082f4 <xPortStartScheduler+0x134>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f1c3 0307 	rsb	r3, r3, #7
 800825e:	2b04      	cmp	r3, #4
 8008260:	d00a      	beq.n	8008278 <xPortStartScheduler+0xb8>
	__asm volatile
 8008262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008266:	f383 8811 	msr	BASEPRI, r3
 800826a:	f3bf 8f6f 	isb	sy
 800826e:	f3bf 8f4f 	dsb	sy
 8008272:	60bb      	str	r3, [r7, #8]
}
 8008274:	bf00      	nop
 8008276:	e7fe      	b.n	8008276 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008278:	4b1e      	ldr	r3, [pc, #120]	; (80082f4 <xPortStartScheduler+0x134>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	021b      	lsls	r3, r3, #8
 800827e:	4a1d      	ldr	r2, [pc, #116]	; (80082f4 <xPortStartScheduler+0x134>)
 8008280:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008282:	4b1c      	ldr	r3, [pc, #112]	; (80082f4 <xPortStartScheduler+0x134>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800828a:	4a1a      	ldr	r2, [pc, #104]	; (80082f4 <xPortStartScheduler+0x134>)
 800828c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	b2da      	uxtb	r2, r3
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008296:	4b18      	ldr	r3, [pc, #96]	; (80082f8 <xPortStartScheduler+0x138>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a17      	ldr	r2, [pc, #92]	; (80082f8 <xPortStartScheduler+0x138>)
 800829c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80082a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80082a2:	4b15      	ldr	r3, [pc, #84]	; (80082f8 <xPortStartScheduler+0x138>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a14      	ldr	r2, [pc, #80]	; (80082f8 <xPortStartScheduler+0x138>)
 80082a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80082ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80082ae:	f000 f8dd 	bl	800846c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80082b2:	4b12      	ldr	r3, [pc, #72]	; (80082fc <xPortStartScheduler+0x13c>)
 80082b4:	2200      	movs	r2, #0
 80082b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80082b8:	f000 f8fc 	bl	80084b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80082bc:	4b10      	ldr	r3, [pc, #64]	; (8008300 <xPortStartScheduler+0x140>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a0f      	ldr	r2, [pc, #60]	; (8008300 <xPortStartScheduler+0x140>)
 80082c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80082c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80082c8:	f7ff ff66 	bl	8008198 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80082cc:	f7ff fa82 	bl	80077d4 <vTaskSwitchContext>
	prvTaskExitError();
 80082d0:	f7ff ff1c 	bl	800810c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80082d4:	2300      	movs	r3, #0
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3718      	adds	r7, #24
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}
 80082de:	bf00      	nop
 80082e0:	e000ed00 	.word	0xe000ed00
 80082e4:	410fc271 	.word	0x410fc271
 80082e8:	410fc270 	.word	0x410fc270
 80082ec:	e000e400 	.word	0xe000e400
 80082f0:	20000894 	.word	0x20000894
 80082f4:	20000898 	.word	0x20000898
 80082f8:	e000ed20 	.word	0xe000ed20
 80082fc:	2000000c 	.word	0x2000000c
 8008300:	e000ef34 	.word	0xe000ef34

08008304 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008304:	b480      	push	{r7}
 8008306:	b083      	sub	sp, #12
 8008308:	af00      	add	r7, sp, #0
	__asm volatile
 800830a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800830e:	f383 8811 	msr	BASEPRI, r3
 8008312:	f3bf 8f6f 	isb	sy
 8008316:	f3bf 8f4f 	dsb	sy
 800831a:	607b      	str	r3, [r7, #4]
}
 800831c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800831e:	4b0f      	ldr	r3, [pc, #60]	; (800835c <vPortEnterCritical+0x58>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	3301      	adds	r3, #1
 8008324:	4a0d      	ldr	r2, [pc, #52]	; (800835c <vPortEnterCritical+0x58>)
 8008326:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008328:	4b0c      	ldr	r3, [pc, #48]	; (800835c <vPortEnterCritical+0x58>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	2b01      	cmp	r3, #1
 800832e:	d10f      	bne.n	8008350 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008330:	4b0b      	ldr	r3, [pc, #44]	; (8008360 <vPortEnterCritical+0x5c>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	b2db      	uxtb	r3, r3
 8008336:	2b00      	cmp	r3, #0
 8008338:	d00a      	beq.n	8008350 <vPortEnterCritical+0x4c>
	__asm volatile
 800833a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800833e:	f383 8811 	msr	BASEPRI, r3
 8008342:	f3bf 8f6f 	isb	sy
 8008346:	f3bf 8f4f 	dsb	sy
 800834a:	603b      	str	r3, [r7, #0]
}
 800834c:	bf00      	nop
 800834e:	e7fe      	b.n	800834e <vPortEnterCritical+0x4a>
	}
}
 8008350:	bf00      	nop
 8008352:	370c      	adds	r7, #12
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr
 800835c:	2000000c 	.word	0x2000000c
 8008360:	e000ed04 	.word	0xe000ed04

08008364 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008364:	b480      	push	{r7}
 8008366:	b083      	sub	sp, #12
 8008368:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800836a:	4b12      	ldr	r3, [pc, #72]	; (80083b4 <vPortExitCritical+0x50>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d10a      	bne.n	8008388 <vPortExitCritical+0x24>
	__asm volatile
 8008372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008376:	f383 8811 	msr	BASEPRI, r3
 800837a:	f3bf 8f6f 	isb	sy
 800837e:	f3bf 8f4f 	dsb	sy
 8008382:	607b      	str	r3, [r7, #4]
}
 8008384:	bf00      	nop
 8008386:	e7fe      	b.n	8008386 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008388:	4b0a      	ldr	r3, [pc, #40]	; (80083b4 <vPortExitCritical+0x50>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	3b01      	subs	r3, #1
 800838e:	4a09      	ldr	r2, [pc, #36]	; (80083b4 <vPortExitCritical+0x50>)
 8008390:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008392:	4b08      	ldr	r3, [pc, #32]	; (80083b4 <vPortExitCritical+0x50>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d105      	bne.n	80083a6 <vPortExitCritical+0x42>
 800839a:	2300      	movs	r3, #0
 800839c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	f383 8811 	msr	BASEPRI, r3
}
 80083a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80083a6:	bf00      	nop
 80083a8:	370c      	adds	r7, #12
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr
 80083b2:	bf00      	nop
 80083b4:	2000000c 	.word	0x2000000c
	...

080083c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80083c0:	f3ef 8009 	mrs	r0, PSP
 80083c4:	f3bf 8f6f 	isb	sy
 80083c8:	4b15      	ldr	r3, [pc, #84]	; (8008420 <pxCurrentTCBConst>)
 80083ca:	681a      	ldr	r2, [r3, #0]
 80083cc:	f01e 0f10 	tst.w	lr, #16
 80083d0:	bf08      	it	eq
 80083d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80083d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083da:	6010      	str	r0, [r2, #0]
 80083dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80083e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80083e4:	f380 8811 	msr	BASEPRI, r0
 80083e8:	f3bf 8f4f 	dsb	sy
 80083ec:	f3bf 8f6f 	isb	sy
 80083f0:	f7ff f9f0 	bl	80077d4 <vTaskSwitchContext>
 80083f4:	f04f 0000 	mov.w	r0, #0
 80083f8:	f380 8811 	msr	BASEPRI, r0
 80083fc:	bc09      	pop	{r0, r3}
 80083fe:	6819      	ldr	r1, [r3, #0]
 8008400:	6808      	ldr	r0, [r1, #0]
 8008402:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008406:	f01e 0f10 	tst.w	lr, #16
 800840a:	bf08      	it	eq
 800840c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008410:	f380 8809 	msr	PSP, r0
 8008414:	f3bf 8f6f 	isb	sy
 8008418:	4770      	bx	lr
 800841a:	bf00      	nop
 800841c:	f3af 8000 	nop.w

08008420 <pxCurrentTCBConst>:
 8008420:	20000768 	.word	0x20000768
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008424:	bf00      	nop
 8008426:	bf00      	nop

08008428 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b082      	sub	sp, #8
 800842c:	af00      	add	r7, sp, #0
	__asm volatile
 800842e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008432:	f383 8811 	msr	BASEPRI, r3
 8008436:	f3bf 8f6f 	isb	sy
 800843a:	f3bf 8f4f 	dsb	sy
 800843e:	607b      	str	r3, [r7, #4]
}
 8008440:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008442:	f7ff f90f 	bl	8007664 <xTaskIncrementTick>
 8008446:	4603      	mov	r3, r0
 8008448:	2b00      	cmp	r3, #0
 800844a:	d003      	beq.n	8008454 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800844c:	4b06      	ldr	r3, [pc, #24]	; (8008468 <SysTick_Handler+0x40>)
 800844e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008452:	601a      	str	r2, [r3, #0]
 8008454:	2300      	movs	r3, #0
 8008456:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	f383 8811 	msr	BASEPRI, r3
}
 800845e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008460:	bf00      	nop
 8008462:	3708      	adds	r7, #8
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}
 8008468:	e000ed04 	.word	0xe000ed04

0800846c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800846c:	b480      	push	{r7}
 800846e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008470:	4b0b      	ldr	r3, [pc, #44]	; (80084a0 <vPortSetupTimerInterrupt+0x34>)
 8008472:	2200      	movs	r2, #0
 8008474:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008476:	4b0b      	ldr	r3, [pc, #44]	; (80084a4 <vPortSetupTimerInterrupt+0x38>)
 8008478:	2200      	movs	r2, #0
 800847a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800847c:	4b0a      	ldr	r3, [pc, #40]	; (80084a8 <vPortSetupTimerInterrupt+0x3c>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a0a      	ldr	r2, [pc, #40]	; (80084ac <vPortSetupTimerInterrupt+0x40>)
 8008482:	fba2 2303 	umull	r2, r3, r2, r3
 8008486:	099b      	lsrs	r3, r3, #6
 8008488:	4a09      	ldr	r2, [pc, #36]	; (80084b0 <vPortSetupTimerInterrupt+0x44>)
 800848a:	3b01      	subs	r3, #1
 800848c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800848e:	4b04      	ldr	r3, [pc, #16]	; (80084a0 <vPortSetupTimerInterrupt+0x34>)
 8008490:	2207      	movs	r2, #7
 8008492:	601a      	str	r2, [r3, #0]
}
 8008494:	bf00      	nop
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr
 800849e:	bf00      	nop
 80084a0:	e000e010 	.word	0xe000e010
 80084a4:	e000e018 	.word	0xe000e018
 80084a8:	20000000 	.word	0x20000000
 80084ac:	10624dd3 	.word	0x10624dd3
 80084b0:	e000e014 	.word	0xe000e014

080084b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80084b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80084c4 <vPortEnableVFP+0x10>
 80084b8:	6801      	ldr	r1, [r0, #0]
 80084ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80084be:	6001      	str	r1, [r0, #0]
 80084c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80084c2:	bf00      	nop
 80084c4:	e000ed88 	.word	0xe000ed88

080084c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80084c8:	b480      	push	{r7}
 80084ca:	b085      	sub	sp, #20
 80084cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80084ce:	f3ef 8305 	mrs	r3, IPSR
 80084d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2b0f      	cmp	r3, #15
 80084d8:	d914      	bls.n	8008504 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80084da:	4a17      	ldr	r2, [pc, #92]	; (8008538 <vPortValidateInterruptPriority+0x70>)
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	4413      	add	r3, r2
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80084e4:	4b15      	ldr	r3, [pc, #84]	; (800853c <vPortValidateInterruptPriority+0x74>)
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	7afa      	ldrb	r2, [r7, #11]
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d20a      	bcs.n	8008504 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80084ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f2:	f383 8811 	msr	BASEPRI, r3
 80084f6:	f3bf 8f6f 	isb	sy
 80084fa:	f3bf 8f4f 	dsb	sy
 80084fe:	607b      	str	r3, [r7, #4]
}
 8008500:	bf00      	nop
 8008502:	e7fe      	b.n	8008502 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008504:	4b0e      	ldr	r3, [pc, #56]	; (8008540 <vPortValidateInterruptPriority+0x78>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800850c:	4b0d      	ldr	r3, [pc, #52]	; (8008544 <vPortValidateInterruptPriority+0x7c>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	429a      	cmp	r2, r3
 8008512:	d90a      	bls.n	800852a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008518:	f383 8811 	msr	BASEPRI, r3
 800851c:	f3bf 8f6f 	isb	sy
 8008520:	f3bf 8f4f 	dsb	sy
 8008524:	603b      	str	r3, [r7, #0]
}
 8008526:	bf00      	nop
 8008528:	e7fe      	b.n	8008528 <vPortValidateInterruptPriority+0x60>
	}
 800852a:	bf00      	nop
 800852c:	3714      	adds	r7, #20
 800852e:	46bd      	mov	sp, r7
 8008530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008534:	4770      	bx	lr
 8008536:	bf00      	nop
 8008538:	e000e3f0 	.word	0xe000e3f0
 800853c:	20000894 	.word	0x20000894
 8008540:	e000ed0c 	.word	0xe000ed0c
 8008544:	20000898 	.word	0x20000898

08008548 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b08a      	sub	sp, #40	; 0x28
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008550:	2300      	movs	r3, #0
 8008552:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008554:	f7fe ffcc 	bl	80074f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008558:	4b5b      	ldr	r3, [pc, #364]	; (80086c8 <pvPortMalloc+0x180>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d101      	bne.n	8008564 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008560:	f000 f938 	bl	80087d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008564:	4b59      	ldr	r3, [pc, #356]	; (80086cc <pvPortMalloc+0x184>)
 8008566:	681a      	ldr	r2, [r3, #0]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	4013      	ands	r3, r2
 800856c:	2b00      	cmp	r3, #0
 800856e:	f040 8093 	bne.w	8008698 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d01d      	beq.n	80085b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008578:	2208      	movs	r2, #8
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	4413      	add	r3, r2
 800857e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f003 0307 	and.w	r3, r3, #7
 8008586:	2b00      	cmp	r3, #0
 8008588:	d014      	beq.n	80085b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f023 0307 	bic.w	r3, r3, #7
 8008590:	3308      	adds	r3, #8
 8008592:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f003 0307 	and.w	r3, r3, #7
 800859a:	2b00      	cmp	r3, #0
 800859c:	d00a      	beq.n	80085b4 <pvPortMalloc+0x6c>
	__asm volatile
 800859e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a2:	f383 8811 	msr	BASEPRI, r3
 80085a6:	f3bf 8f6f 	isb	sy
 80085aa:	f3bf 8f4f 	dsb	sy
 80085ae:	617b      	str	r3, [r7, #20]
}
 80085b0:	bf00      	nop
 80085b2:	e7fe      	b.n	80085b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d06e      	beq.n	8008698 <pvPortMalloc+0x150>
 80085ba:	4b45      	ldr	r3, [pc, #276]	; (80086d0 <pvPortMalloc+0x188>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d869      	bhi.n	8008698 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80085c4:	4b43      	ldr	r3, [pc, #268]	; (80086d4 <pvPortMalloc+0x18c>)
 80085c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80085c8:	4b42      	ldr	r3, [pc, #264]	; (80086d4 <pvPortMalloc+0x18c>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80085ce:	e004      	b.n	80085da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80085d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80085d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80085da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	687a      	ldr	r2, [r7, #4]
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d903      	bls.n	80085ec <pvPortMalloc+0xa4>
 80085e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d1f1      	bne.n	80085d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80085ec:	4b36      	ldr	r3, [pc, #216]	; (80086c8 <pvPortMalloc+0x180>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085f2:	429a      	cmp	r2, r3
 80085f4:	d050      	beq.n	8008698 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80085f6:	6a3b      	ldr	r3, [r7, #32]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	2208      	movs	r2, #8
 80085fc:	4413      	add	r3, r2
 80085fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008602:	681a      	ldr	r2, [r3, #0]
 8008604:	6a3b      	ldr	r3, [r7, #32]
 8008606:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860a:	685a      	ldr	r2, [r3, #4]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	1ad2      	subs	r2, r2, r3
 8008610:	2308      	movs	r3, #8
 8008612:	005b      	lsls	r3, r3, #1
 8008614:	429a      	cmp	r2, r3
 8008616:	d91f      	bls.n	8008658 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	4413      	add	r3, r2
 800861e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008620:	69bb      	ldr	r3, [r7, #24]
 8008622:	f003 0307 	and.w	r3, r3, #7
 8008626:	2b00      	cmp	r3, #0
 8008628:	d00a      	beq.n	8008640 <pvPortMalloc+0xf8>
	__asm volatile
 800862a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800862e:	f383 8811 	msr	BASEPRI, r3
 8008632:	f3bf 8f6f 	isb	sy
 8008636:	f3bf 8f4f 	dsb	sy
 800863a:	613b      	str	r3, [r7, #16]
}
 800863c:	bf00      	nop
 800863e:	e7fe      	b.n	800863e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008642:	685a      	ldr	r2, [r3, #4]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	1ad2      	subs	r2, r2, r3
 8008648:	69bb      	ldr	r3, [r7, #24]
 800864a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800864c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864e:	687a      	ldr	r2, [r7, #4]
 8008650:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008652:	69b8      	ldr	r0, [r7, #24]
 8008654:	f000 f920 	bl	8008898 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008658:	4b1d      	ldr	r3, [pc, #116]	; (80086d0 <pvPortMalloc+0x188>)
 800865a:	681a      	ldr	r2, [r3, #0]
 800865c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	1ad3      	subs	r3, r2, r3
 8008662:	4a1b      	ldr	r2, [pc, #108]	; (80086d0 <pvPortMalloc+0x188>)
 8008664:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008666:	4b1a      	ldr	r3, [pc, #104]	; (80086d0 <pvPortMalloc+0x188>)
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	4b1b      	ldr	r3, [pc, #108]	; (80086d8 <pvPortMalloc+0x190>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	429a      	cmp	r2, r3
 8008670:	d203      	bcs.n	800867a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008672:	4b17      	ldr	r3, [pc, #92]	; (80086d0 <pvPortMalloc+0x188>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a18      	ldr	r2, [pc, #96]	; (80086d8 <pvPortMalloc+0x190>)
 8008678:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800867a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867c:	685a      	ldr	r2, [r3, #4]
 800867e:	4b13      	ldr	r3, [pc, #76]	; (80086cc <pvPortMalloc+0x184>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	431a      	orrs	r2, r3
 8008684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008686:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868a:	2200      	movs	r2, #0
 800868c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800868e:	4b13      	ldr	r3, [pc, #76]	; (80086dc <pvPortMalloc+0x194>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	3301      	adds	r3, #1
 8008694:	4a11      	ldr	r2, [pc, #68]	; (80086dc <pvPortMalloc+0x194>)
 8008696:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008698:	f7fe ff38 	bl	800750c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800869c:	69fb      	ldr	r3, [r7, #28]
 800869e:	f003 0307 	and.w	r3, r3, #7
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d00a      	beq.n	80086bc <pvPortMalloc+0x174>
	__asm volatile
 80086a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086aa:	f383 8811 	msr	BASEPRI, r3
 80086ae:	f3bf 8f6f 	isb	sy
 80086b2:	f3bf 8f4f 	dsb	sy
 80086b6:	60fb      	str	r3, [r7, #12]
}
 80086b8:	bf00      	nop
 80086ba:	e7fe      	b.n	80086ba <pvPortMalloc+0x172>
	return pvReturn;
 80086bc:	69fb      	ldr	r3, [r7, #28]
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3728      	adds	r7, #40	; 0x28
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	bf00      	nop
 80086c8:	2000145c 	.word	0x2000145c
 80086cc:	20001470 	.word	0x20001470
 80086d0:	20001460 	.word	0x20001460
 80086d4:	20001454 	.word	0x20001454
 80086d8:	20001464 	.word	0x20001464
 80086dc:	20001468 	.word	0x20001468

080086e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b086      	sub	sp, #24
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d04d      	beq.n	800878e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80086f2:	2308      	movs	r3, #8
 80086f4:	425b      	negs	r3, r3
 80086f6:	697a      	ldr	r2, [r7, #20]
 80086f8:	4413      	add	r3, r2
 80086fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	685a      	ldr	r2, [r3, #4]
 8008704:	4b24      	ldr	r3, [pc, #144]	; (8008798 <vPortFree+0xb8>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4013      	ands	r3, r2
 800870a:	2b00      	cmp	r3, #0
 800870c:	d10a      	bne.n	8008724 <vPortFree+0x44>
	__asm volatile
 800870e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008712:	f383 8811 	msr	BASEPRI, r3
 8008716:	f3bf 8f6f 	isb	sy
 800871a:	f3bf 8f4f 	dsb	sy
 800871e:	60fb      	str	r3, [r7, #12]
}
 8008720:	bf00      	nop
 8008722:	e7fe      	b.n	8008722 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d00a      	beq.n	8008742 <vPortFree+0x62>
	__asm volatile
 800872c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008730:	f383 8811 	msr	BASEPRI, r3
 8008734:	f3bf 8f6f 	isb	sy
 8008738:	f3bf 8f4f 	dsb	sy
 800873c:	60bb      	str	r3, [r7, #8]
}
 800873e:	bf00      	nop
 8008740:	e7fe      	b.n	8008740 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	685a      	ldr	r2, [r3, #4]
 8008746:	4b14      	ldr	r3, [pc, #80]	; (8008798 <vPortFree+0xb8>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4013      	ands	r3, r2
 800874c:	2b00      	cmp	r3, #0
 800874e:	d01e      	beq.n	800878e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d11a      	bne.n	800878e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	685a      	ldr	r2, [r3, #4]
 800875c:	4b0e      	ldr	r3, [pc, #56]	; (8008798 <vPortFree+0xb8>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	43db      	mvns	r3, r3
 8008762:	401a      	ands	r2, r3
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008768:	f7fe fec2 	bl	80074f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	685a      	ldr	r2, [r3, #4]
 8008770:	4b0a      	ldr	r3, [pc, #40]	; (800879c <vPortFree+0xbc>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4413      	add	r3, r2
 8008776:	4a09      	ldr	r2, [pc, #36]	; (800879c <vPortFree+0xbc>)
 8008778:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800877a:	6938      	ldr	r0, [r7, #16]
 800877c:	f000 f88c 	bl	8008898 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008780:	4b07      	ldr	r3, [pc, #28]	; (80087a0 <vPortFree+0xc0>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	3301      	adds	r3, #1
 8008786:	4a06      	ldr	r2, [pc, #24]	; (80087a0 <vPortFree+0xc0>)
 8008788:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800878a:	f7fe febf 	bl	800750c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800878e:	bf00      	nop
 8008790:	3718      	adds	r7, #24
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}
 8008796:	bf00      	nop
 8008798:	20001470 	.word	0x20001470
 800879c:	20001460 	.word	0x20001460
 80087a0:	2000146c 	.word	0x2000146c

080087a4 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 80087a4:	b480      	push	{r7}
 80087a6:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 80087a8:	4b03      	ldr	r3, [pc, #12]	; (80087b8 <xPortGetFreeHeapSize+0x14>)
 80087aa:	681b      	ldr	r3, [r3, #0]
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr
 80087b6:	bf00      	nop
 80087b8:	20001460 	.word	0x20001460

080087bc <xPortGetMinimumEverFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetMinimumEverFreeHeapSize( void )
{
 80087bc:	b480      	push	{r7}
 80087be:	af00      	add	r7, sp, #0
	return xMinimumEverFreeBytesRemaining;
 80087c0:	4b03      	ldr	r3, [pc, #12]	; (80087d0 <xPortGetMinimumEverFreeHeapSize+0x14>)
 80087c2:	681b      	ldr	r3, [r3, #0]
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr
 80087ce:	bf00      	nop
 80087d0:	20001464 	.word	0x20001464

080087d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80087d4:	b480      	push	{r7}
 80087d6:	b085      	sub	sp, #20
 80087d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80087da:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80087de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80087e0:	4b27      	ldr	r3, [pc, #156]	; (8008880 <prvHeapInit+0xac>)
 80087e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f003 0307 	and.w	r3, r3, #7
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d00c      	beq.n	8008808 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	3307      	adds	r3, #7
 80087f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f023 0307 	bic.w	r3, r3, #7
 80087fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80087fc:	68ba      	ldr	r2, [r7, #8]
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	1ad3      	subs	r3, r2, r3
 8008802:	4a1f      	ldr	r2, [pc, #124]	; (8008880 <prvHeapInit+0xac>)
 8008804:	4413      	add	r3, r2
 8008806:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800880c:	4a1d      	ldr	r2, [pc, #116]	; (8008884 <prvHeapInit+0xb0>)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008812:	4b1c      	ldr	r3, [pc, #112]	; (8008884 <prvHeapInit+0xb0>)
 8008814:	2200      	movs	r2, #0
 8008816:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	68ba      	ldr	r2, [r7, #8]
 800881c:	4413      	add	r3, r2
 800881e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008820:	2208      	movs	r2, #8
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	1a9b      	subs	r3, r3, r2
 8008826:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f023 0307 	bic.w	r3, r3, #7
 800882e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	4a15      	ldr	r2, [pc, #84]	; (8008888 <prvHeapInit+0xb4>)
 8008834:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008836:	4b14      	ldr	r3, [pc, #80]	; (8008888 <prvHeapInit+0xb4>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	2200      	movs	r2, #0
 800883c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800883e:	4b12      	ldr	r3, [pc, #72]	; (8008888 <prvHeapInit+0xb4>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	2200      	movs	r2, #0
 8008844:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	68fa      	ldr	r2, [r7, #12]
 800884e:	1ad2      	subs	r2, r2, r3
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008854:	4b0c      	ldr	r3, [pc, #48]	; (8008888 <prvHeapInit+0xb4>)
 8008856:	681a      	ldr	r2, [r3, #0]
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	4a0a      	ldr	r2, [pc, #40]	; (800888c <prvHeapInit+0xb8>)
 8008862:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	685b      	ldr	r3, [r3, #4]
 8008868:	4a09      	ldr	r2, [pc, #36]	; (8008890 <prvHeapInit+0xbc>)
 800886a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800886c:	4b09      	ldr	r3, [pc, #36]	; (8008894 <prvHeapInit+0xc0>)
 800886e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008872:	601a      	str	r2, [r3, #0]
}
 8008874:	bf00      	nop
 8008876:	3714      	adds	r7, #20
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr
 8008880:	2000089c 	.word	0x2000089c
 8008884:	20001454 	.word	0x20001454
 8008888:	2000145c 	.word	0x2000145c
 800888c:	20001464 	.word	0x20001464
 8008890:	20001460 	.word	0x20001460
 8008894:	20001470 	.word	0x20001470

08008898 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008898:	b480      	push	{r7}
 800889a:	b085      	sub	sp, #20
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80088a0:	4b28      	ldr	r3, [pc, #160]	; (8008944 <prvInsertBlockIntoFreeList+0xac>)
 80088a2:	60fb      	str	r3, [r7, #12]
 80088a4:	e002      	b.n	80088ac <prvInsertBlockIntoFreeList+0x14>
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	60fb      	str	r3, [r7, #12]
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d8f7      	bhi.n	80088a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	68ba      	ldr	r2, [r7, #8]
 80088c0:	4413      	add	r3, r2
 80088c2:	687a      	ldr	r2, [r7, #4]
 80088c4:	429a      	cmp	r2, r3
 80088c6:	d108      	bne.n	80088da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	685a      	ldr	r2, [r3, #4]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	441a      	add	r2, r3
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	68ba      	ldr	r2, [r7, #8]
 80088e4:	441a      	add	r2, r3
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d118      	bne.n	8008920 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681a      	ldr	r2, [r3, #0]
 80088f2:	4b15      	ldr	r3, [pc, #84]	; (8008948 <prvInsertBlockIntoFreeList+0xb0>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d00d      	beq.n	8008916 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	685a      	ldr	r2, [r3, #4]
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	441a      	add	r2, r3
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	681a      	ldr	r2, [r3, #0]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	601a      	str	r2, [r3, #0]
 8008914:	e008      	b.n	8008928 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008916:	4b0c      	ldr	r3, [pc, #48]	; (8008948 <prvInsertBlockIntoFreeList+0xb0>)
 8008918:	681a      	ldr	r2, [r3, #0]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	601a      	str	r2, [r3, #0]
 800891e:	e003      	b.n	8008928 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681a      	ldr	r2, [r3, #0]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008928:	68fa      	ldr	r2, [r7, #12]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	429a      	cmp	r2, r3
 800892e:	d002      	beq.n	8008936 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008936:	bf00      	nop
 8008938:	3714      	adds	r7, #20
 800893a:	46bd      	mov	sp, r7
 800893c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008940:	4770      	bx	lr
 8008942:	bf00      	nop
 8008944:	20001454 	.word	0x20001454
 8008948:	2000145c 	.word	0x2000145c

0800894c <__cxa_guard_acquire>:
 800894c:	6803      	ldr	r3, [r0, #0]
 800894e:	07db      	lsls	r3, r3, #31
 8008950:	d406      	bmi.n	8008960 <__cxa_guard_acquire+0x14>
 8008952:	7843      	ldrb	r3, [r0, #1]
 8008954:	b103      	cbz	r3, 8008958 <__cxa_guard_acquire+0xc>
 8008956:	deff      	udf	#255	; 0xff
 8008958:	2301      	movs	r3, #1
 800895a:	7043      	strb	r3, [r0, #1]
 800895c:	4618      	mov	r0, r3
 800895e:	4770      	bx	lr
 8008960:	2000      	movs	r0, #0
 8008962:	4770      	bx	lr

08008964 <__cxa_guard_release>:
 8008964:	2301      	movs	r3, #1
 8008966:	6003      	str	r3, [r0, #0]
 8008968:	4770      	bx	lr

0800896a <_Znwj>:
 800896a:	2801      	cmp	r0, #1
 800896c:	bf38      	it	cc
 800896e:	2001      	movcc	r0, #1
 8008970:	b510      	push	{r4, lr}
 8008972:	4604      	mov	r4, r0
 8008974:	4620      	mov	r0, r4
 8008976:	f000 f845 	bl	8008a04 <malloc>
 800897a:	b930      	cbnz	r0, 800898a <_Znwj+0x20>
 800897c:	f000 f806 	bl	800898c <_ZSt15get_new_handlerv>
 8008980:	b908      	cbnz	r0, 8008986 <_Znwj+0x1c>
 8008982:	f000 f80b 	bl	800899c <abort>
 8008986:	4780      	blx	r0
 8008988:	e7f4      	b.n	8008974 <_Znwj+0xa>
 800898a:	bd10      	pop	{r4, pc}

0800898c <_ZSt15get_new_handlerv>:
 800898c:	4b02      	ldr	r3, [pc, #8]	; (8008998 <_ZSt15get_new_handlerv+0xc>)
 800898e:	6818      	ldr	r0, [r3, #0]
 8008990:	f3bf 8f5b 	dmb	ish
 8008994:	4770      	bx	lr
 8008996:	bf00      	nop
 8008998:	20001474 	.word	0x20001474

0800899c <abort>:
 800899c:	b508      	push	{r3, lr}
 800899e:	2006      	movs	r0, #6
 80089a0:	f000 f9d0 	bl	8008d44 <raise>
 80089a4:	2001      	movs	r0, #1
 80089a6:	f7f9 fbbb 	bl	8002120 <_exit>
	...

080089ac <__errno>:
 80089ac:	4b01      	ldr	r3, [pc, #4]	; (80089b4 <__errno+0x8>)
 80089ae:	6818      	ldr	r0, [r3, #0]
 80089b0:	4770      	bx	lr
 80089b2:	bf00      	nop
 80089b4:	20000010 	.word	0x20000010

080089b8 <__libc_init_array>:
 80089b8:	b570      	push	{r4, r5, r6, lr}
 80089ba:	4d0d      	ldr	r5, [pc, #52]	; (80089f0 <__libc_init_array+0x38>)
 80089bc:	4c0d      	ldr	r4, [pc, #52]	; (80089f4 <__libc_init_array+0x3c>)
 80089be:	1b64      	subs	r4, r4, r5
 80089c0:	10a4      	asrs	r4, r4, #2
 80089c2:	2600      	movs	r6, #0
 80089c4:	42a6      	cmp	r6, r4
 80089c6:	d109      	bne.n	80089dc <__libc_init_array+0x24>
 80089c8:	4d0b      	ldr	r5, [pc, #44]	; (80089f8 <__libc_init_array+0x40>)
 80089ca:	4c0c      	ldr	r4, [pc, #48]	; (80089fc <__libc_init_array+0x44>)
 80089cc:	f000 fd92 	bl	80094f4 <_init>
 80089d0:	1b64      	subs	r4, r4, r5
 80089d2:	10a4      	asrs	r4, r4, #2
 80089d4:	2600      	movs	r6, #0
 80089d6:	42a6      	cmp	r6, r4
 80089d8:	d105      	bne.n	80089e6 <__libc_init_array+0x2e>
 80089da:	bd70      	pop	{r4, r5, r6, pc}
 80089dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80089e0:	4798      	blx	r3
 80089e2:	3601      	adds	r6, #1
 80089e4:	e7ee      	b.n	80089c4 <__libc_init_array+0xc>
 80089e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80089ea:	4798      	blx	r3
 80089ec:	3601      	adds	r6, #1
 80089ee:	e7f2      	b.n	80089d6 <__libc_init_array+0x1e>
 80089f0:	08009c1c 	.word	0x08009c1c
 80089f4:	08009c1c 	.word	0x08009c1c
 80089f8:	08009c1c 	.word	0x08009c1c
 80089fc:	08009c24 	.word	0x08009c24

08008a00 <__retarget_lock_acquire_recursive>:
 8008a00:	4770      	bx	lr

08008a02 <__retarget_lock_release_recursive>:
 8008a02:	4770      	bx	lr

08008a04 <malloc>:
 8008a04:	4b02      	ldr	r3, [pc, #8]	; (8008a10 <malloc+0xc>)
 8008a06:	4601      	mov	r1, r0
 8008a08:	6818      	ldr	r0, [r3, #0]
 8008a0a:	f000 b885 	b.w	8008b18 <_malloc_r>
 8008a0e:	bf00      	nop
 8008a10:	20000010 	.word	0x20000010

08008a14 <memcpy>:
 8008a14:	440a      	add	r2, r1
 8008a16:	4291      	cmp	r1, r2
 8008a18:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a1c:	d100      	bne.n	8008a20 <memcpy+0xc>
 8008a1e:	4770      	bx	lr
 8008a20:	b510      	push	{r4, lr}
 8008a22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a2a:	4291      	cmp	r1, r2
 8008a2c:	d1f9      	bne.n	8008a22 <memcpy+0xe>
 8008a2e:	bd10      	pop	{r4, pc}

08008a30 <memset>:
 8008a30:	4402      	add	r2, r0
 8008a32:	4603      	mov	r3, r0
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d100      	bne.n	8008a3a <memset+0xa>
 8008a38:	4770      	bx	lr
 8008a3a:	f803 1b01 	strb.w	r1, [r3], #1
 8008a3e:	e7f9      	b.n	8008a34 <memset+0x4>

08008a40 <_free_r>:
 8008a40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a42:	2900      	cmp	r1, #0
 8008a44:	d044      	beq.n	8008ad0 <_free_r+0x90>
 8008a46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a4a:	9001      	str	r0, [sp, #4]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	f1a1 0404 	sub.w	r4, r1, #4
 8008a52:	bfb8      	it	lt
 8008a54:	18e4      	addlt	r4, r4, r3
 8008a56:	f000 f9ff 	bl	8008e58 <__malloc_lock>
 8008a5a:	4a1e      	ldr	r2, [pc, #120]	; (8008ad4 <_free_r+0x94>)
 8008a5c:	9801      	ldr	r0, [sp, #4]
 8008a5e:	6813      	ldr	r3, [r2, #0]
 8008a60:	b933      	cbnz	r3, 8008a70 <_free_r+0x30>
 8008a62:	6063      	str	r3, [r4, #4]
 8008a64:	6014      	str	r4, [r2, #0]
 8008a66:	b003      	add	sp, #12
 8008a68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a6c:	f000 b9fa 	b.w	8008e64 <__malloc_unlock>
 8008a70:	42a3      	cmp	r3, r4
 8008a72:	d908      	bls.n	8008a86 <_free_r+0x46>
 8008a74:	6825      	ldr	r5, [r4, #0]
 8008a76:	1961      	adds	r1, r4, r5
 8008a78:	428b      	cmp	r3, r1
 8008a7a:	bf01      	itttt	eq
 8008a7c:	6819      	ldreq	r1, [r3, #0]
 8008a7e:	685b      	ldreq	r3, [r3, #4]
 8008a80:	1949      	addeq	r1, r1, r5
 8008a82:	6021      	streq	r1, [r4, #0]
 8008a84:	e7ed      	b.n	8008a62 <_free_r+0x22>
 8008a86:	461a      	mov	r2, r3
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	b10b      	cbz	r3, 8008a90 <_free_r+0x50>
 8008a8c:	42a3      	cmp	r3, r4
 8008a8e:	d9fa      	bls.n	8008a86 <_free_r+0x46>
 8008a90:	6811      	ldr	r1, [r2, #0]
 8008a92:	1855      	adds	r5, r2, r1
 8008a94:	42a5      	cmp	r5, r4
 8008a96:	d10b      	bne.n	8008ab0 <_free_r+0x70>
 8008a98:	6824      	ldr	r4, [r4, #0]
 8008a9a:	4421      	add	r1, r4
 8008a9c:	1854      	adds	r4, r2, r1
 8008a9e:	42a3      	cmp	r3, r4
 8008aa0:	6011      	str	r1, [r2, #0]
 8008aa2:	d1e0      	bne.n	8008a66 <_free_r+0x26>
 8008aa4:	681c      	ldr	r4, [r3, #0]
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	6053      	str	r3, [r2, #4]
 8008aaa:	4421      	add	r1, r4
 8008aac:	6011      	str	r1, [r2, #0]
 8008aae:	e7da      	b.n	8008a66 <_free_r+0x26>
 8008ab0:	d902      	bls.n	8008ab8 <_free_r+0x78>
 8008ab2:	230c      	movs	r3, #12
 8008ab4:	6003      	str	r3, [r0, #0]
 8008ab6:	e7d6      	b.n	8008a66 <_free_r+0x26>
 8008ab8:	6825      	ldr	r5, [r4, #0]
 8008aba:	1961      	adds	r1, r4, r5
 8008abc:	428b      	cmp	r3, r1
 8008abe:	bf04      	itt	eq
 8008ac0:	6819      	ldreq	r1, [r3, #0]
 8008ac2:	685b      	ldreq	r3, [r3, #4]
 8008ac4:	6063      	str	r3, [r4, #4]
 8008ac6:	bf04      	itt	eq
 8008ac8:	1949      	addeq	r1, r1, r5
 8008aca:	6021      	streq	r1, [r4, #0]
 8008acc:	6054      	str	r4, [r2, #4]
 8008ace:	e7ca      	b.n	8008a66 <_free_r+0x26>
 8008ad0:	b003      	add	sp, #12
 8008ad2:	bd30      	pop	{r4, r5, pc}
 8008ad4:	2000147c 	.word	0x2000147c

08008ad8 <sbrk_aligned>:
 8008ad8:	b570      	push	{r4, r5, r6, lr}
 8008ada:	4e0e      	ldr	r6, [pc, #56]	; (8008b14 <sbrk_aligned+0x3c>)
 8008adc:	460c      	mov	r4, r1
 8008ade:	6831      	ldr	r1, [r6, #0]
 8008ae0:	4605      	mov	r5, r0
 8008ae2:	b911      	cbnz	r1, 8008aea <sbrk_aligned+0x12>
 8008ae4:	f000 f8f6 	bl	8008cd4 <_sbrk_r>
 8008ae8:	6030      	str	r0, [r6, #0]
 8008aea:	4621      	mov	r1, r4
 8008aec:	4628      	mov	r0, r5
 8008aee:	f000 f8f1 	bl	8008cd4 <_sbrk_r>
 8008af2:	1c43      	adds	r3, r0, #1
 8008af4:	d00a      	beq.n	8008b0c <sbrk_aligned+0x34>
 8008af6:	1cc4      	adds	r4, r0, #3
 8008af8:	f024 0403 	bic.w	r4, r4, #3
 8008afc:	42a0      	cmp	r0, r4
 8008afe:	d007      	beq.n	8008b10 <sbrk_aligned+0x38>
 8008b00:	1a21      	subs	r1, r4, r0
 8008b02:	4628      	mov	r0, r5
 8008b04:	f000 f8e6 	bl	8008cd4 <_sbrk_r>
 8008b08:	3001      	adds	r0, #1
 8008b0a:	d101      	bne.n	8008b10 <sbrk_aligned+0x38>
 8008b0c:	f04f 34ff 	mov.w	r4, #4294967295
 8008b10:	4620      	mov	r0, r4
 8008b12:	bd70      	pop	{r4, r5, r6, pc}
 8008b14:	20001480 	.word	0x20001480

08008b18 <_malloc_r>:
 8008b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b1c:	1ccd      	adds	r5, r1, #3
 8008b1e:	f025 0503 	bic.w	r5, r5, #3
 8008b22:	3508      	adds	r5, #8
 8008b24:	2d0c      	cmp	r5, #12
 8008b26:	bf38      	it	cc
 8008b28:	250c      	movcc	r5, #12
 8008b2a:	2d00      	cmp	r5, #0
 8008b2c:	4607      	mov	r7, r0
 8008b2e:	db01      	blt.n	8008b34 <_malloc_r+0x1c>
 8008b30:	42a9      	cmp	r1, r5
 8008b32:	d905      	bls.n	8008b40 <_malloc_r+0x28>
 8008b34:	230c      	movs	r3, #12
 8008b36:	603b      	str	r3, [r7, #0]
 8008b38:	2600      	movs	r6, #0
 8008b3a:	4630      	mov	r0, r6
 8008b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b40:	4e2e      	ldr	r6, [pc, #184]	; (8008bfc <_malloc_r+0xe4>)
 8008b42:	f000 f989 	bl	8008e58 <__malloc_lock>
 8008b46:	6833      	ldr	r3, [r6, #0]
 8008b48:	461c      	mov	r4, r3
 8008b4a:	bb34      	cbnz	r4, 8008b9a <_malloc_r+0x82>
 8008b4c:	4629      	mov	r1, r5
 8008b4e:	4638      	mov	r0, r7
 8008b50:	f7ff ffc2 	bl	8008ad8 <sbrk_aligned>
 8008b54:	1c43      	adds	r3, r0, #1
 8008b56:	4604      	mov	r4, r0
 8008b58:	d14d      	bne.n	8008bf6 <_malloc_r+0xde>
 8008b5a:	6834      	ldr	r4, [r6, #0]
 8008b5c:	4626      	mov	r6, r4
 8008b5e:	2e00      	cmp	r6, #0
 8008b60:	d140      	bne.n	8008be4 <_malloc_r+0xcc>
 8008b62:	6823      	ldr	r3, [r4, #0]
 8008b64:	4631      	mov	r1, r6
 8008b66:	4638      	mov	r0, r7
 8008b68:	eb04 0803 	add.w	r8, r4, r3
 8008b6c:	f000 f8b2 	bl	8008cd4 <_sbrk_r>
 8008b70:	4580      	cmp	r8, r0
 8008b72:	d13a      	bne.n	8008bea <_malloc_r+0xd2>
 8008b74:	6821      	ldr	r1, [r4, #0]
 8008b76:	3503      	adds	r5, #3
 8008b78:	1a6d      	subs	r5, r5, r1
 8008b7a:	f025 0503 	bic.w	r5, r5, #3
 8008b7e:	3508      	adds	r5, #8
 8008b80:	2d0c      	cmp	r5, #12
 8008b82:	bf38      	it	cc
 8008b84:	250c      	movcc	r5, #12
 8008b86:	4629      	mov	r1, r5
 8008b88:	4638      	mov	r0, r7
 8008b8a:	f7ff ffa5 	bl	8008ad8 <sbrk_aligned>
 8008b8e:	3001      	adds	r0, #1
 8008b90:	d02b      	beq.n	8008bea <_malloc_r+0xd2>
 8008b92:	6823      	ldr	r3, [r4, #0]
 8008b94:	442b      	add	r3, r5
 8008b96:	6023      	str	r3, [r4, #0]
 8008b98:	e00e      	b.n	8008bb8 <_malloc_r+0xa0>
 8008b9a:	6822      	ldr	r2, [r4, #0]
 8008b9c:	1b52      	subs	r2, r2, r5
 8008b9e:	d41e      	bmi.n	8008bde <_malloc_r+0xc6>
 8008ba0:	2a0b      	cmp	r2, #11
 8008ba2:	d916      	bls.n	8008bd2 <_malloc_r+0xba>
 8008ba4:	1961      	adds	r1, r4, r5
 8008ba6:	42a3      	cmp	r3, r4
 8008ba8:	6025      	str	r5, [r4, #0]
 8008baa:	bf18      	it	ne
 8008bac:	6059      	strne	r1, [r3, #4]
 8008bae:	6863      	ldr	r3, [r4, #4]
 8008bb0:	bf08      	it	eq
 8008bb2:	6031      	streq	r1, [r6, #0]
 8008bb4:	5162      	str	r2, [r4, r5]
 8008bb6:	604b      	str	r3, [r1, #4]
 8008bb8:	4638      	mov	r0, r7
 8008bba:	f104 060b 	add.w	r6, r4, #11
 8008bbe:	f000 f951 	bl	8008e64 <__malloc_unlock>
 8008bc2:	f026 0607 	bic.w	r6, r6, #7
 8008bc6:	1d23      	adds	r3, r4, #4
 8008bc8:	1af2      	subs	r2, r6, r3
 8008bca:	d0b6      	beq.n	8008b3a <_malloc_r+0x22>
 8008bcc:	1b9b      	subs	r3, r3, r6
 8008bce:	50a3      	str	r3, [r4, r2]
 8008bd0:	e7b3      	b.n	8008b3a <_malloc_r+0x22>
 8008bd2:	6862      	ldr	r2, [r4, #4]
 8008bd4:	42a3      	cmp	r3, r4
 8008bd6:	bf0c      	ite	eq
 8008bd8:	6032      	streq	r2, [r6, #0]
 8008bda:	605a      	strne	r2, [r3, #4]
 8008bdc:	e7ec      	b.n	8008bb8 <_malloc_r+0xa0>
 8008bde:	4623      	mov	r3, r4
 8008be0:	6864      	ldr	r4, [r4, #4]
 8008be2:	e7b2      	b.n	8008b4a <_malloc_r+0x32>
 8008be4:	4634      	mov	r4, r6
 8008be6:	6876      	ldr	r6, [r6, #4]
 8008be8:	e7b9      	b.n	8008b5e <_malloc_r+0x46>
 8008bea:	230c      	movs	r3, #12
 8008bec:	603b      	str	r3, [r7, #0]
 8008bee:	4638      	mov	r0, r7
 8008bf0:	f000 f938 	bl	8008e64 <__malloc_unlock>
 8008bf4:	e7a1      	b.n	8008b3a <_malloc_r+0x22>
 8008bf6:	6025      	str	r5, [r4, #0]
 8008bf8:	e7de      	b.n	8008bb8 <_malloc_r+0xa0>
 8008bfa:	bf00      	nop
 8008bfc:	2000147c 	.word	0x2000147c

08008c00 <cleanup_glue>:
 8008c00:	b538      	push	{r3, r4, r5, lr}
 8008c02:	460c      	mov	r4, r1
 8008c04:	6809      	ldr	r1, [r1, #0]
 8008c06:	4605      	mov	r5, r0
 8008c08:	b109      	cbz	r1, 8008c0e <cleanup_glue+0xe>
 8008c0a:	f7ff fff9 	bl	8008c00 <cleanup_glue>
 8008c0e:	4621      	mov	r1, r4
 8008c10:	4628      	mov	r0, r5
 8008c12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c16:	f7ff bf13 	b.w	8008a40 <_free_r>
	...

08008c1c <_reclaim_reent>:
 8008c1c:	4b2c      	ldr	r3, [pc, #176]	; (8008cd0 <_reclaim_reent+0xb4>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4283      	cmp	r3, r0
 8008c22:	b570      	push	{r4, r5, r6, lr}
 8008c24:	4604      	mov	r4, r0
 8008c26:	d051      	beq.n	8008ccc <_reclaim_reent+0xb0>
 8008c28:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008c2a:	b143      	cbz	r3, 8008c3e <_reclaim_reent+0x22>
 8008c2c:	68db      	ldr	r3, [r3, #12]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d14a      	bne.n	8008cc8 <_reclaim_reent+0xac>
 8008c32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c34:	6819      	ldr	r1, [r3, #0]
 8008c36:	b111      	cbz	r1, 8008c3e <_reclaim_reent+0x22>
 8008c38:	4620      	mov	r0, r4
 8008c3a:	f7ff ff01 	bl	8008a40 <_free_r>
 8008c3e:	6961      	ldr	r1, [r4, #20]
 8008c40:	b111      	cbz	r1, 8008c48 <_reclaim_reent+0x2c>
 8008c42:	4620      	mov	r0, r4
 8008c44:	f7ff fefc 	bl	8008a40 <_free_r>
 8008c48:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008c4a:	b111      	cbz	r1, 8008c52 <_reclaim_reent+0x36>
 8008c4c:	4620      	mov	r0, r4
 8008c4e:	f7ff fef7 	bl	8008a40 <_free_r>
 8008c52:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008c54:	b111      	cbz	r1, 8008c5c <_reclaim_reent+0x40>
 8008c56:	4620      	mov	r0, r4
 8008c58:	f7ff fef2 	bl	8008a40 <_free_r>
 8008c5c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008c5e:	b111      	cbz	r1, 8008c66 <_reclaim_reent+0x4a>
 8008c60:	4620      	mov	r0, r4
 8008c62:	f7ff feed 	bl	8008a40 <_free_r>
 8008c66:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008c68:	b111      	cbz	r1, 8008c70 <_reclaim_reent+0x54>
 8008c6a:	4620      	mov	r0, r4
 8008c6c:	f7ff fee8 	bl	8008a40 <_free_r>
 8008c70:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008c72:	b111      	cbz	r1, 8008c7a <_reclaim_reent+0x5e>
 8008c74:	4620      	mov	r0, r4
 8008c76:	f7ff fee3 	bl	8008a40 <_free_r>
 8008c7a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008c7c:	b111      	cbz	r1, 8008c84 <_reclaim_reent+0x68>
 8008c7e:	4620      	mov	r0, r4
 8008c80:	f7ff fede 	bl	8008a40 <_free_r>
 8008c84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c86:	b111      	cbz	r1, 8008c8e <_reclaim_reent+0x72>
 8008c88:	4620      	mov	r0, r4
 8008c8a:	f7ff fed9 	bl	8008a40 <_free_r>
 8008c8e:	69a3      	ldr	r3, [r4, #24]
 8008c90:	b1e3      	cbz	r3, 8008ccc <_reclaim_reent+0xb0>
 8008c92:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008c94:	4620      	mov	r0, r4
 8008c96:	4798      	blx	r3
 8008c98:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008c9a:	b1b9      	cbz	r1, 8008ccc <_reclaim_reent+0xb0>
 8008c9c:	4620      	mov	r0, r4
 8008c9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008ca2:	f7ff bfad 	b.w	8008c00 <cleanup_glue>
 8008ca6:	5949      	ldr	r1, [r1, r5]
 8008ca8:	b941      	cbnz	r1, 8008cbc <_reclaim_reent+0xa0>
 8008caa:	3504      	adds	r5, #4
 8008cac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cae:	2d80      	cmp	r5, #128	; 0x80
 8008cb0:	68d9      	ldr	r1, [r3, #12]
 8008cb2:	d1f8      	bne.n	8008ca6 <_reclaim_reent+0x8a>
 8008cb4:	4620      	mov	r0, r4
 8008cb6:	f7ff fec3 	bl	8008a40 <_free_r>
 8008cba:	e7ba      	b.n	8008c32 <_reclaim_reent+0x16>
 8008cbc:	680e      	ldr	r6, [r1, #0]
 8008cbe:	4620      	mov	r0, r4
 8008cc0:	f7ff febe 	bl	8008a40 <_free_r>
 8008cc4:	4631      	mov	r1, r6
 8008cc6:	e7ef      	b.n	8008ca8 <_reclaim_reent+0x8c>
 8008cc8:	2500      	movs	r5, #0
 8008cca:	e7ef      	b.n	8008cac <_reclaim_reent+0x90>
 8008ccc:	bd70      	pop	{r4, r5, r6, pc}
 8008cce:	bf00      	nop
 8008cd0:	20000010 	.word	0x20000010

08008cd4 <_sbrk_r>:
 8008cd4:	b538      	push	{r3, r4, r5, lr}
 8008cd6:	4d06      	ldr	r5, [pc, #24]	; (8008cf0 <_sbrk_r+0x1c>)
 8008cd8:	2300      	movs	r3, #0
 8008cda:	4604      	mov	r4, r0
 8008cdc:	4608      	mov	r0, r1
 8008cde:	602b      	str	r3, [r5, #0]
 8008ce0:	f7f9 fa28 	bl	8002134 <_sbrk>
 8008ce4:	1c43      	adds	r3, r0, #1
 8008ce6:	d102      	bne.n	8008cee <_sbrk_r+0x1a>
 8008ce8:	682b      	ldr	r3, [r5, #0]
 8008cea:	b103      	cbz	r3, 8008cee <_sbrk_r+0x1a>
 8008cec:	6023      	str	r3, [r4, #0]
 8008cee:	bd38      	pop	{r3, r4, r5, pc}
 8008cf0:	20001484 	.word	0x20001484

08008cf4 <_raise_r>:
 8008cf4:	291f      	cmp	r1, #31
 8008cf6:	b538      	push	{r3, r4, r5, lr}
 8008cf8:	4604      	mov	r4, r0
 8008cfa:	460d      	mov	r5, r1
 8008cfc:	d904      	bls.n	8008d08 <_raise_r+0x14>
 8008cfe:	2316      	movs	r3, #22
 8008d00:	6003      	str	r3, [r0, #0]
 8008d02:	f04f 30ff 	mov.w	r0, #4294967295
 8008d06:	bd38      	pop	{r3, r4, r5, pc}
 8008d08:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008d0a:	b112      	cbz	r2, 8008d12 <_raise_r+0x1e>
 8008d0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008d10:	b94b      	cbnz	r3, 8008d26 <_raise_r+0x32>
 8008d12:	4620      	mov	r0, r4
 8008d14:	f000 f830 	bl	8008d78 <_getpid_r>
 8008d18:	462a      	mov	r2, r5
 8008d1a:	4601      	mov	r1, r0
 8008d1c:	4620      	mov	r0, r4
 8008d1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d22:	f000 b817 	b.w	8008d54 <_kill_r>
 8008d26:	2b01      	cmp	r3, #1
 8008d28:	d00a      	beq.n	8008d40 <_raise_r+0x4c>
 8008d2a:	1c59      	adds	r1, r3, #1
 8008d2c:	d103      	bne.n	8008d36 <_raise_r+0x42>
 8008d2e:	2316      	movs	r3, #22
 8008d30:	6003      	str	r3, [r0, #0]
 8008d32:	2001      	movs	r0, #1
 8008d34:	e7e7      	b.n	8008d06 <_raise_r+0x12>
 8008d36:	2400      	movs	r4, #0
 8008d38:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008d3c:	4628      	mov	r0, r5
 8008d3e:	4798      	blx	r3
 8008d40:	2000      	movs	r0, #0
 8008d42:	e7e0      	b.n	8008d06 <_raise_r+0x12>

08008d44 <raise>:
 8008d44:	4b02      	ldr	r3, [pc, #8]	; (8008d50 <raise+0xc>)
 8008d46:	4601      	mov	r1, r0
 8008d48:	6818      	ldr	r0, [r3, #0]
 8008d4a:	f7ff bfd3 	b.w	8008cf4 <_raise_r>
 8008d4e:	bf00      	nop
 8008d50:	20000010 	.word	0x20000010

08008d54 <_kill_r>:
 8008d54:	b538      	push	{r3, r4, r5, lr}
 8008d56:	4d07      	ldr	r5, [pc, #28]	; (8008d74 <_kill_r+0x20>)
 8008d58:	2300      	movs	r3, #0
 8008d5a:	4604      	mov	r4, r0
 8008d5c:	4608      	mov	r0, r1
 8008d5e:	4611      	mov	r1, r2
 8008d60:	602b      	str	r3, [r5, #0]
 8008d62:	f7f9 f9cd 	bl	8002100 <_kill>
 8008d66:	1c43      	adds	r3, r0, #1
 8008d68:	d102      	bne.n	8008d70 <_kill_r+0x1c>
 8008d6a:	682b      	ldr	r3, [r5, #0]
 8008d6c:	b103      	cbz	r3, 8008d70 <_kill_r+0x1c>
 8008d6e:	6023      	str	r3, [r4, #0]
 8008d70:	bd38      	pop	{r3, r4, r5, pc}
 8008d72:	bf00      	nop
 8008d74:	20001484 	.word	0x20001484

08008d78 <_getpid_r>:
 8008d78:	f7f9 b9ba 	b.w	80020f0 <_getpid>

08008d7c <sniprintf>:
 8008d7c:	b40c      	push	{r2, r3}
 8008d7e:	b530      	push	{r4, r5, lr}
 8008d80:	4b17      	ldr	r3, [pc, #92]	; (8008de0 <sniprintf+0x64>)
 8008d82:	1e0c      	subs	r4, r1, #0
 8008d84:	681d      	ldr	r5, [r3, #0]
 8008d86:	b09d      	sub	sp, #116	; 0x74
 8008d88:	da08      	bge.n	8008d9c <sniprintf+0x20>
 8008d8a:	238b      	movs	r3, #139	; 0x8b
 8008d8c:	602b      	str	r3, [r5, #0]
 8008d8e:	f04f 30ff 	mov.w	r0, #4294967295
 8008d92:	b01d      	add	sp, #116	; 0x74
 8008d94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d98:	b002      	add	sp, #8
 8008d9a:	4770      	bx	lr
 8008d9c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008da0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008da4:	bf14      	ite	ne
 8008da6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008daa:	4623      	moveq	r3, r4
 8008dac:	9304      	str	r3, [sp, #16]
 8008dae:	9307      	str	r3, [sp, #28]
 8008db0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008db4:	9002      	str	r0, [sp, #8]
 8008db6:	9006      	str	r0, [sp, #24]
 8008db8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008dbc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008dbe:	ab21      	add	r3, sp, #132	; 0x84
 8008dc0:	a902      	add	r1, sp, #8
 8008dc2:	4628      	mov	r0, r5
 8008dc4:	9301      	str	r3, [sp, #4]
 8008dc6:	f000 f8af 	bl	8008f28 <_svfiprintf_r>
 8008dca:	1c43      	adds	r3, r0, #1
 8008dcc:	bfbc      	itt	lt
 8008dce:	238b      	movlt	r3, #139	; 0x8b
 8008dd0:	602b      	strlt	r3, [r5, #0]
 8008dd2:	2c00      	cmp	r4, #0
 8008dd4:	d0dd      	beq.n	8008d92 <sniprintf+0x16>
 8008dd6:	9b02      	ldr	r3, [sp, #8]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	701a      	strb	r2, [r3, #0]
 8008ddc:	e7d9      	b.n	8008d92 <sniprintf+0x16>
 8008dde:	bf00      	nop
 8008de0:	20000010 	.word	0x20000010

08008de4 <_vsniprintf_r>:
 8008de4:	b530      	push	{r4, r5, lr}
 8008de6:	4614      	mov	r4, r2
 8008de8:	2c00      	cmp	r4, #0
 8008dea:	b09b      	sub	sp, #108	; 0x6c
 8008dec:	4605      	mov	r5, r0
 8008dee:	461a      	mov	r2, r3
 8008df0:	da05      	bge.n	8008dfe <_vsniprintf_r+0x1a>
 8008df2:	238b      	movs	r3, #139	; 0x8b
 8008df4:	6003      	str	r3, [r0, #0]
 8008df6:	f04f 30ff 	mov.w	r0, #4294967295
 8008dfa:	b01b      	add	sp, #108	; 0x6c
 8008dfc:	bd30      	pop	{r4, r5, pc}
 8008dfe:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008e02:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008e06:	bf14      	ite	ne
 8008e08:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008e0c:	4623      	moveq	r3, r4
 8008e0e:	9302      	str	r3, [sp, #8]
 8008e10:	9305      	str	r3, [sp, #20]
 8008e12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008e16:	9100      	str	r1, [sp, #0]
 8008e18:	9104      	str	r1, [sp, #16]
 8008e1a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008e1e:	4669      	mov	r1, sp
 8008e20:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008e22:	f000 f881 	bl	8008f28 <_svfiprintf_r>
 8008e26:	1c43      	adds	r3, r0, #1
 8008e28:	bfbc      	itt	lt
 8008e2a:	238b      	movlt	r3, #139	; 0x8b
 8008e2c:	602b      	strlt	r3, [r5, #0]
 8008e2e:	2c00      	cmp	r4, #0
 8008e30:	d0e3      	beq.n	8008dfa <_vsniprintf_r+0x16>
 8008e32:	9b00      	ldr	r3, [sp, #0]
 8008e34:	2200      	movs	r2, #0
 8008e36:	701a      	strb	r2, [r3, #0]
 8008e38:	e7df      	b.n	8008dfa <_vsniprintf_r+0x16>
	...

08008e3c <vsniprintf>:
 8008e3c:	b507      	push	{r0, r1, r2, lr}
 8008e3e:	9300      	str	r3, [sp, #0]
 8008e40:	4613      	mov	r3, r2
 8008e42:	460a      	mov	r2, r1
 8008e44:	4601      	mov	r1, r0
 8008e46:	4803      	ldr	r0, [pc, #12]	; (8008e54 <vsniprintf+0x18>)
 8008e48:	6800      	ldr	r0, [r0, #0]
 8008e4a:	f7ff ffcb 	bl	8008de4 <_vsniprintf_r>
 8008e4e:	b003      	add	sp, #12
 8008e50:	f85d fb04 	ldr.w	pc, [sp], #4
 8008e54:	20000010 	.word	0x20000010

08008e58 <__malloc_lock>:
 8008e58:	4801      	ldr	r0, [pc, #4]	; (8008e60 <__malloc_lock+0x8>)
 8008e5a:	f7ff bdd1 	b.w	8008a00 <__retarget_lock_acquire_recursive>
 8008e5e:	bf00      	nop
 8008e60:	20001478 	.word	0x20001478

08008e64 <__malloc_unlock>:
 8008e64:	4801      	ldr	r0, [pc, #4]	; (8008e6c <__malloc_unlock+0x8>)
 8008e66:	f7ff bdcc 	b.w	8008a02 <__retarget_lock_release_recursive>
 8008e6a:	bf00      	nop
 8008e6c:	20001478 	.word	0x20001478

08008e70 <__ssputs_r>:
 8008e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e74:	688e      	ldr	r6, [r1, #8]
 8008e76:	429e      	cmp	r6, r3
 8008e78:	4682      	mov	sl, r0
 8008e7a:	460c      	mov	r4, r1
 8008e7c:	4690      	mov	r8, r2
 8008e7e:	461f      	mov	r7, r3
 8008e80:	d838      	bhi.n	8008ef4 <__ssputs_r+0x84>
 8008e82:	898a      	ldrh	r2, [r1, #12]
 8008e84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008e88:	d032      	beq.n	8008ef0 <__ssputs_r+0x80>
 8008e8a:	6825      	ldr	r5, [r4, #0]
 8008e8c:	6909      	ldr	r1, [r1, #16]
 8008e8e:	eba5 0901 	sub.w	r9, r5, r1
 8008e92:	6965      	ldr	r5, [r4, #20]
 8008e94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008e9c:	3301      	adds	r3, #1
 8008e9e:	444b      	add	r3, r9
 8008ea0:	106d      	asrs	r5, r5, #1
 8008ea2:	429d      	cmp	r5, r3
 8008ea4:	bf38      	it	cc
 8008ea6:	461d      	movcc	r5, r3
 8008ea8:	0553      	lsls	r3, r2, #21
 8008eaa:	d531      	bpl.n	8008f10 <__ssputs_r+0xa0>
 8008eac:	4629      	mov	r1, r5
 8008eae:	f7ff fe33 	bl	8008b18 <_malloc_r>
 8008eb2:	4606      	mov	r6, r0
 8008eb4:	b950      	cbnz	r0, 8008ecc <__ssputs_r+0x5c>
 8008eb6:	230c      	movs	r3, #12
 8008eb8:	f8ca 3000 	str.w	r3, [sl]
 8008ebc:	89a3      	ldrh	r3, [r4, #12]
 8008ebe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ec2:	81a3      	strh	r3, [r4, #12]
 8008ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ecc:	6921      	ldr	r1, [r4, #16]
 8008ece:	464a      	mov	r2, r9
 8008ed0:	f7ff fda0 	bl	8008a14 <memcpy>
 8008ed4:	89a3      	ldrh	r3, [r4, #12]
 8008ed6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008eda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ede:	81a3      	strh	r3, [r4, #12]
 8008ee0:	6126      	str	r6, [r4, #16]
 8008ee2:	6165      	str	r5, [r4, #20]
 8008ee4:	444e      	add	r6, r9
 8008ee6:	eba5 0509 	sub.w	r5, r5, r9
 8008eea:	6026      	str	r6, [r4, #0]
 8008eec:	60a5      	str	r5, [r4, #8]
 8008eee:	463e      	mov	r6, r7
 8008ef0:	42be      	cmp	r6, r7
 8008ef2:	d900      	bls.n	8008ef6 <__ssputs_r+0x86>
 8008ef4:	463e      	mov	r6, r7
 8008ef6:	6820      	ldr	r0, [r4, #0]
 8008ef8:	4632      	mov	r2, r6
 8008efa:	4641      	mov	r1, r8
 8008efc:	f000 faa8 	bl	8009450 <memmove>
 8008f00:	68a3      	ldr	r3, [r4, #8]
 8008f02:	1b9b      	subs	r3, r3, r6
 8008f04:	60a3      	str	r3, [r4, #8]
 8008f06:	6823      	ldr	r3, [r4, #0]
 8008f08:	4433      	add	r3, r6
 8008f0a:	6023      	str	r3, [r4, #0]
 8008f0c:	2000      	movs	r0, #0
 8008f0e:	e7db      	b.n	8008ec8 <__ssputs_r+0x58>
 8008f10:	462a      	mov	r2, r5
 8008f12:	f000 fab7 	bl	8009484 <_realloc_r>
 8008f16:	4606      	mov	r6, r0
 8008f18:	2800      	cmp	r0, #0
 8008f1a:	d1e1      	bne.n	8008ee0 <__ssputs_r+0x70>
 8008f1c:	6921      	ldr	r1, [r4, #16]
 8008f1e:	4650      	mov	r0, sl
 8008f20:	f7ff fd8e 	bl	8008a40 <_free_r>
 8008f24:	e7c7      	b.n	8008eb6 <__ssputs_r+0x46>
	...

08008f28 <_svfiprintf_r>:
 8008f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f2c:	4698      	mov	r8, r3
 8008f2e:	898b      	ldrh	r3, [r1, #12]
 8008f30:	061b      	lsls	r3, r3, #24
 8008f32:	b09d      	sub	sp, #116	; 0x74
 8008f34:	4607      	mov	r7, r0
 8008f36:	460d      	mov	r5, r1
 8008f38:	4614      	mov	r4, r2
 8008f3a:	d50e      	bpl.n	8008f5a <_svfiprintf_r+0x32>
 8008f3c:	690b      	ldr	r3, [r1, #16]
 8008f3e:	b963      	cbnz	r3, 8008f5a <_svfiprintf_r+0x32>
 8008f40:	2140      	movs	r1, #64	; 0x40
 8008f42:	f7ff fde9 	bl	8008b18 <_malloc_r>
 8008f46:	6028      	str	r0, [r5, #0]
 8008f48:	6128      	str	r0, [r5, #16]
 8008f4a:	b920      	cbnz	r0, 8008f56 <_svfiprintf_r+0x2e>
 8008f4c:	230c      	movs	r3, #12
 8008f4e:	603b      	str	r3, [r7, #0]
 8008f50:	f04f 30ff 	mov.w	r0, #4294967295
 8008f54:	e0d1      	b.n	80090fa <_svfiprintf_r+0x1d2>
 8008f56:	2340      	movs	r3, #64	; 0x40
 8008f58:	616b      	str	r3, [r5, #20]
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	9309      	str	r3, [sp, #36]	; 0x24
 8008f5e:	2320      	movs	r3, #32
 8008f60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f64:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f68:	2330      	movs	r3, #48	; 0x30
 8008f6a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009114 <_svfiprintf_r+0x1ec>
 8008f6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f72:	f04f 0901 	mov.w	r9, #1
 8008f76:	4623      	mov	r3, r4
 8008f78:	469a      	mov	sl, r3
 8008f7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f7e:	b10a      	cbz	r2, 8008f84 <_svfiprintf_r+0x5c>
 8008f80:	2a25      	cmp	r2, #37	; 0x25
 8008f82:	d1f9      	bne.n	8008f78 <_svfiprintf_r+0x50>
 8008f84:	ebba 0b04 	subs.w	fp, sl, r4
 8008f88:	d00b      	beq.n	8008fa2 <_svfiprintf_r+0x7a>
 8008f8a:	465b      	mov	r3, fp
 8008f8c:	4622      	mov	r2, r4
 8008f8e:	4629      	mov	r1, r5
 8008f90:	4638      	mov	r0, r7
 8008f92:	f7ff ff6d 	bl	8008e70 <__ssputs_r>
 8008f96:	3001      	adds	r0, #1
 8008f98:	f000 80aa 	beq.w	80090f0 <_svfiprintf_r+0x1c8>
 8008f9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f9e:	445a      	add	r2, fp
 8008fa0:	9209      	str	r2, [sp, #36]	; 0x24
 8008fa2:	f89a 3000 	ldrb.w	r3, [sl]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	f000 80a2 	beq.w	80090f0 <_svfiprintf_r+0x1c8>
 8008fac:	2300      	movs	r3, #0
 8008fae:	f04f 32ff 	mov.w	r2, #4294967295
 8008fb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fb6:	f10a 0a01 	add.w	sl, sl, #1
 8008fba:	9304      	str	r3, [sp, #16]
 8008fbc:	9307      	str	r3, [sp, #28]
 8008fbe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008fc2:	931a      	str	r3, [sp, #104]	; 0x68
 8008fc4:	4654      	mov	r4, sl
 8008fc6:	2205      	movs	r2, #5
 8008fc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fcc:	4851      	ldr	r0, [pc, #324]	; (8009114 <_svfiprintf_r+0x1ec>)
 8008fce:	f7f7 f917 	bl	8000200 <memchr>
 8008fd2:	9a04      	ldr	r2, [sp, #16]
 8008fd4:	b9d8      	cbnz	r0, 800900e <_svfiprintf_r+0xe6>
 8008fd6:	06d0      	lsls	r0, r2, #27
 8008fd8:	bf44      	itt	mi
 8008fda:	2320      	movmi	r3, #32
 8008fdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fe0:	0711      	lsls	r1, r2, #28
 8008fe2:	bf44      	itt	mi
 8008fe4:	232b      	movmi	r3, #43	; 0x2b
 8008fe6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fea:	f89a 3000 	ldrb.w	r3, [sl]
 8008fee:	2b2a      	cmp	r3, #42	; 0x2a
 8008ff0:	d015      	beq.n	800901e <_svfiprintf_r+0xf6>
 8008ff2:	9a07      	ldr	r2, [sp, #28]
 8008ff4:	4654      	mov	r4, sl
 8008ff6:	2000      	movs	r0, #0
 8008ff8:	f04f 0c0a 	mov.w	ip, #10
 8008ffc:	4621      	mov	r1, r4
 8008ffe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009002:	3b30      	subs	r3, #48	; 0x30
 8009004:	2b09      	cmp	r3, #9
 8009006:	d94e      	bls.n	80090a6 <_svfiprintf_r+0x17e>
 8009008:	b1b0      	cbz	r0, 8009038 <_svfiprintf_r+0x110>
 800900a:	9207      	str	r2, [sp, #28]
 800900c:	e014      	b.n	8009038 <_svfiprintf_r+0x110>
 800900e:	eba0 0308 	sub.w	r3, r0, r8
 8009012:	fa09 f303 	lsl.w	r3, r9, r3
 8009016:	4313      	orrs	r3, r2
 8009018:	9304      	str	r3, [sp, #16]
 800901a:	46a2      	mov	sl, r4
 800901c:	e7d2      	b.n	8008fc4 <_svfiprintf_r+0x9c>
 800901e:	9b03      	ldr	r3, [sp, #12]
 8009020:	1d19      	adds	r1, r3, #4
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	9103      	str	r1, [sp, #12]
 8009026:	2b00      	cmp	r3, #0
 8009028:	bfbb      	ittet	lt
 800902a:	425b      	neglt	r3, r3
 800902c:	f042 0202 	orrlt.w	r2, r2, #2
 8009030:	9307      	strge	r3, [sp, #28]
 8009032:	9307      	strlt	r3, [sp, #28]
 8009034:	bfb8      	it	lt
 8009036:	9204      	strlt	r2, [sp, #16]
 8009038:	7823      	ldrb	r3, [r4, #0]
 800903a:	2b2e      	cmp	r3, #46	; 0x2e
 800903c:	d10c      	bne.n	8009058 <_svfiprintf_r+0x130>
 800903e:	7863      	ldrb	r3, [r4, #1]
 8009040:	2b2a      	cmp	r3, #42	; 0x2a
 8009042:	d135      	bne.n	80090b0 <_svfiprintf_r+0x188>
 8009044:	9b03      	ldr	r3, [sp, #12]
 8009046:	1d1a      	adds	r2, r3, #4
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	9203      	str	r2, [sp, #12]
 800904c:	2b00      	cmp	r3, #0
 800904e:	bfb8      	it	lt
 8009050:	f04f 33ff 	movlt.w	r3, #4294967295
 8009054:	3402      	adds	r4, #2
 8009056:	9305      	str	r3, [sp, #20]
 8009058:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009124 <_svfiprintf_r+0x1fc>
 800905c:	7821      	ldrb	r1, [r4, #0]
 800905e:	2203      	movs	r2, #3
 8009060:	4650      	mov	r0, sl
 8009062:	f7f7 f8cd 	bl	8000200 <memchr>
 8009066:	b140      	cbz	r0, 800907a <_svfiprintf_r+0x152>
 8009068:	2340      	movs	r3, #64	; 0x40
 800906a:	eba0 000a 	sub.w	r0, r0, sl
 800906e:	fa03 f000 	lsl.w	r0, r3, r0
 8009072:	9b04      	ldr	r3, [sp, #16]
 8009074:	4303      	orrs	r3, r0
 8009076:	3401      	adds	r4, #1
 8009078:	9304      	str	r3, [sp, #16]
 800907a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800907e:	4826      	ldr	r0, [pc, #152]	; (8009118 <_svfiprintf_r+0x1f0>)
 8009080:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009084:	2206      	movs	r2, #6
 8009086:	f7f7 f8bb 	bl	8000200 <memchr>
 800908a:	2800      	cmp	r0, #0
 800908c:	d038      	beq.n	8009100 <_svfiprintf_r+0x1d8>
 800908e:	4b23      	ldr	r3, [pc, #140]	; (800911c <_svfiprintf_r+0x1f4>)
 8009090:	bb1b      	cbnz	r3, 80090da <_svfiprintf_r+0x1b2>
 8009092:	9b03      	ldr	r3, [sp, #12]
 8009094:	3307      	adds	r3, #7
 8009096:	f023 0307 	bic.w	r3, r3, #7
 800909a:	3308      	adds	r3, #8
 800909c:	9303      	str	r3, [sp, #12]
 800909e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090a0:	4433      	add	r3, r6
 80090a2:	9309      	str	r3, [sp, #36]	; 0x24
 80090a4:	e767      	b.n	8008f76 <_svfiprintf_r+0x4e>
 80090a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80090aa:	460c      	mov	r4, r1
 80090ac:	2001      	movs	r0, #1
 80090ae:	e7a5      	b.n	8008ffc <_svfiprintf_r+0xd4>
 80090b0:	2300      	movs	r3, #0
 80090b2:	3401      	adds	r4, #1
 80090b4:	9305      	str	r3, [sp, #20]
 80090b6:	4619      	mov	r1, r3
 80090b8:	f04f 0c0a 	mov.w	ip, #10
 80090bc:	4620      	mov	r0, r4
 80090be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090c2:	3a30      	subs	r2, #48	; 0x30
 80090c4:	2a09      	cmp	r2, #9
 80090c6:	d903      	bls.n	80090d0 <_svfiprintf_r+0x1a8>
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d0c5      	beq.n	8009058 <_svfiprintf_r+0x130>
 80090cc:	9105      	str	r1, [sp, #20]
 80090ce:	e7c3      	b.n	8009058 <_svfiprintf_r+0x130>
 80090d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80090d4:	4604      	mov	r4, r0
 80090d6:	2301      	movs	r3, #1
 80090d8:	e7f0      	b.n	80090bc <_svfiprintf_r+0x194>
 80090da:	ab03      	add	r3, sp, #12
 80090dc:	9300      	str	r3, [sp, #0]
 80090de:	462a      	mov	r2, r5
 80090e0:	4b0f      	ldr	r3, [pc, #60]	; (8009120 <_svfiprintf_r+0x1f8>)
 80090e2:	a904      	add	r1, sp, #16
 80090e4:	4638      	mov	r0, r7
 80090e6:	f3af 8000 	nop.w
 80090ea:	1c42      	adds	r2, r0, #1
 80090ec:	4606      	mov	r6, r0
 80090ee:	d1d6      	bne.n	800909e <_svfiprintf_r+0x176>
 80090f0:	89ab      	ldrh	r3, [r5, #12]
 80090f2:	065b      	lsls	r3, r3, #25
 80090f4:	f53f af2c 	bmi.w	8008f50 <_svfiprintf_r+0x28>
 80090f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090fa:	b01d      	add	sp, #116	; 0x74
 80090fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009100:	ab03      	add	r3, sp, #12
 8009102:	9300      	str	r3, [sp, #0]
 8009104:	462a      	mov	r2, r5
 8009106:	4b06      	ldr	r3, [pc, #24]	; (8009120 <_svfiprintf_r+0x1f8>)
 8009108:	a904      	add	r1, sp, #16
 800910a:	4638      	mov	r0, r7
 800910c:	f000 f87a 	bl	8009204 <_printf_i>
 8009110:	e7eb      	b.n	80090ea <_svfiprintf_r+0x1c2>
 8009112:	bf00      	nop
 8009114:	08009be0 	.word	0x08009be0
 8009118:	08009bea 	.word	0x08009bea
 800911c:	00000000 	.word	0x00000000
 8009120:	08008e71 	.word	0x08008e71
 8009124:	08009be6 	.word	0x08009be6

08009128 <_printf_common>:
 8009128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800912c:	4616      	mov	r6, r2
 800912e:	4699      	mov	r9, r3
 8009130:	688a      	ldr	r2, [r1, #8]
 8009132:	690b      	ldr	r3, [r1, #16]
 8009134:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009138:	4293      	cmp	r3, r2
 800913a:	bfb8      	it	lt
 800913c:	4613      	movlt	r3, r2
 800913e:	6033      	str	r3, [r6, #0]
 8009140:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009144:	4607      	mov	r7, r0
 8009146:	460c      	mov	r4, r1
 8009148:	b10a      	cbz	r2, 800914e <_printf_common+0x26>
 800914a:	3301      	adds	r3, #1
 800914c:	6033      	str	r3, [r6, #0]
 800914e:	6823      	ldr	r3, [r4, #0]
 8009150:	0699      	lsls	r1, r3, #26
 8009152:	bf42      	ittt	mi
 8009154:	6833      	ldrmi	r3, [r6, #0]
 8009156:	3302      	addmi	r3, #2
 8009158:	6033      	strmi	r3, [r6, #0]
 800915a:	6825      	ldr	r5, [r4, #0]
 800915c:	f015 0506 	ands.w	r5, r5, #6
 8009160:	d106      	bne.n	8009170 <_printf_common+0x48>
 8009162:	f104 0a19 	add.w	sl, r4, #25
 8009166:	68e3      	ldr	r3, [r4, #12]
 8009168:	6832      	ldr	r2, [r6, #0]
 800916a:	1a9b      	subs	r3, r3, r2
 800916c:	42ab      	cmp	r3, r5
 800916e:	dc26      	bgt.n	80091be <_printf_common+0x96>
 8009170:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009174:	1e13      	subs	r3, r2, #0
 8009176:	6822      	ldr	r2, [r4, #0]
 8009178:	bf18      	it	ne
 800917a:	2301      	movne	r3, #1
 800917c:	0692      	lsls	r2, r2, #26
 800917e:	d42b      	bmi.n	80091d8 <_printf_common+0xb0>
 8009180:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009184:	4649      	mov	r1, r9
 8009186:	4638      	mov	r0, r7
 8009188:	47c0      	blx	r8
 800918a:	3001      	adds	r0, #1
 800918c:	d01e      	beq.n	80091cc <_printf_common+0xa4>
 800918e:	6823      	ldr	r3, [r4, #0]
 8009190:	68e5      	ldr	r5, [r4, #12]
 8009192:	6832      	ldr	r2, [r6, #0]
 8009194:	f003 0306 	and.w	r3, r3, #6
 8009198:	2b04      	cmp	r3, #4
 800919a:	bf08      	it	eq
 800919c:	1aad      	subeq	r5, r5, r2
 800919e:	68a3      	ldr	r3, [r4, #8]
 80091a0:	6922      	ldr	r2, [r4, #16]
 80091a2:	bf0c      	ite	eq
 80091a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80091a8:	2500      	movne	r5, #0
 80091aa:	4293      	cmp	r3, r2
 80091ac:	bfc4      	itt	gt
 80091ae:	1a9b      	subgt	r3, r3, r2
 80091b0:	18ed      	addgt	r5, r5, r3
 80091b2:	2600      	movs	r6, #0
 80091b4:	341a      	adds	r4, #26
 80091b6:	42b5      	cmp	r5, r6
 80091b8:	d11a      	bne.n	80091f0 <_printf_common+0xc8>
 80091ba:	2000      	movs	r0, #0
 80091bc:	e008      	b.n	80091d0 <_printf_common+0xa8>
 80091be:	2301      	movs	r3, #1
 80091c0:	4652      	mov	r2, sl
 80091c2:	4649      	mov	r1, r9
 80091c4:	4638      	mov	r0, r7
 80091c6:	47c0      	blx	r8
 80091c8:	3001      	adds	r0, #1
 80091ca:	d103      	bne.n	80091d4 <_printf_common+0xac>
 80091cc:	f04f 30ff 	mov.w	r0, #4294967295
 80091d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091d4:	3501      	adds	r5, #1
 80091d6:	e7c6      	b.n	8009166 <_printf_common+0x3e>
 80091d8:	18e1      	adds	r1, r4, r3
 80091da:	1c5a      	adds	r2, r3, #1
 80091dc:	2030      	movs	r0, #48	; 0x30
 80091de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80091e2:	4422      	add	r2, r4
 80091e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80091e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80091ec:	3302      	adds	r3, #2
 80091ee:	e7c7      	b.n	8009180 <_printf_common+0x58>
 80091f0:	2301      	movs	r3, #1
 80091f2:	4622      	mov	r2, r4
 80091f4:	4649      	mov	r1, r9
 80091f6:	4638      	mov	r0, r7
 80091f8:	47c0      	blx	r8
 80091fa:	3001      	adds	r0, #1
 80091fc:	d0e6      	beq.n	80091cc <_printf_common+0xa4>
 80091fe:	3601      	adds	r6, #1
 8009200:	e7d9      	b.n	80091b6 <_printf_common+0x8e>
	...

08009204 <_printf_i>:
 8009204:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009208:	7e0f      	ldrb	r7, [r1, #24]
 800920a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800920c:	2f78      	cmp	r7, #120	; 0x78
 800920e:	4691      	mov	r9, r2
 8009210:	4680      	mov	r8, r0
 8009212:	460c      	mov	r4, r1
 8009214:	469a      	mov	sl, r3
 8009216:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800921a:	d807      	bhi.n	800922c <_printf_i+0x28>
 800921c:	2f62      	cmp	r7, #98	; 0x62
 800921e:	d80a      	bhi.n	8009236 <_printf_i+0x32>
 8009220:	2f00      	cmp	r7, #0
 8009222:	f000 80d8 	beq.w	80093d6 <_printf_i+0x1d2>
 8009226:	2f58      	cmp	r7, #88	; 0x58
 8009228:	f000 80a3 	beq.w	8009372 <_printf_i+0x16e>
 800922c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009230:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009234:	e03a      	b.n	80092ac <_printf_i+0xa8>
 8009236:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800923a:	2b15      	cmp	r3, #21
 800923c:	d8f6      	bhi.n	800922c <_printf_i+0x28>
 800923e:	a101      	add	r1, pc, #4	; (adr r1, 8009244 <_printf_i+0x40>)
 8009240:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009244:	0800929d 	.word	0x0800929d
 8009248:	080092b1 	.word	0x080092b1
 800924c:	0800922d 	.word	0x0800922d
 8009250:	0800922d 	.word	0x0800922d
 8009254:	0800922d 	.word	0x0800922d
 8009258:	0800922d 	.word	0x0800922d
 800925c:	080092b1 	.word	0x080092b1
 8009260:	0800922d 	.word	0x0800922d
 8009264:	0800922d 	.word	0x0800922d
 8009268:	0800922d 	.word	0x0800922d
 800926c:	0800922d 	.word	0x0800922d
 8009270:	080093bd 	.word	0x080093bd
 8009274:	080092e1 	.word	0x080092e1
 8009278:	0800939f 	.word	0x0800939f
 800927c:	0800922d 	.word	0x0800922d
 8009280:	0800922d 	.word	0x0800922d
 8009284:	080093df 	.word	0x080093df
 8009288:	0800922d 	.word	0x0800922d
 800928c:	080092e1 	.word	0x080092e1
 8009290:	0800922d 	.word	0x0800922d
 8009294:	0800922d 	.word	0x0800922d
 8009298:	080093a7 	.word	0x080093a7
 800929c:	682b      	ldr	r3, [r5, #0]
 800929e:	1d1a      	adds	r2, r3, #4
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	602a      	str	r2, [r5, #0]
 80092a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80092a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80092ac:	2301      	movs	r3, #1
 80092ae:	e0a3      	b.n	80093f8 <_printf_i+0x1f4>
 80092b0:	6820      	ldr	r0, [r4, #0]
 80092b2:	6829      	ldr	r1, [r5, #0]
 80092b4:	0606      	lsls	r6, r0, #24
 80092b6:	f101 0304 	add.w	r3, r1, #4
 80092ba:	d50a      	bpl.n	80092d2 <_printf_i+0xce>
 80092bc:	680e      	ldr	r6, [r1, #0]
 80092be:	602b      	str	r3, [r5, #0]
 80092c0:	2e00      	cmp	r6, #0
 80092c2:	da03      	bge.n	80092cc <_printf_i+0xc8>
 80092c4:	232d      	movs	r3, #45	; 0x2d
 80092c6:	4276      	negs	r6, r6
 80092c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092cc:	485e      	ldr	r0, [pc, #376]	; (8009448 <_printf_i+0x244>)
 80092ce:	230a      	movs	r3, #10
 80092d0:	e019      	b.n	8009306 <_printf_i+0x102>
 80092d2:	680e      	ldr	r6, [r1, #0]
 80092d4:	602b      	str	r3, [r5, #0]
 80092d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80092da:	bf18      	it	ne
 80092dc:	b236      	sxthne	r6, r6
 80092de:	e7ef      	b.n	80092c0 <_printf_i+0xbc>
 80092e0:	682b      	ldr	r3, [r5, #0]
 80092e2:	6820      	ldr	r0, [r4, #0]
 80092e4:	1d19      	adds	r1, r3, #4
 80092e6:	6029      	str	r1, [r5, #0]
 80092e8:	0601      	lsls	r1, r0, #24
 80092ea:	d501      	bpl.n	80092f0 <_printf_i+0xec>
 80092ec:	681e      	ldr	r6, [r3, #0]
 80092ee:	e002      	b.n	80092f6 <_printf_i+0xf2>
 80092f0:	0646      	lsls	r6, r0, #25
 80092f2:	d5fb      	bpl.n	80092ec <_printf_i+0xe8>
 80092f4:	881e      	ldrh	r6, [r3, #0]
 80092f6:	4854      	ldr	r0, [pc, #336]	; (8009448 <_printf_i+0x244>)
 80092f8:	2f6f      	cmp	r7, #111	; 0x6f
 80092fa:	bf0c      	ite	eq
 80092fc:	2308      	moveq	r3, #8
 80092fe:	230a      	movne	r3, #10
 8009300:	2100      	movs	r1, #0
 8009302:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009306:	6865      	ldr	r5, [r4, #4]
 8009308:	60a5      	str	r5, [r4, #8]
 800930a:	2d00      	cmp	r5, #0
 800930c:	bfa2      	ittt	ge
 800930e:	6821      	ldrge	r1, [r4, #0]
 8009310:	f021 0104 	bicge.w	r1, r1, #4
 8009314:	6021      	strge	r1, [r4, #0]
 8009316:	b90e      	cbnz	r6, 800931c <_printf_i+0x118>
 8009318:	2d00      	cmp	r5, #0
 800931a:	d04d      	beq.n	80093b8 <_printf_i+0x1b4>
 800931c:	4615      	mov	r5, r2
 800931e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009322:	fb03 6711 	mls	r7, r3, r1, r6
 8009326:	5dc7      	ldrb	r7, [r0, r7]
 8009328:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800932c:	4637      	mov	r7, r6
 800932e:	42bb      	cmp	r3, r7
 8009330:	460e      	mov	r6, r1
 8009332:	d9f4      	bls.n	800931e <_printf_i+0x11a>
 8009334:	2b08      	cmp	r3, #8
 8009336:	d10b      	bne.n	8009350 <_printf_i+0x14c>
 8009338:	6823      	ldr	r3, [r4, #0]
 800933a:	07de      	lsls	r6, r3, #31
 800933c:	d508      	bpl.n	8009350 <_printf_i+0x14c>
 800933e:	6923      	ldr	r3, [r4, #16]
 8009340:	6861      	ldr	r1, [r4, #4]
 8009342:	4299      	cmp	r1, r3
 8009344:	bfde      	ittt	le
 8009346:	2330      	movle	r3, #48	; 0x30
 8009348:	f805 3c01 	strble.w	r3, [r5, #-1]
 800934c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009350:	1b52      	subs	r2, r2, r5
 8009352:	6122      	str	r2, [r4, #16]
 8009354:	f8cd a000 	str.w	sl, [sp]
 8009358:	464b      	mov	r3, r9
 800935a:	aa03      	add	r2, sp, #12
 800935c:	4621      	mov	r1, r4
 800935e:	4640      	mov	r0, r8
 8009360:	f7ff fee2 	bl	8009128 <_printf_common>
 8009364:	3001      	adds	r0, #1
 8009366:	d14c      	bne.n	8009402 <_printf_i+0x1fe>
 8009368:	f04f 30ff 	mov.w	r0, #4294967295
 800936c:	b004      	add	sp, #16
 800936e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009372:	4835      	ldr	r0, [pc, #212]	; (8009448 <_printf_i+0x244>)
 8009374:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009378:	6829      	ldr	r1, [r5, #0]
 800937a:	6823      	ldr	r3, [r4, #0]
 800937c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009380:	6029      	str	r1, [r5, #0]
 8009382:	061d      	lsls	r5, r3, #24
 8009384:	d514      	bpl.n	80093b0 <_printf_i+0x1ac>
 8009386:	07df      	lsls	r7, r3, #31
 8009388:	bf44      	itt	mi
 800938a:	f043 0320 	orrmi.w	r3, r3, #32
 800938e:	6023      	strmi	r3, [r4, #0]
 8009390:	b91e      	cbnz	r6, 800939a <_printf_i+0x196>
 8009392:	6823      	ldr	r3, [r4, #0]
 8009394:	f023 0320 	bic.w	r3, r3, #32
 8009398:	6023      	str	r3, [r4, #0]
 800939a:	2310      	movs	r3, #16
 800939c:	e7b0      	b.n	8009300 <_printf_i+0xfc>
 800939e:	6823      	ldr	r3, [r4, #0]
 80093a0:	f043 0320 	orr.w	r3, r3, #32
 80093a4:	6023      	str	r3, [r4, #0]
 80093a6:	2378      	movs	r3, #120	; 0x78
 80093a8:	4828      	ldr	r0, [pc, #160]	; (800944c <_printf_i+0x248>)
 80093aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80093ae:	e7e3      	b.n	8009378 <_printf_i+0x174>
 80093b0:	0659      	lsls	r1, r3, #25
 80093b2:	bf48      	it	mi
 80093b4:	b2b6      	uxthmi	r6, r6
 80093b6:	e7e6      	b.n	8009386 <_printf_i+0x182>
 80093b8:	4615      	mov	r5, r2
 80093ba:	e7bb      	b.n	8009334 <_printf_i+0x130>
 80093bc:	682b      	ldr	r3, [r5, #0]
 80093be:	6826      	ldr	r6, [r4, #0]
 80093c0:	6961      	ldr	r1, [r4, #20]
 80093c2:	1d18      	adds	r0, r3, #4
 80093c4:	6028      	str	r0, [r5, #0]
 80093c6:	0635      	lsls	r5, r6, #24
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	d501      	bpl.n	80093d0 <_printf_i+0x1cc>
 80093cc:	6019      	str	r1, [r3, #0]
 80093ce:	e002      	b.n	80093d6 <_printf_i+0x1d2>
 80093d0:	0670      	lsls	r0, r6, #25
 80093d2:	d5fb      	bpl.n	80093cc <_printf_i+0x1c8>
 80093d4:	8019      	strh	r1, [r3, #0]
 80093d6:	2300      	movs	r3, #0
 80093d8:	6123      	str	r3, [r4, #16]
 80093da:	4615      	mov	r5, r2
 80093dc:	e7ba      	b.n	8009354 <_printf_i+0x150>
 80093de:	682b      	ldr	r3, [r5, #0]
 80093e0:	1d1a      	adds	r2, r3, #4
 80093e2:	602a      	str	r2, [r5, #0]
 80093e4:	681d      	ldr	r5, [r3, #0]
 80093e6:	6862      	ldr	r2, [r4, #4]
 80093e8:	2100      	movs	r1, #0
 80093ea:	4628      	mov	r0, r5
 80093ec:	f7f6 ff08 	bl	8000200 <memchr>
 80093f0:	b108      	cbz	r0, 80093f6 <_printf_i+0x1f2>
 80093f2:	1b40      	subs	r0, r0, r5
 80093f4:	6060      	str	r0, [r4, #4]
 80093f6:	6863      	ldr	r3, [r4, #4]
 80093f8:	6123      	str	r3, [r4, #16]
 80093fa:	2300      	movs	r3, #0
 80093fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009400:	e7a8      	b.n	8009354 <_printf_i+0x150>
 8009402:	6923      	ldr	r3, [r4, #16]
 8009404:	462a      	mov	r2, r5
 8009406:	4649      	mov	r1, r9
 8009408:	4640      	mov	r0, r8
 800940a:	47d0      	blx	sl
 800940c:	3001      	adds	r0, #1
 800940e:	d0ab      	beq.n	8009368 <_printf_i+0x164>
 8009410:	6823      	ldr	r3, [r4, #0]
 8009412:	079b      	lsls	r3, r3, #30
 8009414:	d413      	bmi.n	800943e <_printf_i+0x23a>
 8009416:	68e0      	ldr	r0, [r4, #12]
 8009418:	9b03      	ldr	r3, [sp, #12]
 800941a:	4298      	cmp	r0, r3
 800941c:	bfb8      	it	lt
 800941e:	4618      	movlt	r0, r3
 8009420:	e7a4      	b.n	800936c <_printf_i+0x168>
 8009422:	2301      	movs	r3, #1
 8009424:	4632      	mov	r2, r6
 8009426:	4649      	mov	r1, r9
 8009428:	4640      	mov	r0, r8
 800942a:	47d0      	blx	sl
 800942c:	3001      	adds	r0, #1
 800942e:	d09b      	beq.n	8009368 <_printf_i+0x164>
 8009430:	3501      	adds	r5, #1
 8009432:	68e3      	ldr	r3, [r4, #12]
 8009434:	9903      	ldr	r1, [sp, #12]
 8009436:	1a5b      	subs	r3, r3, r1
 8009438:	42ab      	cmp	r3, r5
 800943a:	dcf2      	bgt.n	8009422 <_printf_i+0x21e>
 800943c:	e7eb      	b.n	8009416 <_printf_i+0x212>
 800943e:	2500      	movs	r5, #0
 8009440:	f104 0619 	add.w	r6, r4, #25
 8009444:	e7f5      	b.n	8009432 <_printf_i+0x22e>
 8009446:	bf00      	nop
 8009448:	08009bf1 	.word	0x08009bf1
 800944c:	08009c02 	.word	0x08009c02

08009450 <memmove>:
 8009450:	4288      	cmp	r0, r1
 8009452:	b510      	push	{r4, lr}
 8009454:	eb01 0402 	add.w	r4, r1, r2
 8009458:	d902      	bls.n	8009460 <memmove+0x10>
 800945a:	4284      	cmp	r4, r0
 800945c:	4623      	mov	r3, r4
 800945e:	d807      	bhi.n	8009470 <memmove+0x20>
 8009460:	1e43      	subs	r3, r0, #1
 8009462:	42a1      	cmp	r1, r4
 8009464:	d008      	beq.n	8009478 <memmove+0x28>
 8009466:	f811 2b01 	ldrb.w	r2, [r1], #1
 800946a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800946e:	e7f8      	b.n	8009462 <memmove+0x12>
 8009470:	4402      	add	r2, r0
 8009472:	4601      	mov	r1, r0
 8009474:	428a      	cmp	r2, r1
 8009476:	d100      	bne.n	800947a <memmove+0x2a>
 8009478:	bd10      	pop	{r4, pc}
 800947a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800947e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009482:	e7f7      	b.n	8009474 <memmove+0x24>

08009484 <_realloc_r>:
 8009484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009488:	4680      	mov	r8, r0
 800948a:	4614      	mov	r4, r2
 800948c:	460e      	mov	r6, r1
 800948e:	b921      	cbnz	r1, 800949a <_realloc_r+0x16>
 8009490:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009494:	4611      	mov	r1, r2
 8009496:	f7ff bb3f 	b.w	8008b18 <_malloc_r>
 800949a:	b92a      	cbnz	r2, 80094a8 <_realloc_r+0x24>
 800949c:	f7ff fad0 	bl	8008a40 <_free_r>
 80094a0:	4625      	mov	r5, r4
 80094a2:	4628      	mov	r0, r5
 80094a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094a8:	f000 f81b 	bl	80094e2 <_malloc_usable_size_r>
 80094ac:	4284      	cmp	r4, r0
 80094ae:	4607      	mov	r7, r0
 80094b0:	d802      	bhi.n	80094b8 <_realloc_r+0x34>
 80094b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80094b6:	d812      	bhi.n	80094de <_realloc_r+0x5a>
 80094b8:	4621      	mov	r1, r4
 80094ba:	4640      	mov	r0, r8
 80094bc:	f7ff fb2c 	bl	8008b18 <_malloc_r>
 80094c0:	4605      	mov	r5, r0
 80094c2:	2800      	cmp	r0, #0
 80094c4:	d0ed      	beq.n	80094a2 <_realloc_r+0x1e>
 80094c6:	42bc      	cmp	r4, r7
 80094c8:	4622      	mov	r2, r4
 80094ca:	4631      	mov	r1, r6
 80094cc:	bf28      	it	cs
 80094ce:	463a      	movcs	r2, r7
 80094d0:	f7ff faa0 	bl	8008a14 <memcpy>
 80094d4:	4631      	mov	r1, r6
 80094d6:	4640      	mov	r0, r8
 80094d8:	f7ff fab2 	bl	8008a40 <_free_r>
 80094dc:	e7e1      	b.n	80094a2 <_realloc_r+0x1e>
 80094de:	4635      	mov	r5, r6
 80094e0:	e7df      	b.n	80094a2 <_realloc_r+0x1e>

080094e2 <_malloc_usable_size_r>:
 80094e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094e6:	1f18      	subs	r0, r3, #4
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	bfbc      	itt	lt
 80094ec:	580b      	ldrlt	r3, [r1, r0]
 80094ee:	18c0      	addlt	r0, r0, r3
 80094f0:	4770      	bx	lr
	...

080094f4 <_init>:
 80094f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094f6:	bf00      	nop
 80094f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094fa:	bc08      	pop	{r3}
 80094fc:	469e      	mov	lr, r3
 80094fe:	4770      	bx	lr

08009500 <_fini>:
 8009500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009502:	bf00      	nop
 8009504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009506:	bc08      	pop	{r3}
 8009508:	469e      	mov	lr, r3
 800950a:	4770      	bx	lr
